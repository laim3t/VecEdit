[2025-05-15 14:00:39.135] [Debug] Logger::initialize - 日志系统已初始化 (logger.cpp:98, void Logger::initialize(bool, const QString&))
[2025-05-15 14:00:39.138] [Debug] main - 应用程序启动 (main.cpp:13, int qMain(int, char**))
[2025-05-15 14:00:39.139] [Info] main - 欢迎使用VecEdit (main.cpp:14, int qMain(int, char**))
[2025-05-15 14:00:39.145] [Debug] VectorTableItemDelegate::refreshCache - 缓存已清空，下次使用将重新从数据库加载 (vectortabledelegate.cpp:27, void VectorTableItemDelegate::refreshCache())
[2025-05-15 14:00:39.146] [Debug] MainWindow::setupTabBar() - 初始化Tab栏 (mainwindow.cpp:509, void MainWindow::setupTabBar())
[2025-05-15 14:00:39.148] [Debug] MainWindow::setupTabBar() - Tab栏初始化完成 (mainwindow.cpp:556, void MainWindow::setupTabBar())
[2025-05-15 14:00:39.230] [Debug] main - 进入应用程序主循环 (main.cpp:19, int qMain(int, char**))
[2025-05-15 14:01:13.863] [Debug] main - 应用程序退出，返回码: 0 (main.cpp:21, int qMain(int, char**))
[2025-05-16 15:22:42.190] [Debug] Logger::initialize - 日志系统已初始化 (logger.cpp:98, void Logger::initialize(bool, const QString&))
[2025-05-16 15:22:42.197] [Debug] main - 应用程序启动 (main.cpp:13, int qMain(int, char**))
[2025-05-16 15:22:42.197] [Info] main - 欢迎使用VecEdit (main.cpp:14, int qMain(int, char**))
[2025-05-16 15:22:42.204] [Debug] VectorTableItemDelegate::refreshCache - 缓存已清空，下次使用将重新从数据库加载 (vectortabledelegate.cpp:27, void VectorTableItemDelegate::refreshCache())
[2025-05-16 15:22:42.204] [Debug] MainWindow::setupTabBar() - 初始化Tab栏 (mainwindow.cpp:509, void MainWindow::setupTabBar())
[2025-05-16 15:22:42.204] [Debug] MainWindow::setupTabBar() - Tab栏初始化完成 (mainwindow.cpp:556, void MainWindow::setupTabBar())
[2025-05-16 15:22:42.302] [Debug] main - 进入应用程序主循环 (main.cpp:19, int qMain(int, char**))
[2025-05-16 15:22:50.612] [Debug] 执行SQL语句： "CREATE TABLE \"type_options\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type_name TEXT NOT NULL " ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.616] [Debug] 执行SQL语句： "CREATE TABLE timeset_list (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    timeset_name TEXT NOT NULL" ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.616] [Debug] 执行SQL语句： "CREATE TABLE wave_options (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    wave_type TEXT NOT NULL UN" ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.628] [Debug] 执行SQL语句： "CREATE TABLE \"pin_settings\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    pin_id INTEGER NOT NULL " ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.632] [Debug] 执行SQL语句： "CREATE TABLE vector_table_group_values(\n    id INTEGER PRIMARY KEY AUTOINCREMENT, \n    vector_data_i" ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.635] [Debug] 执行SQL语句： "CREATE UNIQUE INDEX idx_vector_group_unique\nON vector_table_group_values(vector_data_id, group_id);"  (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.638] [Debug] 执行SQL语句： "CREATE TABLE pin_options(\n    id INTEGER PRIMARY KEY NOT NULL, \n    pin_value TEXT\n);"  (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.642] [Debug] 执行SQL语句： "CREATE TABLE instruction_options(\n    id INTEGER PRIMARY KEY, \n    instruction_value TEXT NOT NULL U" ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.649] [Debug] 执行SQL语句： "CREATE TABLE vector_tables(\n    id INTEGER PRIMARY KEY, \n    table_name VARCHAR NOT NULL UNIQUE, \n  " ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.652] [Debug] 执行SQL语句： "CREATE TABLE pin_list(\n    id INTEGER PRIMARY KEY AUTOINCREMENT, \n    pin_name TEXT NOT NULL, \n    p" ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.655] [Debug] 执行SQL语句： "CREATE TABLE vector_table_data(\n    id INTEGER PRIMARY KEY AUTOINCREMENT, \n    table_id INTEGER NOT " ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.659] [Debug] 执行SQL语句： "CREATE TABLE timeset_settings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT, \n    timeset_id INTEGER NOT" ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.665] [Debug] 执行SQL语句： "CREATE TABLE vector_table_pin_values(\n    id INTEGER PRIMARY KEY AUTOINCREMENT, \n    vector_data_id " ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.668] [Debug] 执行SQL语句： "CREATE UNIQUE INDEX idx_vector_pin_unique\nON vector_table_pin_values(\n    vector_data_id, \n    vecto" ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.671] [Debug] 执行SQL语句： "CREATE TABLE vector_table_pins(\n    id INTEGER PRIMARY KEY AUTOINCREMENT, \n    table_id INTEGER NOT " ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.675] [Debug] 执行SQL语句： "CREATE UNIQUE INDEX idx_table_pin_unique\nON vector_table_pins(\n    table_id, \n    pin_id\n);"  (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.680] [Debug] 执行SQL语句： "CREATE TABLE pin_groups(\n    group_id INTEGER PRIMARY KEY AUTOINCREMENT, \n    table_id INTEGER NOT N" ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.680] [Debug] 执行SQL语句： "CREATE TABLE pin_group_members(\n    id INTEGER PRIMARY KEY AUTOINCREMENT, \n    group_id INTEGER NOT " ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.680] [Debug] 执行SQL语句： "CREATE UNIQUE INDEX idx_group_member_unique\nON pin_group_members(\n    group_id, \n    pin_id\n);"  (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.680] [Debug] 执行SQL语句： "CREATE VIEW view_vector_table_data_display AS\nSELECT\n    vtd.id AS vector_data_id,\n    vt.id AS tabl" ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.698] [Debug] 执行SQL语句： "CREATE VIEW view_vector_table_pins_display AS\nSELECT\n    vtp.id AS vector_pin_id,\n    vt.table_name," ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.702] [Debug] 执行SQL语句： "CREATE VIEW view_vector_table_pin_values_display AS\nSELECT\n    vtd.id AS vector_data_id,\n    vt.tabl" ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.705] [Debug] 执行SQL语句： "CREATE VIEW view_pin_groups_display AS\nSELECT\n    pg.group_id,\n    vt.table_name,\n    pg.group_name," ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.711] [Debug] 执行SQL语句： "CREATE VIEW view_pin_group_members_display AS\nSELECT\n    pg.group_name,\n    pl.pin_name,\n    pgm.sor" ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.716] [Debug] 执行SQL语句： "CREATE TABLE VectorTableMasterRecord (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,           -- 主键\n   " ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.720] [Debug] 执行SQL语句： "CREATE TABLE VectorTableColumnConfiguration (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,             " ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.735] [Debug] 执行SQL语句： "CREATE TRIGGER trigger_update_vector_table_master_record_updated_at\nAFTER UPDATE ON VectorTableMaste" ... (databasemanager.cpp:530, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-16 15:22:50.750] [Info] 数据库版本已在表中更新为: 2 (databasemanager.cpp:375, bool DatabaseManager::setCurrentDbFileVersionInTable(int))
[2025-05-16 15:22:50.752] [Info] 默认固定数据初始化成功 (databasemanager.cpp:638, bool DatabaseManager::initializeDefaultData())
[2025-05-16 15:22:50.752] [Info] 数据库已成功初始化:  "C:/Users/GIGA/Documents/TEST8.db" ， 版本:  2 (databasemanager.cpp:120, bool DatabaseManager::initializeNewDatabase(const QString&, const QString&))
[2025-05-16 15:22:50.752] [Debug] "TableStyleManager::applyTableStyle(QTableView*)"  - Entry (tablestylemanager.cpp:61, static void TableStyleManager::applyTableStyle(QTableView*))
[2025-05-16 15:22:50.752] [Debug] "TableStyleManager::applyTableStyle(QTableView*)"  - 开始设置表格视图样式 (tablestylemanager.cpp:69, static void TableStyleManager::applyTableStyle(QTableView*))
[2025-05-16 15:22:50.758] [Debug] "TableStyleManager::applyTableStyle(QTableView*)"  - 表格视图样式设置完成 (tablestylemanager.cpp:103, static void TableStyleManager::applyTableStyle(QTableView*))
[2025-05-16 15:22:55.417] [Debug] MainWindow::showTimeSetDialog - 显示TimeSet设置对话框，isNewTable: true (mainwindow.cpp:338, bool MainWindow::showTimeSetDialog(bool))
[2025-05-16 15:22:55.424] [Debug] 开始加载TimeSet列表到UI (timesetdialog.cpp:185, bool TimeSetDialog::loadExistingTimeSets())
[2025-05-16 15:22:55.424] [Debug] 开始加载TimeSet数据... (timesetdataaccess.cpp:97, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-16 15:22:55.424] [Debug] 执行SQL查询: SELECT id, timeset_name, period FROM timeset_list ORDER BY id (timesetdataaccess.cpp:106, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-16 15:22:55.424] [Debug] 查询执行成功，开始遍历结果 (timesetdataaccess.cpp:113, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-16 15:22:55.424] [Debug] 成功加载 0 个TimeSet记录 (timesetdataaccess.cpp:137, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-16 15:22:55.424] [Debug] 数据库中实际存在 0 个TimeSet记录 (timesetdataaccess.cpp:148, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-16 15:22:55.424] [Debug] 成功从数据库加载，TimeSet数量： 0 (timesetdialog.cpp:190, bool TimeSetDialog::loadExistingTimeSets())
[2025-05-16 15:22:57.146] [Debug] 添加新TimeSet: 用户输入名称 = "timeset_1" (timesetdialog.cpp:263, void TimeSetDialog::addTimeSet())
[2025-05-16 15:22:57.147] [Debug] 检查TimeSet名称是否存在: "timeset_1" (timesetdataaccess.cpp:56, bool TimeSetDataAccess::isTimeSetNameExists(const QString&))
[2025-05-16 15:22:57.147] [Debug] TimeSet名称不存在 (timesetdataaccess.cpp:74, bool TimeSetDataAccess::isTimeSetNameExists(const QString&))
[2025-05-16 15:22:57.147] [Debug] 准备保存新TimeSet到数据库: name= "timeset_1" , period= 1000 (timesetdialog.cpp:287, void TimeSetDialog::addTimeSet())
[2025-05-16 15:22:57.153] [Debug] TimeSetDataAccess::savePinSelection - 开始为 TimeSet ID: 1 保存管脚选择 (timesetdataaccess.cpp:284, bool TimeSetDataAccess::savePinSelection(int, const QList<int>&))
[2025-05-16 15:22:57.153] [Debug] TimeSetDataAccess::savePinSelection - 准备执行删除SQL: "DELETE FROM timeset_settings WHERE timeset_id = ?" with ID: 1 (timesetdataaccess.cpp:289, bool TimeSetDataAccess::savePinSelection(int, const QList<int>&))
[2025-05-16 15:22:57.153] [Debug] TimeSetDataAccess::savePinSelection - 成功删除旧关联 for TimeSet ID: 1 (timesetdataaccess.cpp:300, bool TimeSetDataAccess::savePinSelection(int, const QList<int>&))
[2025-05-16 15:22:57.153] [Debug] TimeSetDataAccess::savePinSelection - 没有需要添加的新管脚关联 for TimeSet ID: 1 (timesetdataaccess.cpp:306, bool TimeSetDataAccess::savePinSelection(int, const QList<int>&))
[2025-05-16 15:22:57.153] [Debug] 新TimeSet保存成功: id= 1 (timesetdialog.cpp:293, void TimeSetDialog::addTimeSet())
[2025-05-16 15:23:00.307] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 开始为 TimeSet ID: 1 保存边沿参数 (timesetdataaccess.cpp:352, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-16 15:23:00.307] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 准备执行删除SQL: "DELETE FROM timeset_settings WHERE timeset_id = ?" with ID: 1 (timesetdataaccess.cpp:358, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-16 15:23:00.308] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功删除旧边沿参数 for TimeSet ID: 1 (timesetdataaccess.cpp:379, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-16 15:23:00.308] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 开始添加 2 个新的边沿参数 for TimeSet ID: 1 (timesetdataaccess.cpp:390, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-16 15:23:00.316] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功添加边沿: TS ID= 1 , Pin ID= 1 (timesetdataaccess.cpp:421, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-16 15:23:00.320] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功添加边沿: TS ID= 1 , Pin ID= 2 (timesetdataaccess.cpp:421, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-16 15:23:00.320] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功完成 for TimeSet ID: 1 (timesetdataaccess.cpp:425, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-16 15:23:00.320] [Debug] TimeSetDataAccess::loadTimeSetEdges - 准备执行查询SQL: "SELECT timeset_id, pin_id, T1R, T1F, STBR, wave_id FROM timeset_settings WHERE timeset_id = ?" with ID: 1 (timesetdataaccess.cpp:196, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-16 15:23:00.320] [Debug] TimeSetDataAccess::loadTimeSetEdges - 查询成功 for TimeSet ID: 1 (timesetdataaccess.cpp:211, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-16 15:23:00.320] [Debug] TimeSetDataAccess::loadTimeSetEdges - 加载边沿: Pin ID= 1 (timesetdataaccess.cpp:222, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-16 15:23:00.320] [Debug] TimeSetDataAccess::loadTimeSetEdges - 加载边沿: Pin ID= 2 (timesetdataaccess.cpp:222, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-16 15:23:00.320] [Debug] TimeSetDataAccess::loadTimeSetEdges - 总共加载 2 个边沿 for TimeSet ID: 1 (timesetdataaccess.cpp:224, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-16 15:23:01.423] [Debug] TimeSetDialog::onAccepted - 开始处理确定按钮事件 (timesetdialog.cpp:778, void TimeSetDialog::onAccepted())
[2025-05-16 15:23:01.423] [Debug] TimeSetDialog::onAccepted - 检查待删除TimeSet列表: 0 个 (timesetdialog.cpp:785, void TimeSetDialog::onAccepted())
[2025-05-16 15:23:01.423] [Debug] TimeSetDialog::onAccepted - 没有需要删除的TimeSet (timesetdialog.cpp:874, void TimeSetDialog::onAccepted())
[2025-05-16 15:23:01.423] [Debug] TimeSetDialog::onAccepted - 开始保存所有TimeSet的名称和周期 (timesetdialog.cpp:878, void TimeSetDialog::onAccepted())
[2025-05-16 15:23:01.423] [Debug] TimeSetDialog::onAccepted - 准备更新TimeSet ID: 1  名称: "timeset_1"  周期: 1000 (timesetdialog.cpp:885, void TimeSetDialog::onAccepted())
[2025-05-16 15:23:01.428] [Debug] TimeSetDialog::onAccepted - 所有TimeSet的名称和周期已尝试保存 (timesetdialog.cpp:916, void TimeSetDialog::onAccepted())
[2025-05-16 15:23:01.428] [Debug] TimeSetDialog::onAccepted - 开始保存所有TimeSet的边沿设置 (timesetdialog.cpp:919, void TimeSetDialog::onAccepted())
[2025-05-16 15:23:01.429] [Debug] TimeSetDialog::onAccepted - 准备保存 TimeSet ID: 1 的边沿 (timesetdialog.cpp:931, void TimeSetDialog::onAccepted())
[2025-05-16 15:23:01.429] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 开始为 TimeSet ID: 1 保存边沿参数 (timesetdataaccess.cpp:352, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-16 15:23:01.429] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 准备执行删除SQL: "DELETE FROM timeset_settings WHERE timeset_id = ?" with ID: 1 (timesetdataaccess.cpp:358, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-16 15:23:01.433] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功删除旧边沿参数 for TimeSet ID: 1 (timesetdataaccess.cpp:379, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-16 15:23:01.433] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 开始添加 2 个新的边沿参数 for TimeSet ID: 1 (timesetdataaccess.cpp:390, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-16 15:23:01.436] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功添加边沿: TS ID= 1 , Pin ID= 1 (timesetdataaccess.cpp:421, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-16 15:23:01.439] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功添加边沿: TS ID= 1 , Pin ID= 2 (timesetdataaccess.cpp:421, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-16 15:23:01.440] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功完成 for TimeSet ID: 1 (timesetdataaccess.cpp:425, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-16 15:23:01.440] [Debug] TimeSetDialog::onAccepted - 成功保存 TimeSet ID: 1 的边沿 (timesetdialog.cpp:945, void TimeSetDialog::onAccepted())
[2025-05-16 15:23:01.440] [Debug] TimeSetDialog::onAccepted - 所有TimeSet的边沿设置已尝试保存 (timesetdialog.cpp:957, void TimeSetDialog::onAccepted())
[2025-05-16 15:23:01.440] [Debug] TimeSetDialog::onAccepted - 初始设置模式，跳过向量表检查 (timesetdialog.cpp:987, void TimeSetDialog::onAccepted())
[2025-05-16 15:23:01.440] [Debug] TimeSetDialog::onAccepted - 检查已配置的TimeSet数量： 1 (timesetdialog.cpp:991, void TimeSetDialog::onAccepted())
[2025-05-16 15:23:01.440] [Debug] TimeSetDialog::onAccepted - 关闭对话框并接受更改 (timesetdialog.cpp:994, void TimeSetDialog::onAccepted())
[2025-05-16 15:23:01.444] [Debug] MainWindow::showTimeSetDialog - 用户确认TimeSet设置 (mainwindow.cpp:353, bool MainWindow::showTimeSetDialog(bool))
[2025-05-16 15:23:01.445] [Debug] MainWindow::createNewProject - 检查向量表数量: 0 (mainwindow.cpp:202, void MainWindow::createNewProject())
[2025-05-16 15:23:01.445] [Debug] MainWindow::createNewProject - 未找到向量表，自动显示创建向量表对话框 (mainwindow.cpp:208, void MainWindow::createNewProject())
[2025-05-16 15:23:01.445] [Debug] "MainWindow::addNewVectorTable"  - 开始添加新向量表 (mainwindow.cpp:869, void MainWindow::addNewVectorTable())
[2025-05-16 15:23:01.445] [Debug] "MainWindow::addNewVectorTable"  - 数据库已连接 ( "C:/Users/GIGA/Documents/TEST8.db" )，准备创建向量表 (mainwindow.cpp:879, void MainWindow::addNewVectorTable())
[2025-05-16 15:23:02.803] [Debug] "MainWindow::addNewVectorTable"  - 用户输入的向量表名称: "1" (mainwindow.cpp:911, void MainWindow::addNewVectorTable())
[2025-05-16 15:23:02.809] [Debug] "MainWindow::addNewVectorTable"  - 新向量表创建成功，ID: 1 , 名称: "1" (mainwindow.cpp:943, void MainWindow::addNewVectorTable())
[2025-05-16 15:23:02.810] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 输入数据库路径: "C:/Users/GIGA/Documents/TEST8.db" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:29, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-16 15:23:02.810] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 生成的项目二进制数据目录： "C:\\Users\\GIGA\\Documents\\TEST8_vbindata" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:50, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-16 15:23:02.810] [Debug] "MainWindow::addNewVectorTable"  - 项目二进制数据目录: "C:\\Users\\GIGA\\Documents\\TEST8_vbindata" (mainwindow.cpp:954, void MainWindow::addNewVectorTable())
[2025-05-16 15:23:02.811] [Debug] "MainWindow::addNewVectorTable"  - 已创建项目二进制数据目录:  "C:\\Users\\GIGA\\Documents\\TEST8_vbindata" (mainwindow.cpp:965, void MainWindow::addNewVectorTable())
[2025-05-16 15:23:02.811] [Debug] "MainWindow::addNewVectorTable"  - 绝对二进制文件路径: "C:\\Users\\GIGA\\Documents\\TEST8_vbindata\\table_1_data.vbindata" (mainwindow.cpp:973, void MainWindow::addNewVectorTable())
[2025-05-16 15:23:02.816] [Debug] "MainWindow::addNewVectorTable"  - VectorTableMasterRecord记录创建成功 for table ID: 1 (mainwindow.cpp:996, void MainWindow::addNewVectorTable())
[2025-05-16 15:23:02.816] [Debug] "MainWindow::addDefaultColumnConfigurations"  - 开始为表ID  1  添加默认列配置 (mainwindow.cpp:2658, bool MainWindow::addDefaultColumnConfigurations(int))
[2025-05-16 15:23:02.820] [Debug] "MainWindow::addDefaultColumnConfigurations"  - 成功添加默认列配置 (mainwindow.cpp:2780, bool MainWindow::addDefaultColumnConfigurations(int))
[2025-05-16 15:23:02.820] [Debug] "MainWindow::addNewVectorTable"  - 已成功添加默认列配置 (mainwindow.cpp:1006, void MainWindow::addNewVectorTable())
[2025-05-16 15:23:02.820] [Debug] "MainWindow::addNewVectorTable"  - 准备写入文件头到: "C:\\Users\\GIGA\\Documents\\TEST8_vbindata\\table_1_data.vbindata" (mainwindow.cpp:1072, void MainWindow::addNewVectorTable())
[2025-05-16 15:23:02.820] [Debug] "BinaryFileHelper::writeBinaryHeader" - Attempting to write binary file header. (binaryfilehelper.cpp:90, static bool Persistence::BinaryFileHelper::writeBinaryHeader(QIODevice*, const BinaryFileHeader&))
[2025-05-16 15:23:02.820] [Debug] ["BinaryFileHelper::writeBinaryHeader - Successfully Written Header"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 0
  Column Count: 0
  Created: 1747380182
  Updated: 1747380182
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-16 15:23:02.820] [Debug] "BinaryFileHelper::writeBinaryHeader"  - Binary file header written successfully. (binaryfilehelper.cpp:149, static bool Persistence::BinaryFileHelper::writeBinaryHeader(QIODevice*, const BinaryFileHeader&))
[2025-05-16 15:23:02.821] [Info] "MainWindow::addNewVectorTable"  - 已成功创建空的二进制文件并写入文件头:  "C:\\Users\\GIGA\\Documents\\TEST8_vbindata\\table_1_data.vbindata" (mainwindow.cpp:1123, void MainWindow::addNewVectorTable())
[2025-05-16 15:23:02.821] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 向量表选择已更改，索引: 0 (mainwindow.cpp:644, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:02.821] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 当前表ID: 1 (mainwindow.cpp:648, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:02.821] [Debug] MainWindow::syncTabWithComboBox - 同步Tab页签与下拉框选择 (mainwindow.cpp:725, void MainWindow::syncTabWithComboBox(int))
[2025-05-16 15:23:02.821] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 表  1  当前有  6  个列配置 (mainwindow.cpp:662, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:02.821] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 开始加载表格数据，表ID: 1 (mainwindow.cpp:673, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:02.821] [Debug] "VectorDataHandler::loadVectorTableData"  - 开始加载, 表ID: 1 (vectordatahandler.cpp:337, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-16 15:23:02.821] [Debug] "VectorDataHandler::loadVectorTableMeta"  - 开始加载, 表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-16 15:23:02.821] [Warning] "VectorDataHandler::loadVectorTableMeta"  - 查询主记录失败, 表ID:  1 , 错误:  "Parameter count mismatch" (vectordatahandler.cpp:57, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-16 15:23:02.822] [Warning] "VectorDataHandler::loadVectorTableData"  - 元数据加载失败, 表ID: 1 (vectordatahandler.cpp:356, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-16 15:23:02.822] [Debug] "MainWindow::onVectorTableSelectionChanged"  - VectorDataHandler::loadVectorTableData 返回: false ，表ID: 1 ，列数: 0 (mainwindow.cpp:675, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:02.822] [Warning] "MainWindow::onVectorTableSelectionChanged"  - 表格加载失败，表ID: 1 (mainwindow.cpp:712, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:02.822] [Debug] MainWindow::addVectorTableTab - 添加向量表Tab页签: "1" (mainwindow.cpp:799, void MainWindow::addVectorTableTab(int, const QString&))
[2025-05-16 15:23:02.822] [Debug] MainWindow::showPinSelectionDialog - 开始显示管脚选择对话框 (mainwindow.cpp:1199, void MainWindow::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:07.635] [Debug] DialogManager::showPinSelectionDialog - Preparing to delete old column config for tableId: 1 (dialogmanager.cpp:200, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:07.638] [Debug] DialogManager::showPinSelectionDialog - Successfully deleted old column config. (dialogmanager.cpp:217, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:07.638] [Debug] DialogManager::showPinSelectionDialog - Preparing to delete old vector_table_pins for tableId: 1 (dialogmanager.cpp:220, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:07.638] [Debug] DialogManager::showPinSelectionDialog - Successfully deleted old vector_table_pins. (dialogmanager.cpp:237, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:07.638] [Debug] DialogManager::showPinSelectionDialog - 开始添加标准列配置 (dialogmanager.cpp:242, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:07.639] [Debug] DialogManager::showPinSelectionDialog - 已成功添加 6 个标准列配置 (dialogmanager.cpp:351, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:07.639] [Debug] DialogManager::showPinSelectionDialog - 正在处理管脚:  "A" , ID: 1 , 勾选状态: 已选择 (dialogmanager.cpp:376, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:07.639] [Debug] DialogManager::showPinSelectionDialog - 为选中的管脚添加配置:  "A" (dialogmanager.cpp:386, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:07.639] [Debug] DialogManager::showPinSelectionDialog - 成功添加管脚到 vector_table_pins:  "A" (dialogmanager.cpp:401, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:07.639] [Debug] DialogManager::showPinSelectionDialog - 成功为管脚添加列配置: "A" Props: "{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":2}" (dialogmanager.cpp:428, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:07.639] [Debug] DialogManager::showPinSelectionDialog - 正在处理管脚:  "B" , ID: 2 , 勾选状态: 已选择 (dialogmanager.cpp:376, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:07.639] [Debug] DialogManager::showPinSelectionDialog - 为选中的管脚添加配置:  "B" (dialogmanager.cpp:386, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:07.639] [Debug] DialogManager::showPinSelectionDialog - 成功添加管脚到 vector_table_pins:  "B" (dialogmanager.cpp:401, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:07.640] [Debug] DialogManager::showPinSelectionDialog - 成功为管脚添加列配置: "B" Props: "{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":3}" (dialogmanager.cpp:428, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:07.640] [Debug] DialogManager::showPinSelectionDialog - 正在处理管脚:  "C" , ID: 3 , 勾选状态: 未选择 (dialogmanager.cpp:376, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:07.640] [Debug] DialogManager::showPinSelectionDialog - 跳过未选中的管脚:  "C" (dialogmanager.cpp:433, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:09.143] [Debug] DialogManager::showVectorDataDialog - 开始保存向量行数据，表ID: 1 ，起始索引: 0 ，总行数: 1 (dialogmanager.cpp:985, DialogManager::showVectorDataDialog(int, const QString&, int)::<lambda()>)
[2025-05-16 15:23:09.143] [Debug] "VectorDataHandler::insertVectorRows" - 开始插入向量行，表ID: 1 目标行数: 1 源数据表行数: 1 TimesetID: 1 Append: true StartIndex: 0 (vectordatahandler.cpp:849, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-16 15:23:09.150] [Debug] "VectorDataHandler::loadVectorTableMeta"  - 开始加载, 表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-16 15:23:09.150] [Warning] "VectorDataHandler::loadVectorTableMeta"  - 查询主记录失败, 表ID:  1 , 错误:  "Parameter count mismatch" (vectordatahandler.cpp:57, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-16 15:23:09.150] [Warning] "VectorDataHandler::insertVectorRows" - "无法加载表 1 的元数据。" (vectordatahandler.cpp:865, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-16 15:23:11.543] [Debug] DialogManager::showVectorDataDialog - 开始保存向量行数据，表ID: 1 ，起始索引: 0 ，总行数: 1 (dialogmanager.cpp:985, DialogManager::showVectorDataDialog(int, const QString&, int)::<lambda()>)
[2025-05-16 15:23:11.543] [Debug] "VectorDataHandler::insertVectorRows" - 开始插入向量行，表ID: 1 目标行数: 1 源数据表行数: 1 TimesetID: 1 Append: true StartIndex: 0 (vectordatahandler.cpp:849, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-16 15:23:11.549] [Debug] "VectorDataHandler::loadVectorTableMeta"  - 开始加载, 表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-16 15:23:11.549] [Warning] "VectorDataHandler::loadVectorTableMeta"  - 查询主记录失败, 表ID:  1 , 错误:  "Parameter count mismatch" (vectordatahandler.cpp:57, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-16 15:23:11.549] [Warning] "VectorDataHandler::insertVectorRows" - "无法加载表 1 的元数据。" (vectordatahandler.cpp:865, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-16 15:23:14.146] [Debug] MainWindow::showPinSelectionDialog - 管脚选择对话框返回结果: true (mainwindow.cpp:1201, void MainWindow::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:14.146] [Debug] MainWindow::showPinSelectionDialog - 刷新表格显示，表ID: 1 (mainwindow.cpp:1207, void MainWindow::showPinSelectionDialog(int, const QString&))
[2025-05-16 15:23:14.146] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 向量表选择已更改，索引: 0 (mainwindow.cpp:644, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:14.146] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 当前表ID: 1 (mainwindow.cpp:648, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:14.147] [Debug] MainWindow::syncTabWithComboBox - 同步Tab页签与下拉框选择 (mainwindow.cpp:725, void MainWindow::syncTabWithComboBox(int))
[2025-05-16 15:23:14.147] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 表  1  当前有  8  个列配置 (mainwindow.cpp:662, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:14.147] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 开始加载表格数据，表ID: 1 (mainwindow.cpp:673, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:14.147] [Debug] "VectorDataHandler::loadVectorTableData"  - 开始加载, 表ID: 1 (vectordatahandler.cpp:337, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-16 15:23:14.147] [Debug] "VectorDataHandler::loadVectorTableMeta"  - 开始加载, 表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-16 15:23:14.147] [Warning] "VectorDataHandler::loadVectorTableMeta"  - 查询主记录失败, 表ID:  1 , 错误:  "Parameter count mismatch" (vectordatahandler.cpp:57, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-16 15:23:14.147] [Warning] "VectorDataHandler::loadVectorTableData"  - 元数据加载失败, 表ID: 1 (vectordatahandler.cpp:356, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-16 15:23:14.147] [Debug] "MainWindow::onVectorTableSelectionChanged"  - VectorDataHandler::loadVectorTableData 返回: false ，表ID: 1 ，列数: 0 (mainwindow.cpp:675, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:14.147] [Warning] "MainWindow::onVectorTableSelectionChanged"  - 表格加载失败，表ID: 1 (mainwindow.cpp:712, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:14.149] [Debug] MainWindow::loadVectorTable - 开始加载向量表 (mainwindow.cpp:561, void MainWindow::loadVectorTable())
[2025-05-16 15:23:14.149] [Debug] MainWindow::loadVectorTable - 数据库已打开，开始查询向量表 (mainwindow.cpp:579, void MainWindow::loadVectorTable())
[2025-05-16 15:23:14.149] [Debug] MainWindow::loadVectorTable - 刷新TimeSet选项缓存 (mainwindow.cpp:584, void MainWindow::loadVectorTable())
[2025-05-16 15:23:14.149] [Debug] VectorTableItemDelegate::refreshCache - 缓存已清空，下次使用将重新从数据库加载 (vectortabledelegate.cpp:27, void VectorTableItemDelegate::refreshCache())
[2025-05-16 15:23:14.149] [Debug] MainWindow::loadVectorTable - 向量表查询执行成功 (mainwindow.cpp:592, void MainWindow::loadVectorTable())
[2025-05-16 15:23:14.149] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 向量表选择已更改，索引: 0 (mainwindow.cpp:644, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:14.149] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 当前表ID: 1 (mainwindow.cpp:648, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:14.149] [Debug] MainWindow::syncTabWithComboBox - 同步Tab页签与下拉框选择 (mainwindow.cpp:725, void MainWindow::syncTabWithComboBox(int))
[2025-05-16 15:23:14.149] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 表  1  当前有  8  个列配置 (mainwindow.cpp:662, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:14.149] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 开始加载表格数据，表ID: 1 (mainwindow.cpp:673, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:14.149] [Debug] "VectorDataHandler::loadVectorTableData"  - 开始加载, 表ID: 1 (vectordatahandler.cpp:337, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-16 15:23:14.149] [Debug] "VectorDataHandler::loadVectorTableMeta"  - 开始加载, 表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-16 15:23:14.149] [Warning] "VectorDataHandler::loadVectorTableMeta"  - 查询主记录失败, 表ID:  1 , 错误:  "Parameter count mismatch" (vectordatahandler.cpp:57, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-16 15:23:14.149] [Warning] "VectorDataHandler::loadVectorTableData"  - 元数据加载失败, 表ID: 1 (vectordatahandler.cpp:356, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-16 15:23:14.150] [Debug] "MainWindow::onVectorTableSelectionChanged"  - VectorDataHandler::loadVectorTableData 返回: false ，表ID: 1 ，列数: 0 (mainwindow.cpp:675, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:14.150] [Warning] "MainWindow::onVectorTableSelectionChanged"  - 表格加载失败，表ID: 1 (mainwindow.cpp:712, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-16 15:23:14.150] [Debug] MainWindow::addVectorTableTab - 添加向量表Tab页签: "1" (mainwindow.cpp:799, void MainWindow::addVectorTableTab(int, const QString&))
[2025-05-16 15:23:14.150] [Debug] MainWindow::loadVectorTable - 找到向量表: "1" ID: 1 (mainwindow.cpp:606, void MainWindow::loadVectorTable())
[2025-05-16 15:23:14.150] [Debug] MainWindow::loadVectorTable - 总共找到 1 个向量表 (mainwindow.cpp:609, void MainWindow::loadVectorTable())
[2025-05-16 15:23:14.150] [Debug] MainWindow::loadVectorTable - 有向量表，显示向量表窗口 (mainwindow.cpp:619, void MainWindow::loadVectorTable())
[2025-05-16 15:31:25.673] [Debug] main - 应用程序退出，返回码: 0 (main.cpp:21, int qMain(int, char**))
[2025-05-16 15:31:25.692] [Warning] QSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.
[2025-05-16 15:31:25.692] [Info] 数据库连接已关闭 (databasemanager.cpp:268, void DatabaseManager::closeDatabase())
[2025-05-16 15:31:25.712] [Debug] VectorDataHandler::~VectorDataHandler - 析构 (vectordatahandler.cpp:517, virtual VectorDataHandler::~VectorDataHandler())
[2025-05-20 11:19:54.966] [Debug] Logger::initialize - 日志系统已初始化 (logger.cpp:98, void Logger::initialize(bool, const QString&))
[2025-05-20 11:19:54.967] [Debug] main - 应用程序启动 (main.cpp:13, int qMain(int, char**))
[2025-05-20 11:19:54.967] [Info] main - 欢迎使用VecEdit (main.cpp:14, int qMain(int, char**))
[2025-05-20 11:19:54.975] [Debug] VectorTableItemDelegate::refreshCache - 缓存已清空，下次使用将重新从数据库加载 (vectortabledelegate.cpp:27, void VectorTableItemDelegate::refreshCache())
[2025-05-20 11:19:54.976] [Debug] MainWindow::setupTabBar() - 初始化Tab栏 (mainwindow.cpp:614, void MainWindow::setupTabBar())
[2025-05-20 11:19:54.977] [Debug] MainWindow::setupTabBar() - Tab栏初始化完成 (mainwindow.cpp:661, void MainWindow::setupTabBar())
[2025-05-20 11:19:54.990] [Debug] MainWindow::updateWindowSizeInfo -  "窗口大小: 1024 x 768" (mainwindow.cpp:3158, void MainWindow::updateWindowSizeInfo())
[2025-05-20 11:19:55.011] [Debug] MainWindow::loadVectorTable - 开始加载向量表 (mainwindow.cpp:666, void MainWindow::loadVectorTable())
[2025-05-20 11:19:55.025] [Debug] MainWindow::loadVectorTable - 错误：数据库未打开 (mainwindow.cpp:679, void MainWindow::loadVectorTable())
[2025-05-20 11:19:55.030] [Debug] MainWindow::updateWindowSizeInfo -  "窗口大小: 1382 x 714" (mainwindow.cpp:3158, void MainWindow::updateWindowSizeInfo())
[2025-05-20 11:19:55.032] [Debug] MainWindow::restoreWindowState - 窗口状态已恢复 (mainwindow.cpp:3232, void MainWindow::restoreWindowState())
[2025-05-20 11:19:55.154] [Debug] MainWindow::resizeEvent - 窗口大小变化:  1382 x 714  (旧尺寸:  -1 x -1 ) (mainwindow.cpp:3120, virtual void MainWindow::resizeEvent(QResizeEvent*))
[2025-05-20 11:19:55.156] [Debug] MainWindow::updateWindowSizeInfo -  "窗口大小: 1382 x 714" (mainwindow.cpp:3158, void MainWindow::updateWindowSizeInfo())
[2025-05-20 11:19:55.224] [Debug] main - 进入应用程序主循环 (main.cpp:19, int qMain(int, char**))
[2025-05-20 11:20:16.802] [Debug] 执行SQL语句： "CREATE TABLE \"type_options\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    type_name TEXT NOT NULL " ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.821] [Debug] 执行SQL语句： "CREATE TABLE timeset_list (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    timeset_name TEXT NOT NULL" ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.825] [Debug] 执行SQL语句： "CREATE TABLE wave_options (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    wave_type TEXT NOT NULL UN" ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.835] [Debug] 执行SQL语句： "CREATE TABLE \"pin_settings\" (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    pin_id INTEGER NOT NULL " ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.839] [Debug] 执行SQL语句： "CREATE TABLE vector_table_group_values(\n    id INTEGER PRIMARY KEY AUTOINCREMENT, \n    vector_data_i" ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.847] [Debug] 执行SQL语句： "CREATE UNIQUE INDEX idx_vector_group_unique\nON vector_table_group_values(vector_data_id, group_id);"  (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.853] [Debug] 执行SQL语句： "CREATE TABLE pin_options(\n    id INTEGER PRIMARY KEY NOT NULL, \n    pin_value TEXT\n);"  (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.857] [Debug] 执行SQL语句： "CREATE TABLE instruction_options(\n    id INTEGER PRIMARY KEY, \n    instruction_value TEXT NOT NULL U" ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.864] [Debug] 执行SQL语句： "CREATE TABLE vector_tables(\n    id INTEGER PRIMARY KEY, \n    table_name VARCHAR NOT NULL UNIQUE, \n  " ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.868] [Debug] 执行SQL语句： "CREATE TABLE pin_list(\n    id INTEGER PRIMARY KEY AUTOINCREMENT, \n    pin_name TEXT NOT NULL, \n    p" ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.868] [Debug] 执行SQL语句： "CREATE TABLE vector_table_data(\n    id INTEGER PRIMARY KEY AUTOINCREMENT, \n    table_id INTEGER NOT " ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.886] [Debug] 执行SQL语句： "CREATE TABLE timeset_settings(\n    id INTEGER PRIMARY KEY AUTOINCREMENT, \n    timeset_id INTEGER NOT" ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.890] [Debug] 执行SQL语句： "CREATE TABLE vector_table_pin_values(\n    id INTEGER PRIMARY KEY AUTOINCREMENT, \n    vector_data_id " ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.896] [Debug] 执行SQL语句： "CREATE UNIQUE INDEX idx_vector_pin_unique\nON vector_table_pin_values(\n    vector_data_id, \n    vecto" ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.903] [Debug] 执行SQL语句： "CREATE TABLE vector_table_pins(\n    id INTEGER PRIMARY KEY AUTOINCREMENT, \n    table_id INTEGER NOT " ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.903] [Debug] 执行SQL语句： "CREATE UNIQUE INDEX idx_table_pin_unique\nON vector_table_pins(\n    table_id, \n    pin_id\n);"  (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.914] [Debug] 执行SQL语句： "CREATE TABLE pin_groups(\n    group_id INTEGER PRIMARY KEY AUTOINCREMENT, \n    table_id INTEGER NOT N" ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.919] [Debug] 执行SQL语句： "CREATE TABLE pin_group_members(\n    id INTEGER PRIMARY KEY AUTOINCREMENT, \n    group_id INTEGER NOT " ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.923] [Debug] 执行SQL语句： "CREATE UNIQUE INDEX idx_group_member_unique\nON pin_group_members(\n    group_id, \n    pin_id\n);"  (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.929] [Debug] 执行SQL语句： "CREATE VIEW view_vector_table_data_display AS\nSELECT\n    vtd.id AS vector_data_id,\n    vt.id AS tabl" ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.933] [Debug] 执行SQL语句： "CREATE VIEW view_vector_table_pins_display AS\nSELECT\n    vtp.id AS vector_pin_id,\n    vt.table_name," ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.938] [Debug] 执行SQL语句： "CREATE VIEW view_vector_table_pin_values_display AS\nSELECT\n    vtd.id AS vector_data_id,\n    vt.tabl" ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.945] [Debug] 执行SQL语句： "CREATE VIEW view_pin_groups_display AS\nSELECT\n    pg.group_id,\n    vt.table_name,\n    pg.group_name," ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.954] [Debug] 执行SQL语句： "CREATE VIEW view_pin_group_members_display AS\nSELECT\n    pg.group_name,\n    pl.pin_name,\n    pgm.sor" ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.959] [Debug] 执行SQL语句： "CREATE TABLE VectorTableMasterRecord (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,           -- 主键\n   " ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.966] [Debug] 执行SQL语句： "CREATE TABLE VectorTableColumnConfiguration (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,             " ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.971] [Debug] 执行SQL语句： "CREATE TRIGGER trigger_update_vector_table_master_record_updated_at\nAFTER UPDATE ON VectorTableMaste" ... (databasemanager.cpp:534, bool DatabaseManager::executeSqlScript(const QString&))
[2025-05-20 11:20:16.981] [Info] 数据库版本已在表中更新为: 3 (databasemanager.cpp:379, bool DatabaseManager::setCurrentDbFileVersionInTable(int))
[2025-05-20 11:20:16.995] [Info] 默认固定数据初始化成功 (databasemanager.cpp:642, bool DatabaseManager::initializeDefaultData())
[2025-05-20 11:20:16.997] [Info] 数据库已成功初始化:  "C:/Users/GIGA/Documents/TEST134.db" ， 版本:  3 (databasemanager.cpp:120, bool DatabaseManager::initializeNewDatabase(const QString&, const QString&))
[2025-05-20 11:20:17.000] [Debug] "TableStyleManager::applyTableStyle(QTableView*)"  - Entry (tablestylemanager.cpp:65, static void TableStyleManager::applyTableStyle(QTableView*))
[2025-05-20 11:20:17.000] [Debug] "TableStyleManager::applyTableStyle(QTableView*)"  - 开始设置表格视图样式 (tablestylemanager.cpp:73, static void TableStyleManager::applyTableStyle(QTableView*))
[2025-05-20 11:20:17.002] [Debug] "TableStyleManager::applyTableStyle(QTableView*)"  - 表格视图样式设置完成 (tablestylemanager.cpp:108, static void TableStyleManager::applyTableStyle(QTableView*))
[2025-05-20 11:20:20.570] [Debug] MainWindow::showTimeSetDialog - 显示TimeSet设置对话框，isNewTable: true (mainwindow.cpp:442, bool MainWindow::showTimeSetDialog(bool))
[2025-05-20 11:20:20.581] [Debug] 开始加载TimeSet列表到UI (timesetdialog.cpp:185, bool TimeSetDialog::loadExistingTimeSets())
[2025-05-20 11:20:20.582] [Debug] 开始加载TimeSet数据... (timesetdataaccess.cpp:97, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:20:20.583] [Debug] 执行SQL查询: SELECT id, timeset_name, period FROM timeset_list ORDER BY id (timesetdataaccess.cpp:106, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:20:20.584] [Debug] 查询执行成功，开始遍历结果 (timesetdataaccess.cpp:113, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:20:20.585] [Debug] 成功加载 0 个TimeSet记录 (timesetdataaccess.cpp:137, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:20:20.586] [Debug] 数据库中实际存在 0 个TimeSet记录 (timesetdataaccess.cpp:148, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:20:20.587] [Debug] 成功从数据库加载，TimeSet数量： 0 (timesetdialog.cpp:190, bool TimeSetDialog::loadExistingTimeSets())
[2025-05-20 11:20:22.094] [Debug] 添加新TimeSet: 用户输入名称 = "timeset_1" (timesetdialog.cpp:263, void TimeSetDialog::addTimeSet())
[2025-05-20 11:20:22.097] [Debug] 检查TimeSet名称是否存在: "timeset_1" (timesetdataaccess.cpp:56, bool TimeSetDataAccess::isTimeSetNameExists(const QString&))
[2025-05-20 11:20:22.099] [Debug] TimeSet名称不存在 (timesetdataaccess.cpp:74, bool TimeSetDataAccess::isTimeSetNameExists(const QString&))
[2025-05-20 11:20:22.100] [Debug] 准备保存新TimeSet到数据库: name= "timeset_1" , period= 1000 (timesetdialog.cpp:287, void TimeSetDialog::addTimeSet())
[2025-05-20 11:20:22.105] [Debug] TimeSetDataAccess::savePinSelection - 开始为 TimeSet ID: 1 保存管脚选择 (timesetdataaccess.cpp:284, bool TimeSetDataAccess::savePinSelection(int, const QList<int>&))
[2025-05-20 11:20:22.106] [Debug] TimeSetDataAccess::savePinSelection - 准备执行删除SQL: "DELETE FROM timeset_settings WHERE timeset_id = ?" with ID: 1 (timesetdataaccess.cpp:289, bool TimeSetDataAccess::savePinSelection(int, const QList<int>&))
[2025-05-20 11:20:22.108] [Debug] TimeSetDataAccess::savePinSelection - 成功删除旧关联 for TimeSet ID: 1 (timesetdataaccess.cpp:300, bool TimeSetDataAccess::savePinSelection(int, const QList<int>&))
[2025-05-20 11:20:22.113] [Debug] TimeSetDataAccess::savePinSelection - 没有需要添加的新管脚关联 for TimeSet ID: 1 (timesetdataaccess.cpp:306, bool TimeSetDataAccess::savePinSelection(int, const QList<int>&))
[2025-05-20 11:20:22.114] [Debug] 新TimeSet保存成功: id= 1 (timesetdialog.cpp:293, void TimeSetDialog::addTimeSet())
[2025-05-20 11:20:24.732] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 开始为 TimeSet ID: 1 保存边沿参数 (timesetdataaccess.cpp:352, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:24.733] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 准备执行删除SQL: "DELETE FROM timeset_settings WHERE timeset_id = ?" with ID: 1 (timesetdataaccess.cpp:358, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:24.733] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功删除旧边沿参数 for TimeSet ID: 1 (timesetdataaccess.cpp:379, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:24.734] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 开始添加 1 个新的边沿参数 for TimeSet ID: 1 (timesetdataaccess.cpp:390, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:24.741] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功添加边沿: TS ID= 1 , Pin ID= 1 (timesetdataaccess.cpp:421, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:24.742] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功完成 for TimeSet ID: 1 (timesetdataaccess.cpp:425, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:24.743] [Debug] TimeSetDataAccess::loadTimeSetEdges - 准备执行查询SQL: "SELECT timeset_id, pin_id, T1R, T1F, STBR, wave_id FROM timeset_settings WHERE timeset_id = ?" with ID: 1 (timesetdataaccess.cpp:196, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:24.747] [Debug] TimeSetDataAccess::loadTimeSetEdges - 查询成功 for TimeSet ID: 1 (timesetdataaccess.cpp:211, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:24.749] [Debug] TimeSetDataAccess::loadTimeSetEdges - 加载边沿: Pin ID= 1 (timesetdataaccess.cpp:222, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:24.750] [Debug] TimeSetDataAccess::loadTimeSetEdges - 总共加载 1 个边沿 for TimeSet ID: 1 (timesetdataaccess.cpp:224, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:26.277] [Debug] 添加新TimeSet: 用户输入名称 = "timeset_2" (timesetdialog.cpp:263, void TimeSetDialog::addTimeSet())
[2025-05-20 11:20:26.280] [Debug] 检查TimeSet名称是否存在: "timeset_2" (timesetdataaccess.cpp:56, bool TimeSetDataAccess::isTimeSetNameExists(const QString&))
[2025-05-20 11:20:26.281] [Debug] TimeSet名称不存在 (timesetdataaccess.cpp:74, bool TimeSetDataAccess::isTimeSetNameExists(const QString&))
[2025-05-20 11:20:26.282] [Debug] 准备保存新TimeSet到数据库: name= "timeset_2" , period= 1000 (timesetdialog.cpp:287, void TimeSetDialog::addTimeSet())
[2025-05-20 11:20:26.289] [Debug] TimeSetDataAccess::savePinSelection - 开始为 TimeSet ID: 2 保存管脚选择 (timesetdataaccess.cpp:284, bool TimeSetDataAccess::savePinSelection(int, const QList<int>&))
[2025-05-20 11:20:26.290] [Debug] TimeSetDataAccess::savePinSelection - 准备执行删除SQL: "DELETE FROM timeset_settings WHERE timeset_id = ?" with ID: 2 (timesetdataaccess.cpp:289, bool TimeSetDataAccess::savePinSelection(int, const QList<int>&))
[2025-05-20 11:20:26.292] [Debug] TimeSetDataAccess::savePinSelection - 成功删除旧关联 for TimeSet ID: 2 (timesetdataaccess.cpp:300, bool TimeSetDataAccess::savePinSelection(int, const QList<int>&))
[2025-05-20 11:20:26.296] [Debug] TimeSetDataAccess::savePinSelection - 没有需要添加的新管脚关联 for TimeSet ID: 2 (timesetdataaccess.cpp:306, bool TimeSetDataAccess::savePinSelection(int, const QList<int>&))
[2025-05-20 11:20:26.297] [Debug] 新TimeSet保存成功: id= 2 (timesetdialog.cpp:293, void TimeSetDialog::addTimeSet())
[2025-05-20 11:20:29.140] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 开始为 TimeSet ID: 2 保存边沿参数 (timesetdataaccess.cpp:352, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:29.142] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 准备执行删除SQL: "DELETE FROM timeset_settings WHERE timeset_id = ?" with ID: 2 (timesetdataaccess.cpp:358, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:29.144] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功删除旧边沿参数 for TimeSet ID: 2 (timesetdataaccess.cpp:379, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:29.147] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 开始添加 1 个新的边沿参数 for TimeSet ID: 2 (timesetdataaccess.cpp:390, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:29.154] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功添加边沿: TS ID= 2 , Pin ID= 2 (timesetdataaccess.cpp:421, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:29.155] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功完成 for TimeSet ID: 2 (timesetdataaccess.cpp:425, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:29.158] [Debug] TimeSetDataAccess::loadTimeSetEdges - 准备执行查询SQL: "SELECT timeset_id, pin_id, T1R, T1F, STBR, wave_id FROM timeset_settings WHERE timeset_id = ?" with ID: 2 (timesetdataaccess.cpp:196, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:29.161] [Debug] TimeSetDataAccess::loadTimeSetEdges - 查询成功 for TimeSet ID: 2 (timesetdataaccess.cpp:211, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:29.162] [Debug] TimeSetDataAccess::loadTimeSetEdges - 加载边沿: Pin ID= 2 (timesetdataaccess.cpp:222, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:29.163] [Debug] TimeSetDataAccess::loadTimeSetEdges - 总共加载 1 个边沿 for TimeSet ID: 2 (timesetdataaccess.cpp:224, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:30.635] [Debug] 添加新TimeSet: 用户输入名称 = "timeset_3" (timesetdialog.cpp:263, void TimeSetDialog::addTimeSet())
[2025-05-20 11:20:30.636] [Debug] 检查TimeSet名称是否存在: "timeset_3" (timesetdataaccess.cpp:56, bool TimeSetDataAccess::isTimeSetNameExists(const QString&))
[2025-05-20 11:20:30.637] [Debug] TimeSet名称不存在 (timesetdataaccess.cpp:74, bool TimeSetDataAccess::isTimeSetNameExists(const QString&))
[2025-05-20 11:20:30.638] [Debug] 准备保存新TimeSet到数据库: name= "timeset_3" , period= 1000 (timesetdialog.cpp:287, void TimeSetDialog::addTimeSet())
[2025-05-20 11:20:30.656] [Debug] TimeSetDataAccess::savePinSelection - 开始为 TimeSet ID: 3 保存管脚选择 (timesetdataaccess.cpp:284, bool TimeSetDataAccess::savePinSelection(int, const QList<int>&))
[2025-05-20 11:20:30.658] [Debug] TimeSetDataAccess::savePinSelection - 准备执行删除SQL: "DELETE FROM timeset_settings WHERE timeset_id = ?" with ID: 3 (timesetdataaccess.cpp:289, bool TimeSetDataAccess::savePinSelection(int, const QList<int>&))
[2025-05-20 11:20:30.661] [Debug] TimeSetDataAccess::savePinSelection - 成功删除旧关联 for TimeSet ID: 3 (timesetdataaccess.cpp:300, bool TimeSetDataAccess::savePinSelection(int, const QList<int>&))
[2025-05-20 11:20:30.661] [Debug] TimeSetDataAccess::savePinSelection - 没有需要添加的新管脚关联 for TimeSet ID: 3 (timesetdataaccess.cpp:306, bool TimeSetDataAccess::savePinSelection(int, const QList<int>&))
[2025-05-20 11:20:30.662] [Debug] 新TimeSet保存成功: id= 3 (timesetdialog.cpp:293, void TimeSetDialog::addTimeSet())
[2025-05-20 11:20:33.779] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 开始为 TimeSet ID: 3 保存边沿参数 (timesetdataaccess.cpp:352, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:33.780] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 准备执行删除SQL: "DELETE FROM timeset_settings WHERE timeset_id = ?" with ID: 3 (timesetdataaccess.cpp:358, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:33.781] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功删除旧边沿参数 for TimeSet ID: 3 (timesetdataaccess.cpp:379, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:33.781] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 开始添加 1 个新的边沿参数 for TimeSet ID: 3 (timesetdataaccess.cpp:390, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:33.786] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功添加边沿: TS ID= 3 , Pin ID= 3 (timesetdataaccess.cpp:421, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:33.787] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功完成 for TimeSet ID: 3 (timesetdataaccess.cpp:425, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:33.787] [Debug] TimeSetDataAccess::loadTimeSetEdges - 准备执行查询SQL: "SELECT timeset_id, pin_id, T1R, T1F, STBR, wave_id FROM timeset_settings WHERE timeset_id = ?" with ID: 3 (timesetdataaccess.cpp:196, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:33.788] [Debug] TimeSetDataAccess::loadTimeSetEdges - 查询成功 for TimeSet ID: 3 (timesetdataaccess.cpp:211, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:33.792] [Debug] TimeSetDataAccess::loadTimeSetEdges - 加载边沿: Pin ID= 3 (timesetdataaccess.cpp:222, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:33.795] [Debug] TimeSetDataAccess::loadTimeSetEdges - 总共加载 1 个边沿 for TimeSet ID: 3 (timesetdataaccess.cpp:224, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:35.264] [Debug] TimeSetDialog::onAccepted - 开始处理确定按钮事件 (timesetdialog.cpp:778, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.265] [Debug] TimeSetDialog::onAccepted - 检查待删除TimeSet列表: 0 个 (timesetdialog.cpp:785, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.265] [Debug] TimeSetDialog::onAccepted - 没有需要删除的TimeSet (timesetdialog.cpp:874, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.266] [Debug] TimeSetDialog::onAccepted - 开始保存所有TimeSet的名称和周期 (timesetdialog.cpp:878, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.266] [Debug] TimeSetDialog::onAccepted - 准备更新TimeSet ID: 1  名称: "timeset_1"  周期: 1000 (timesetdialog.cpp:885, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.292] [Debug] TimeSetDialog::onAccepted - 准备更新TimeSet ID: 2  名称: "timeset_2"  周期: 1000 (timesetdialog.cpp:885, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.310] [Debug] TimeSetDialog::onAccepted - 准备更新TimeSet ID: 3  名称: "timeset_3"  周期: 1000 (timesetdialog.cpp:885, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.356] [Debug] TimeSetDialog::onAccepted - 所有TimeSet的名称和周期已尝试保存 (timesetdialog.cpp:916, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.360] [Debug] TimeSetDialog::onAccepted - 开始保存所有TimeSet的边沿设置 (timesetdialog.cpp:919, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.361] [Debug] TimeSetDialog::onAccepted - 准备保存 TimeSet ID: 1 的边沿 (timesetdialog.cpp:931, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.362] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 开始为 TimeSet ID: 1 保存边沿参数 (timesetdataaccess.cpp:352, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.363] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 准备执行删除SQL: "DELETE FROM timeset_settings WHERE timeset_id = ?" with ID: 1 (timesetdataaccess.cpp:358, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.396] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功删除旧边沿参数 for TimeSet ID: 1 (timesetdataaccess.cpp:379, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.397] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 开始添加 1 个新的边沿参数 for TimeSet ID: 1 (timesetdataaccess.cpp:390, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.417] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功添加边沿: TS ID= 1 , Pin ID= 1 (timesetdataaccess.cpp:421, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.418] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功完成 for TimeSet ID: 1 (timesetdataaccess.cpp:425, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.419] [Debug] TimeSetDialog::onAccepted - 成功保存 TimeSet ID: 1 的边沿 (timesetdialog.cpp:945, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.420] [Debug] TimeSetDialog::onAccepted - 准备保存 TimeSet ID: 2 的边沿 (timesetdialog.cpp:931, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.421] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 开始为 TimeSet ID: 2 保存边沿参数 (timesetdataaccess.cpp:352, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.421] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 准备执行删除SQL: "DELETE FROM timeset_settings WHERE timeset_id = ?" with ID: 2 (timesetdataaccess.cpp:358, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.444] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功删除旧边沿参数 for TimeSet ID: 2 (timesetdataaccess.cpp:379, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.445] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 开始添加 1 个新的边沿参数 for TimeSet ID: 2 (timesetdataaccess.cpp:390, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.465] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功添加边沿: TS ID= 2 , Pin ID= 2 (timesetdataaccess.cpp:421, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.466] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功完成 for TimeSet ID: 2 (timesetdataaccess.cpp:425, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.467] [Debug] TimeSetDialog::onAccepted - 成功保存 TimeSet ID: 2 的边沿 (timesetdialog.cpp:945, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.468] [Debug] TimeSetDialog::onAccepted - 准备保存 TimeSet ID: 3 的边沿 (timesetdialog.cpp:931, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.468] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 开始为 TimeSet ID: 3 保存边沿参数 (timesetdataaccess.cpp:352, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.469] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 准备执行删除SQL: "DELETE FROM timeset_settings WHERE timeset_id = ?" with ID: 3 (timesetdataaccess.cpp:358, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.484] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功删除旧边沿参数 for TimeSet ID: 3 (timesetdataaccess.cpp:379, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.485] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 开始添加 1 个新的边沿参数 for TimeSet ID: 3 (timesetdataaccess.cpp:390, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.500] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功添加边沿: TS ID= 3 , Pin ID= 3 (timesetdataaccess.cpp:421, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.502] [Debug] TimeSetDataAccess::saveTimeSetEdgesToDatabase - 成功完成 for TimeSet ID: 3 (timesetdataaccess.cpp:425, bool TimeSetDataAccess::saveTimeSetEdgesToDatabase(int, const QList<TimeSetEdgeData>&))
[2025-05-20 11:20:35.503] [Debug] TimeSetDialog::onAccepted - 成功保存 TimeSet ID: 3 的边沿 (timesetdialog.cpp:945, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.503] [Debug] TimeSetDialog::onAccepted - 所有TimeSet的边沿设置已尝试保存 (timesetdialog.cpp:957, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.503] [Debug] TimeSetDialog::onAccepted - 初始设置模式，跳过向量表检查 (timesetdialog.cpp:987, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.504] [Debug] TimeSetDialog::onAccepted - 检查已配置的TimeSet数量： 3 (timesetdialog.cpp:991, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.504] [Debug] TimeSetDialog::onAccepted - 关闭对话框并接受更改 (timesetdialog.cpp:994, void TimeSetDialog::onAccepted())
[2025-05-20 11:20:35.513] [Debug] MainWindow::showTimeSetDialog - 用户确认TimeSet设置 (mainwindow.cpp:457, bool MainWindow::showTimeSetDialog(bool))
[2025-05-20 11:20:35.516] [Debug] MainWindow::createNewProject - 检查向量表数量: 0 (mainwindow.cpp:306, void MainWindow::createNewProject())
[2025-05-20 11:20:35.517] [Debug] MainWindow::createNewProject - 未找到向量表，自动显示创建向量表对话框 (mainwindow.cpp:312, void MainWindow::createNewProject())
[2025-05-20 11:20:35.517] [Debug] "MainWindow::addNewVectorTable"  - 开始添加新向量表 (mainwindow.cpp:1005, void MainWindow::addNewVectorTable())
[2025-05-20 11:20:35.519] [Debug] "MainWindow::addNewVectorTable"  - 数据库已连接 ( "C:/Users/GIGA/Documents/TEST134.db" )，准备创建向量表 (mainwindow.cpp:1015, void MainWindow::addNewVectorTable())
[2025-05-20 11:20:36.747] [Debug] "MainWindow::addNewVectorTable"  - 用户输入的向量表名称: "1" (mainwindow.cpp:1047, void MainWindow::addNewVectorTable())
[2025-05-20 11:20:36.753] [Debug] "MainWindow::addNewVectorTable"  - 新向量表创建成功，ID: 1 , 名称: "1" (mainwindow.cpp:1079, void MainWindow::addNewVectorTable())
[2025-05-20 11:20:36.754] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 输入数据库路径: "C:/Users/GIGA/Documents/TEST134.db" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:29, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:20:36.757] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 生成的项目二进制数据目录： "C:\\Users\\GIGA\\Documents\\TEST134_vbindata" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:50, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:20:36.758] [Debug] "MainWindow::addNewVectorTable"  - 项目二进制数据目录: "C:\\Users\\GIGA\\Documents\\TEST134_vbindata" (mainwindow.cpp:1090, void MainWindow::addNewVectorTable())
[2025-05-20 11:20:36.761] [Debug] "MainWindow::addNewVectorTable"  - 已创建项目二进制数据目录:  "C:\\Users\\GIGA\\Documents\\TEST134_vbindata" (mainwindow.cpp:1101, void MainWindow::addNewVectorTable())
[2025-05-20 11:20:36.762] [Debug] "MainWindow::addNewVectorTable"  - 绝对二进制文件路径: "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata" (mainwindow.cpp:1109, void MainWindow::addNewVectorTable())
[2025-05-20 11:20:36.768] [Debug] "MainWindow::addNewVectorTable"  - VectorTableMasterRecord记录创建成功 for table ID: 1 (mainwindow.cpp:1132, void MainWindow::addNewVectorTable())
[2025-05-20 11:20:36.769] [Debug] "MainWindow::addDefaultColumnConfigurations"  - 开始为表ID  1  添加默认列配置 (mainwindow.cpp:2788, bool MainWindow::addDefaultColumnConfigurations(int))
[2025-05-20 11:20:36.775] [Debug] "MainWindow::addDefaultColumnConfigurations"  - 成功添加默认列配置 (mainwindow.cpp:2910, bool MainWindow::addDefaultColumnConfigurations(int))
[2025-05-20 11:20:36.776] [Debug] "MainWindow::addNewVectorTable"  - 已成功添加默认列配置 (mainwindow.cpp:1142, void MainWindow::addNewVectorTable())
[2025-05-20 11:20:36.778] [Debug] "MainWindow::addNewVectorTable"  - 准备写入文件头到: "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata" (mainwindow.cpp:1208, void MainWindow::addNewVectorTable())
[2025-05-20 11:20:36.779] [Debug] "BinaryFileHelper::writeBinaryHeader" - Attempting to write binary file header. (binaryfilehelper.cpp:90, static bool Persistence::BinaryFileHelper::writeBinaryHeader(QIODevice*, const BinaryFileHeader&))
[2025-05-20 11:20:36.780] [Debug] ["BinaryFileHelper::writeBinaryHeader - Successfully Written Header"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 0
  Column Count: 0
  Created: 1747711236
  Updated: 1747711236
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:20:36.782] [Debug] "BinaryFileHelper::writeBinaryHeader"  - Binary file header written successfully. (binaryfilehelper.cpp:149, static bool Persistence::BinaryFileHelper::writeBinaryHeader(QIODevice*, const BinaryFileHeader&))
[2025-05-20 11:20:36.783] [Info] "MainWindow::addNewVectorTable"  - 已成功创建空的二进制文件并写入文件头:  "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata" (mainwindow.cpp:1259, void MainWindow::addNewVectorTable())
[2025-05-20 11:20:36.785] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 向量表选择已更改，索引: 0 (mainwindow.cpp:749, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:36.786] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 当前表ID: 1 (mainwindow.cpp:753, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:36.787] [Debug] MainWindow::syncTabWithComboBox - 同步Tab页签与下拉框选择 (mainwindow.cpp:845, void MainWindow::syncTabWithComboBox(int))
[2025-05-20 11:20:36.787] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 表  1  当前有  6  个列配置 (mainwindow.cpp:767, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:36.788] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 开始加载表格数据，表ID: 1 (mainwindow.cpp:778, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:36.791] [Debug] "VectorDataHandler::loadVectorTableData"  - 开始加载, 表ID: 1 (vectordatahandler.cpp:287, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.793] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:36.793] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 0 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:36.794] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:36.796] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 1
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:36.798] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:36.799] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 2
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:36.800] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:36.802] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 3
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:36.803] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:36.805] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 4
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 6 (Original: "BOOLEAN")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:36.814] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"EXT"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:36.816] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 5
  VectorTableID: 1
  Name: "EXT"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:36.818] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:36.819] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 6
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:36.821] [Debug] "VectorDataHandler::loadVectorTableData"  - 元数据加载成功, 列数: 6 , DB记录行数: 0 (vectordatahandler.cpp:312, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.823] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 开始解析表ID的二进制文件路径: 1 (vectordatahandler.cpp:207, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:20:36.826] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:36.828] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 0 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:36.829] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:36.829] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 1
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:36.831] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:36.832] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 2
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:36.833] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:36.835] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 3
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:36.837] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:36.838] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 4
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 6 (Original: "BOOLEAN")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:36.840] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"EXT"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:36.840] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 5
  VectorTableID: 1
  Name: "EXT"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:36.844] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:36.845] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 6
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:36.847] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 输入数据库路径: "C:/Users/GIGA/Documents/TEST134.db" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:29, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:20:36.848] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 生成的项目二进制数据目录： "C:\\Users\\GIGA\\Documents\\TEST134_vbindata" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:50, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:20:36.849] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 解析得到的绝对路径:  "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata"  (DB:  "C:/Users/GIGA/Documents/TEST134.db" , File:  "table_1_data.vbindata" ) (vectordatahandler.cpp:276, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:20:36.850] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 0  -> 可见索引 0 , 列名: "Label" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.851] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 1  -> 可见索引 1 , 列名: "Instruction" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.852] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 2  -> 可见索引 2 , 列名: "TimeSet" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.852] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 3  -> 可见索引 3 , 列名: "Capture" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.853] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 4  -> 可见索引 4 , 列名: "EXT" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.853] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 5  -> 可见索引 5 , 列名: "Comment" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.854] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Entry. File path: "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata" DB Schema Version: 1 Num Columns Expected: 6 (binaryfilehelper.cpp:430, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:36.863] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Attempting to open file for reading. (binaryfilehelper.cpp:434, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:36.864] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - File opened successfully. (binaryfilehelper.cpp:440, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:36.865] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Attempting to read binary header. (binaryfilehelper.cpp:443, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:36.866] [Debug] "BinaryFileHelper::readBinaryHeader" - Attempting to read binary file header. (binaryfilehelper.cpp:22, static bool Persistence::BinaryFileHelper::readBinaryHeader(QIODevice*, BinaryFileHeader&))
[2025-05-20 11:20:36.867] [Debug] ["BinaryFileHelper::readBinaryHeader - Successfully Read Header"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 0
  Column Count: 0
  Created: 1747711236
  Updated: 1747711236
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:20:36.868] [Debug] "BinaryFileHelper::readBinaryHeader"  - Binary file header read and validated successfully. (binaryfilehelper.cpp:83, static bool Persistence::BinaryFileHelper::readBinaryHeader(QIODevice*, BinaryFileHeader&))
[2025-05-20 11:20:36.868] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Binary header read successfully. Details: (binaryfilehelper.cpp:450, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:36.869] [Debug] ["BinaryFileHelper::readAllRowsFromBinary"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 0
  Column Count: 0
  Created: 1747711236
  Updated: 1747711236
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:20:36.869] [Warning] "BinaryFileHelper::readAllRowsFromBinary" - Warning: Header column count ( 0 ) differs from expected column count based on DB schema ( 6 ). (binaryfilehelper.cpp:473, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:36.870] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Header indicates 0 rows in the file. No data to read. (binaryfilehelper.cpp:482, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:36.871] [Debug] "VectorDataHandler::loadVectorTableData"  - 从二进制文件加载了  0  行, 原始列数: 6 , 可见列数: 6 (vectordatahandler.cpp:415, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.877] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表格列数: 6 (vectordatahandler.cpp:430, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.878] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Label" ，索引: 0 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.880] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Instruction" ，索引: 1 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.880] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "TimeSet" ，索引: 2 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.881] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Capture" ，索引: 3 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.881] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "EXT" ，索引: 4 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.882] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Comment" ，索引: 5 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.882] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头完成，列数: 6 ，列表: "Label, Instruction, TimeSet, Capture, EXT, Comment" (vectordatahandler.cpp:469, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.883] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 0 , "Label" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.883] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 1 , "Instruction" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.884] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 2 , "TimeSet" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.885] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 3 , "Capture" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.885] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 4 , "EXT" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.885] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 5 , "Comment" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.886] [Debug] "VectorDataHandler::loadVectorTableData"  - 准备填充  0  行到 QTableWidget (vectordatahandler.cpp:492, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.886] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 1  -> 索引= 0 , 名称= "Label" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.887] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 2  -> 索引= 1 , 名称= "Instruction" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.887] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 3  -> 索引= 2 , 名称= "TimeSet" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.887] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 4  -> 索引= 3 , 名称= "Capture" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.888] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 5  -> 索引= 4 , 名称= "EXT" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.895] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 6  -> 索引= 5 , 名称= "Comment" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.896] [Debug] "VectorDataHandler::loadVectorTableData"  - 表格填充完成, 总行数: 0 , 总列数: 6 (vectordatahandler.cpp:681, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:36.897] [Debug] "MainWindow::onVectorTableSelectionChanged"  - VectorDataHandler::loadVectorTableData 返回: true ，表ID: 1 ，列数: 6 (mainwindow.cpp:780, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:36.897] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 表格加载成功，列数: 6 (mainwindow.cpp:786, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:36.898] [Debug] "TableStyleManager::applyTableStyle(QTableWidget*)"  - Entry (tablestylemanager.cpp:10, static void TableStyleManager::applyTableStyle(QTableWidget*))
[2025-05-20 11:20:36.899] [Debug] "TableStyleManager::applyTableStyle(QTableWidget*)"  - 开始设置表格样式 (tablestylemanager.cpp:18, static void TableStyleManager::applyTableStyle(QTableWidget*))
[2025-05-20 11:20:36.901] [Debug] TableStyleManager::setRowHeight - 设置表格行高为 28 像素 (tablestylemanager.cpp:218, static void TableStyleManager::setRowHeight(QTableWidget*, int))
[2025-05-20 11:20:36.902] [Debug] TableStyleManager::setColumnAlignments - 开始设置表格列对齐方式 (tablestylemanager.cpp:119, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:20:36.902] [Debug] TableStyleManager::setColumnAlignment - 设置列 0 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:36.903] [Debug] TableStyleManager::setColumnAlignment - 设置列 1 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:36.903] [Debug] TableStyleManager::setColumnAlignment - 设置列 2 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:36.904] [Debug] TableStyleManager::setColumnAlignment - 设置列 3 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:36.904] [Debug] TableStyleManager::setColumnAlignment - 设置列 4 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:36.913] [Debug] TableStyleManager::setColumnAlignment - 设置列 5 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:36.914] [Debug] TableStyleManager::setColumnAlignments - 列对齐方式设置完成 (tablestylemanager.cpp:179, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:20:36.915] [Debug] "TableStyleManager::setPinColumnWidths"  - 开始设置管脚列的列宽 (tablestylemanager.cpp:259, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:36.915] [Debug] "TableStyleManager::setPinColumnWidths"  - 无需调整管脚列宽度，列数不足： 6 (tablestylemanager.cpp:294, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:36.915] [Debug] TableStyleManager::refreshTable - 刷新表格显示 (tablestylemanager.cpp:238, static void TableStyleManager::refreshTable(QTableWidget*))
[2025-05-20 11:20:36.916] [Debug] "TableStyleManager::applyTableStyle(QTableWidget*)"  - 表格样式设置完成 (tablestylemanager.cpp:59, static void TableStyleManager::applyTableStyle(QTableWidget*))
[2025-05-20 11:20:36.916] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 表头列表: "Label, Instruction, TimeSet, Capture, EXT, Comment" (mainwindow.cpp:826, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:36.917] [Debug] MainWindow::addVectorTableTab - 添加向量表Tab页签: "1" (mainwindow.cpp:935, void MainWindow::addVectorTableTab(int, const QString&))
[2025-05-20 11:20:36.918] [Debug] MainWindow::showPinSelectionDialog - 开始显示管脚选择对话框 (mainwindow.cpp:1335, void MainWindow::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:36.934] [Debug] "TableStyleManager::setPinColumnWidths"  - 开始设置管脚列的列宽 (tablestylemanager.cpp:259, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:36.935] [Debug] "TableStyleManager::setPinColumnWidths"  - 无需调整管脚列宽度，列数不足： 6 (tablestylemanager.cpp:294, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:36.936] [Debug] MainWindow - 再次确保表头项居中对齐: 0 , "Label" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:36.937] [Debug] MainWindow - 再次确保表头项居中对齐: 1 , "Instruction" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:36.937] [Debug] MainWindow - 再次确保表头项居中对齐: 2 , "TimeSet" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:36.940] [Debug] MainWindow - 再次确保表头项居中对齐: 3 , "Capture" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:36.944] [Debug] MainWindow - 再次确保表头项居中对齐: 4 , "EXT" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:36.947] [Debug] MainWindow - 再次确保表头项居中对齐: 5 , "Comment" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:41.189] [Debug] DialogManager::showPinSelectionDialog - Preparing to delete old column config for tableId: 1 (dialogmanager.cpp:200, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.189] [Debug] DialogManager::showPinSelectionDialog - Successfully deleted old column config. (dialogmanager.cpp:217, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.189] [Debug] DialogManager::showPinSelectionDialog - Preparing to delete old vector_table_pins for tableId: 1 (dialogmanager.cpp:220, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.189] [Debug] DialogManager::showPinSelectionDialog - Successfully deleted old vector_table_pins. (dialogmanager.cpp:237, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.189] [Debug] DialogManager::showPinSelectionDialog - 开始添加标准列配置 (dialogmanager.cpp:242, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.189] [Debug] DialogManager::showPinSelectionDialog - 已成功添加 6 个标准列配置 (dialogmanager.cpp:351, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.202] [Debug] DialogManager::showPinSelectionDialog - 正在处理管脚:  "A" , ID: 1 , 勾选状态: 已选择 (dialogmanager.cpp:376, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.202] [Debug] DialogManager::showPinSelectionDialog - 为选中的管脚添加配置:  "A" (dialogmanager.cpp:386, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.203] [Debug] DialogManager::showPinSelectionDialog - 成功添加管脚到 vector_table_pins:  "A" (dialogmanager.cpp:401, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.203] [Debug] DialogManager::showPinSelectionDialog - 成功为管脚添加列配置: "A" Props: "{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":3}" (dialogmanager.cpp:428, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.204] [Debug] DialogManager::showPinSelectionDialog - 正在处理管脚:  "B" , ID: 2 , 勾选状态: 已选择 (dialogmanager.cpp:376, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.206] [Debug] DialogManager::showPinSelectionDialog - 为选中的管脚添加配置:  "B" (dialogmanager.cpp:386, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.207] [Debug] DialogManager::showPinSelectionDialog - 成功添加管脚到 vector_table_pins:  "B" (dialogmanager.cpp:401, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.209] [Debug] DialogManager::showPinSelectionDialog - 成功为管脚添加列配置: "B" Props: "{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":1}" (dialogmanager.cpp:428, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.211] [Debug] DialogManager::showPinSelectionDialog - 正在处理管脚:  "C" , ID: 3 , 勾选状态: 已选择 (dialogmanager.cpp:376, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.213] [Debug] DialogManager::showPinSelectionDialog - 为选中的管脚添加配置:  "C" (dialogmanager.cpp:386, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.214] [Debug] DialogManager::showPinSelectionDialog - 成功添加管脚到 vector_table_pins:  "C" (dialogmanager.cpp:401, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.215] [Debug] DialogManager::showPinSelectionDialog - 成功为管脚添加列配置: "C" Props: "{\"channel_count\":1,\"pin_list_id\":3,\"type_id\":1}" (dialogmanager.cpp:428, bool DialogManager::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:41.862] [Debug] "VectorDataHandler::getVectorTableRowCount"  - 获取表ID为 1 的行数 (vectordatahandler.cpp:1297, int VectorDataHandler::getVectorTableRowCount(int))
[2025-05-20 11:20:41.862] [Debug] "VectorDataHandler::getVectorTableRowCount"  - 从元数据获取的行数: 0 (vectordatahandler.cpp:1314, int VectorDataHandler::getVectorTableRowCount(int))
[2025-05-20 11:20:41.863] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.863] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 0 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.864] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.864] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 7
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.865] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.866] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 8
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.867] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.868] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 9
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.869] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.869] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 10
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.870] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Ext"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.871] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 11
  VectorTableID: 1
  Name: "Ext"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.874] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.877] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 12
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.879] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"A"', Input: '"{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":3}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.880] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 13
  VectorTableID: 1
  Name: "A"
  Order: 6
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":1,"type_id":3}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.882] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"B"', Input: '"{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.882] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 14
  VectorTableID: 1
  Name: "B"
  Order: 7
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":2,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.885] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"C"', Input: '"{\"channel_count\":1,\"pin_list_id\":3,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.886] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 15
  VectorTableID: 1
  Name: "C"
  Order: 8
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":3,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.887] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 开始解析表ID的二进制文件路径: 1 (vectordatahandler.cpp:207, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:20:41.891] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.892] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 0 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.893] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.894] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 7
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.895] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.896] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 8
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.897] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.898] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 9
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.899] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.901] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 10
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.903] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Ext"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.904] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 11
  VectorTableID: 1
  Name: "Ext"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.907] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.908] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 12
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.910] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"A"', Input: '"{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":3}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.911] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 13
  VectorTableID: 1
  Name: "A"
  Order: 6
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":1,"type_id":3}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.913] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"B"', Input: '"{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.914] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 14
  VectorTableID: 1
  Name: "B"
  Order: 7
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":2,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.916] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"C"', Input: '"{\"channel_count\":1,\"pin_list_id\":3,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:41.916] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 15
  VectorTableID: 1
  Name: "C"
  Order: 8
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":3,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:41.918] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 输入数据库路径: "C:/Users/GIGA/Documents/TEST134.db" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:29, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:20:41.918] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 生成的项目二进制数据目录： "C:\\Users\\GIGA\\Documents\\TEST134_vbindata" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:50, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:20:41.919] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 解析得到的绝对路径:  "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata"  (DB:  "C:/Users/GIGA/Documents/TEST134.db" , File:  "table_1_data.vbindata" ) (vectordatahandler.cpp:276, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:20:41.927] [Debug] "BinaryFileHelper::readBinaryHeader" - Attempting to read binary file header. (binaryfilehelper.cpp:22, static bool Persistence::BinaryFileHelper::readBinaryHeader(QIODevice*, BinaryFileHeader&))
[2025-05-20 11:20:41.929] [Debug] ["BinaryFileHelper::readBinaryHeader - Successfully Read Header"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 0
  Column Count: 0
  Created: 1747711236
  Updated: 1747711236
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:20:41.930] [Debug] "BinaryFileHelper::readBinaryHeader"  - Binary file header read and validated successfully. (binaryfilehelper.cpp:83, static bool Persistence::BinaryFileHelper::readBinaryHeader(QIODevice*, BinaryFileHeader&))
[2025-05-20 11:20:41.931] [Debug] "VectorDataHandler::getVectorTableRowCount"  - 从二进制文件头获取的行数: 0 (vectordatahandler.cpp:1367, int VectorDataHandler::getVectorTableRowCount(int))
[2025-05-20 11:20:43.843] [Debug] DialogManager::showVectorDataDialog - 开始保存向量行数据，表ID: 1 ，起始索引: 0 ，总行数: 4 (dialogmanager.cpp:985, DialogManager::showVectorDataDialog(int, const QString&, int)::<lambda()>)
[2025-05-20 11:20:43.844] [Debug] "VectorDataHandler::insertVectorRows" - 开始插入向量行，表ID: 1 目标行数: 4 源数据表行数: 4 TimesetID: 1 Append: true StartIndex: 0 (vectordatahandler.cpp:1404, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:43.852] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.853] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 0 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.853] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.857] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 7
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.859] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.860] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 8
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.861] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.862] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 9
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.864] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.864] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 10
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.868] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Ext"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.869] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 11
  VectorTableID: 1
  Name: "Ext"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.871] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.873] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 12
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.877] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"A"', Input: '"{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":3}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.877] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 13
  VectorTableID: 1
  Name: "A"
  Order: 6
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":1,"type_id":3}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.878] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"B"', Input: '"{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.879] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 14
  VectorTableID: 1
  Name: "B"
  Order: 7
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":2,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.882] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"C"', Input: '"{\"channel_count\":1,\"pin_list_id\":3,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.883] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 15
  VectorTableID: 1
  Name: "C"
  Order: 8
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":3,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.886] [Debug] "VectorDataHandler::insertVectorRows" - 元数据加载成功. BinFile: "table_1_data.vbindata" SchemaVersion: 1 Columns: 9 ExistingMetaRows: 0 (vectordatahandler.cpp:1424, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:43.893] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 开始解析表ID的二进制文件路径: 1 (vectordatahandler.cpp:207, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:20:43.894] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.896] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 0 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.898] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.899] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 7
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.900] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.901] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 8
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.902] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.902] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 9
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.904] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.907] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 10
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.909] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Ext"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.909] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 11
  VectorTableID: 1
  Name: "Ext"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.911] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.913] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 12
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.914] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"A"', Input: '"{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":3}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.915] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 13
  VectorTableID: 1
  Name: "A"
  Order: 6
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":1,"type_id":3}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.917] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"B"', Input: '"{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.918] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 14
  VectorTableID: 1
  Name: "B"
  Order: 7
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":2,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.919] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"C"', Input: '"{\"channel_count\":1,\"pin_list_id\":3,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:43.919] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 15
  VectorTableID: 1
  Name: "C"
  Order: 8
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":3,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:43.929] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 输入数据库路径: "C:/Users/GIGA/Documents/TEST134.db" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:29, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:20:43.931] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 生成的项目二进制数据目录： "C:\\Users\\GIGA\\Documents\\TEST134_vbindata" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:50, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:20:43.932] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 解析得到的绝对路径:  "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata"  (DB:  "C:/Users/GIGA/Documents/TEST134.db" , File:  "table_1_data.vbindata" ) (vectordatahandler.cpp:276, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:20:43.933] [Debug] "VectorDataHandler::insertVectorRows" - 二进制文件绝对路径: "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata" (vectordatahandler.cpp:1445, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:43.949] [Debug] "VectorDataHandler::insertVectorRows" - 计算重复次数: 1  (基于请求总行数  4  和源数据表行数  4 ) (vectordatahandler.cpp:1506, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:43.949] [Debug] "VectorDataHandler::insertVectorRows" - 二进制文件存在，尝试加载现有数据: "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata" (vectordatahandler.cpp:1522, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:43.950] [Debug] "BinaryFileHelper::readBinaryHeader" - Attempting to read binary file header. (binaryfilehelper.cpp:22, static bool Persistence::BinaryFileHelper::readBinaryHeader(QIODevice*, BinaryFileHeader&))
[2025-05-20 11:20:43.951] [Debug] ["BinaryFileHelper::readBinaryHeader - Successfully Read Header"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 0
  Column Count: 0
  Created: 1747711236
  Updated: 1747711236
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:20:43.952] [Debug] "BinaryFileHelper::readBinaryHeader"  - Binary file header read and validated successfully. (binaryfilehelper.cpp:83, static bool Persistence::BinaryFileHelper::readBinaryHeader(QIODevice*, BinaryFileHeader&))
[2025-05-20 11:20:43.954] [Debug] "VectorDataHandler::insertVectorRows" - 追加模式: 从文件头获取现有行数: 0 (vectordatahandler.cpp:1535, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:43.959] [Debug] "VectorDataHandler::insertVectorRows"  - 列映射: 名称= "Label" ，索引= 0 ，类型= "TEXT" (vectordatahandler.cpp:1573, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:43.964] [Debug] "VectorDataHandler::insertVectorRows"  - 列映射: 名称= "Instruction" ，索引= 1 ，类型= "INSTRUCTION_ID" (vectordatahandler.cpp:1573, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:43.965] [Debug] "VectorDataHandler::insertVectorRows"  - 列映射: 名称= "TimeSet" ，索引= 2 ，类型= "TIMESET_ID" (vectordatahandler.cpp:1573, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:43.966] [Debug] "VectorDataHandler::insertVectorRows"  - 列映射: 名称= "Capture" ，索引= 3 ，类型= "TEXT" (vectordatahandler.cpp:1573, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:43.967] [Debug] "VectorDataHandler::insertVectorRows"  - 列映射: 名称= "Ext" ，索引= 4 ，类型= "TEXT" (vectordatahandler.cpp:1573, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:43.968] [Debug] "VectorDataHandler::insertVectorRows"  - 列映射: 名称= "Comment" ，索引= 5 ，类型= "TEXT" (vectordatahandler.cpp:1573, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:43.969] [Debug] "VectorDataHandler::insertVectorRows"  - 列映射: 名称= "A" ，索引= 6 ，类型= "PIN_STATE_ID" (vectordatahandler.cpp:1573, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:43.969] [Debug] "VectorDataHandler::insertVectorRows"  - 列映射: 名称= "B" ，索引= 7 ，类型= "PIN_STATE_ID" (vectordatahandler.cpp:1573, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:43.970] [Debug] "VectorDataHandler::insertVectorRows"  - 列映射: 名称= "C" ，索引= 8 ，类型= "PIN_STATE_ID" (vectordatahandler.cpp:1573, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:43.978] [Debug] "VectorDataHandler::insertVectorRows" - 开始批量处理，总批次: 1 ，每批大小: 10000 (vectordatahandler.cpp:1589, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:43.978] [Debug] "VectorDataHandler::insertVectorRows" - 处理批次  1 / 1 ，当前批次大小: 4 (vectordatahandler.cpp:1658, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:43.980] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Entry. File path: "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata" DB Schema Version: 1 . Attempting to write 4 rows with 9 columns. (binaryfilehelper.cpp:593, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:43.980] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - 列信息详情: (binaryfilehelper.cpp:596, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:43.981] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 0 ]: ID= 7 , 名称= "Label" , 顺序= 0 , 类型= "TEXT" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:43.982] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 1 ]: ID= 8 , 名称= "Instruction" , 顺序= 1 , 类型= "INSTRUCTION_ID" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:43.983] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 2 ]: ID= 9 , 名称= "TimeSet" , 顺序= 2 , 类型= "TIMESET_ID" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:43.983] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 3 ]: ID= 10 , 名称= "Capture" , 顺序= 3 , 类型= "TEXT" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:43.984] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 4 ]: ID= 11 , 名称= "Ext" , 顺序= 4 , 类型= "TEXT" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:43.984] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 5 ]: ID= 12 , 名称= "Comment" , 顺序= 5 , 类型= "TEXT" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:43.985] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 6 ]: ID= 13 , 名称= "A" , 顺序= 6 , 类型= "PIN_STATE_ID" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:43.986] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 7 ]: ID= 14 , 名称= "B" , 顺序= 7 , 类型= "PIN_STATE_ID" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:43.986] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 8 ]: ID= 15 , 名称= "C" , 顺序= 8 , 类型= "PIN_STATE_ID" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:43.987] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Attempting to open file for writing (Truncate). (binaryfilehelper.cpp:607, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:43.993] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - File opened successfully. (binaryfilehelper.cpp:613, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:43.995] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Attempting to write binary header. (binaryfilehelper.cpp:629, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:43.995] [Debug] ["BinaryFileHelper::writeAllRowsToBinary - Header to Write"] BinaryFileHeader Details:
  Magic Number: 0x"5642494e"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 4
  Column Count: 9
  Created: 1747711243
  Updated: 1747711243
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:20:43.996] [Debug] "BinaryFileHelper::writeBinaryHeader" - Attempting to write binary file header. (binaryfilehelper.cpp:90, static bool Persistence::BinaryFileHelper::writeBinaryHeader(QIODevice*, const BinaryFileHeader&))
[2025-05-20 11:20:43.997] [Debug] ["BinaryFileHelper::writeBinaryHeader - Successfully Written Header"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 4
  Column Count: 9
  Created: 1747711243
  Updated: 1747711243
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:20:43.998] [Debug] "BinaryFileHelper::writeBinaryHeader"  - Binary file header written successfully. (binaryfilehelper.cpp:149, static bool Persistence::BinaryFileHelper::writeBinaryHeader(QIODevice*, const BinaryFileHeader&))
[2025-05-20 11:20:43.999] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Binary header written successfully. (binaryfilehelper.cpp:643, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:43.999] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Starting data serialization loop for 4 rows. (binaryfilehelper.cpp:654, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:44.000] [Debug] "BinaryFileHelper::serializeRow" - 开始序列化行数据, 列数:9, 数据项数:9 (binaryfilehelper.cpp:156, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.000] [Debug] "BinaryFileHelper::serializeRow" - 序列化第0列, 名称:"Label", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.001] [Debug] "BinaryFileHelper::serializeRow" - 序列化第1列, 名称:"Instruction", 类型:3, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.002] [Debug] "BinaryFileHelper::serializeRow" - 序列化第2列, 名称:"TimeSet", 类型:4, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.002] [Debug] "BinaryFileHelper::serializeRow" - 序列化第3列, 名称:"Capture", 类型:0, 值:QVariant(QString, "N") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.003] [Debug] "BinaryFileHelper::serializeRow" - 序列化第4列, 名称:"Ext", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.003] [Debug] "BinaryFileHelper::serializeRow" - 序列化第5列, 名称:"Comment", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.011] [Debug] "BinaryFileHelper::serializeRow" - 序列化第6列, 名称:"A", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.012] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "A" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.013] [Debug] "BinaryFileHelper::serializeRow" - 序列化第7列, 名称:"B", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.013] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "B" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.014] [Debug] "BinaryFileHelper::serializeRow" - 序列化第8列, 名称:"C", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.015] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "C" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.015] [Debug] "BinaryFileHelper::serializeRow"  - 序列化完成, 字节长度: 44 (binaryfilehelper.cpp:239, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.016] [Debug] "BinaryFileHelper::serializeRow" - 开始序列化行数据, 列数:9, 数据项数:9 (binaryfilehelper.cpp:156, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.016] [Debug] "BinaryFileHelper::serializeRow" - 序列化第0列, 名称:"Label", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.017] [Debug] "BinaryFileHelper::serializeRow" - 序列化第1列, 名称:"Instruction", 类型:3, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.017] [Debug] "BinaryFileHelper::serializeRow" - 序列化第2列, 名称:"TimeSet", 类型:4, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.018] [Debug] "BinaryFileHelper::serializeRow" - 序列化第3列, 名称:"Capture", 类型:0, 值:QVariant(QString, "N") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.019] [Debug] "BinaryFileHelper::serializeRow" - 序列化第4列, 名称:"Ext", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.019] [Debug] "BinaryFileHelper::serializeRow" - 序列化第5列, 名称:"Comment", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.020] [Debug] "BinaryFileHelper::serializeRow" - 序列化第6列, 名称:"A", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.025] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "A" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.027] [Debug] "BinaryFileHelper::serializeRow" - 序列化第7列, 名称:"B", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.028] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "B" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.029] [Debug] "BinaryFileHelper::serializeRow" - 序列化第8列, 名称:"C", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.029] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "C" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.030] [Debug] "BinaryFileHelper::serializeRow"  - 序列化完成, 字节长度: 44 (binaryfilehelper.cpp:239, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.030] [Debug] "BinaryFileHelper::serializeRow" - 开始序列化行数据, 列数:9, 数据项数:9 (binaryfilehelper.cpp:156, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.031] [Debug] "BinaryFileHelper::serializeRow" - 序列化第0列, 名称:"Label", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.032] [Debug] "BinaryFileHelper::serializeRow" - 序列化第1列, 名称:"Instruction", 类型:3, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.032] [Debug] "BinaryFileHelper::serializeRow" - 序列化第2列, 名称:"TimeSet", 类型:4, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.033] [Debug] "BinaryFileHelper::serializeRow" - 序列化第3列, 名称:"Capture", 类型:0, 值:QVariant(QString, "N") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.034] [Debug] "BinaryFileHelper::serializeRow" - 序列化第4列, 名称:"Ext", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.035] [Debug] "BinaryFileHelper::serializeRow" - 序列化第5列, 名称:"Comment", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.035] [Debug] "BinaryFileHelper::serializeRow" - 序列化第6列, 名称:"A", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.036] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "A" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.036] [Debug] "BinaryFileHelper::serializeRow" - 序列化第7列, 名称:"B", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.037] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "B" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.047] [Debug] "BinaryFileHelper::serializeRow" - 序列化第8列, 名称:"C", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.048] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "C" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.049] [Debug] "BinaryFileHelper::serializeRow"  - 序列化完成, 字节长度: 44 (binaryfilehelper.cpp:239, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.049] [Debug] "BinaryFileHelper::serializeRow" - 开始序列化行数据, 列数:9, 数据项数:9 (binaryfilehelper.cpp:156, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.049] [Debug] "BinaryFileHelper::serializeRow" - 序列化第0列, 名称:"Label", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.049] [Debug] "BinaryFileHelper::serializeRow" - 序列化第1列, 名称:"Instruction", 类型:3, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.050] [Debug] "BinaryFileHelper::serializeRow" - 序列化第2列, 名称:"TimeSet", 类型:4, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.051] [Debug] "BinaryFileHelper::serializeRow" - 序列化第3列, 名称:"Capture", 类型:0, 值:QVariant(QString, "N") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.051] [Debug] "BinaryFileHelper::serializeRow" - 序列化第4列, 名称:"Ext", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.052] [Debug] "BinaryFileHelper::serializeRow" - 序列化第5列, 名称:"Comment", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.053] [Debug] "BinaryFileHelper::serializeRow" - 序列化第6列, 名称:"A", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.060] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "A" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.061] [Debug] "BinaryFileHelper::serializeRow" - 序列化第7列, 名称:"B", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.062] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "B" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.062] [Debug] "BinaryFileHelper::serializeRow" - 序列化第8列, 名称:"C", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.063] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "C" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.063] [Debug] "BinaryFileHelper::serializeRow"  - 序列化完成, 字节长度: 44 (binaryfilehelper.cpp:239, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:44.064] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Finished writing loop. Successfully wrote 4 rows. (binaryfilehelper.cpp:716, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:44.064] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - File flushed and closed. Exit. (binaryfilehelper.cpp:721, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:44.082] [Debug] "VectorDataHandler::insertVectorRows" - 更新二进制文件头中的行数信息 (vectordatahandler.cpp:1830, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:44.083] [Debug] "BinaryFileHelper::readBinaryHeader" - Attempting to read binary file header. (binaryfilehelper.cpp:22, static bool Persistence::BinaryFileHelper::readBinaryHeader(QIODevice*, BinaryFileHeader&))
[2025-05-20 11:20:44.084] [Debug] ["BinaryFileHelper::readBinaryHeader - Successfully Read Header"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 4
  Column Count: 9
  Created: 1747711243
  Updated: 1747711243
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:20:44.085] [Debug] "BinaryFileHelper::readBinaryHeader"  - Binary file header read and validated successfully. (binaryfilehelper.cpp:83, static bool Persistence::BinaryFileHelper::readBinaryHeader(QIODevice*, BinaryFileHeader&))
[2025-05-20 11:20:44.085] [Debug] "BinaryFileHelper::writeBinaryHeader" - Attempting to write binary file header. (binaryfilehelper.cpp:90, static bool Persistence::BinaryFileHelper::writeBinaryHeader(QIODevice*, const BinaryFileHeader&))
[2025-05-20 11:20:44.086] [Debug] ["BinaryFileHelper::writeBinaryHeader - Successfully Written Header"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 4
  Column Count: 9
  Created: 1747711243
  Updated: 1747711244
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:20:44.095] [Debug] "BinaryFileHelper::writeBinaryHeader"  - Binary file header written successfully. (binaryfilehelper.cpp:149, static bool Persistence::BinaryFileHelper::writeBinaryHeader(QIODevice*, const BinaryFileHeader&))
[2025-05-20 11:20:44.095] [Debug] "VectorDataHandler::insertVectorRows" - 成功更新二进制文件头中的行数为: 4 (vectordatahandler.cpp:1854, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:44.100] [Debug] "VectorDataHandler::insertVectorRows" - 数据库元数据行数已更新为: 4  for table ID: 1 (vectordatahandler.cpp:1912, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:44.111] [Debug] "VectorDataHandler::insertVectorRows" - 向量行数据操作成功完成。 (vectordatahandler.cpp:1914, bool VectorDataHandler::insertVectorRows(int, int, int, int, QTableWidget*, bool, const QList<std::pair<int, std::pair<QString, std::pair<int, QString> > > >&, QString&))
[2025-05-20 11:20:44.665] [Debug] MainWindow::showPinSelectionDialog - 管脚选择对话框返回结果: true (mainwindow.cpp:1337, void MainWindow::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:44.666] [Debug] MainWindow::showPinSelectionDialog - 刷新表格显示，表ID: 1 (mainwindow.cpp:1343, void MainWindow::showPinSelectionDialog(int, const QString&))
[2025-05-20 11:20:44.669] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 向量表选择已更改，索引: 0 (mainwindow.cpp:749, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:44.672] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 当前表ID: 1 (mainwindow.cpp:753, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:44.673] [Debug] MainWindow::syncTabWithComboBox - 同步Tab页签与下拉框选择 (mainwindow.cpp:845, void MainWindow::syncTabWithComboBox(int))
[2025-05-20 11:20:44.674] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 表  1  当前有  9  个列配置 (mainwindow.cpp:767, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:44.675] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 开始加载表格数据，表ID: 1 (mainwindow.cpp:778, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:44.677] [Debug] "VectorDataHandler::loadVectorTableData"  - 开始加载, 表ID: 1 (vectordatahandler.cpp:287, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.679] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.681] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 4 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.682] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.683] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 7
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.684] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.684] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 8
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.685] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.686] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 9
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.690] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.691] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 10
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.692] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Ext"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.693] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 11
  VectorTableID: 1
  Name: "Ext"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.694] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.696] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 12
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.697] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"A"', Input: '"{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":3}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.699] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 13
  VectorTableID: 1
  Name: "A"
  Order: 6
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":1,"type_id":3}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.702] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"B"', Input: '"{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.703] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 14
  VectorTableID: 1
  Name: "B"
  Order: 7
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":2,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.708] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"C"', Input: '"{\"channel_count\":1,\"pin_list_id\":3,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.711] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 15
  VectorTableID: 1
  Name: "C"
  Order: 8
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":3,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.712] [Debug] "VectorDataHandler::loadVectorTableData"  - 元数据加载成功, 列数: 9 , DB记录行数: 4 (vectordatahandler.cpp:312, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.713] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 开始解析表ID的二进制文件路径: 1 (vectordatahandler.cpp:207, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:20:44.714] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.715] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 4 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.716] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.718] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 7
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.720] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.723] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 8
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.727] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.728] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 9
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.730] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.731] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 10
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.733] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Ext"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.734] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 11
  VectorTableID: 1
  Name: "Ext"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.735] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.736] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 12
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.737] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"A"', Input: '"{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":3}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.742] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 13
  VectorTableID: 1
  Name: "A"
  Order: 6
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":1,"type_id":3}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.744] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"B"', Input: '"{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.745] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 14
  VectorTableID: 1
  Name: "B"
  Order: 7
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":2,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.747] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"C"', Input: '"{\"channel_count\":1,\"pin_list_id\":3,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:44.748] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 15
  VectorTableID: 1
  Name: "C"
  Order: 8
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":3,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:44.750] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 输入数据库路径: "C:/Users/GIGA/Documents/TEST134.db" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:29, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:20:44.750] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 生成的项目二进制数据目录： "C:\\Users\\GIGA\\Documents\\TEST134_vbindata" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:50, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:20:44.751] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 解析得到的绝对路径:  "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata"  (DB:  "C:/Users/GIGA/Documents/TEST134.db" , File:  "table_1_data.vbindata" ) (vectordatahandler.cpp:276, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:20:44.752] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 0  -> 可见索引 0 , 列名: "Label" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.753] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 1  -> 可见索引 1 , 列名: "Instruction" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.758] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 2  -> 可见索引 2 , 列名: "TimeSet" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.760] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 3  -> 可见索引 3 , 列名: "Capture" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.761] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 4  -> 可见索引 4 , 列名: "Ext" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.762] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 5  -> 可见索引 5 , 列名: "Comment" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.762] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 6  -> 可见索引 6 , 列名: "A" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.763] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 7  -> 可见索引 7 , 列名: "B" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.764] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 8  -> 可见索引 8 , 列名: "C" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.764] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Entry. File path: "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata" DB Schema Version: 1 Num Columns Expected: 9 (binaryfilehelper.cpp:430, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:44.765] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Attempting to open file for reading. (binaryfilehelper.cpp:434, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:44.766] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - File opened successfully. (binaryfilehelper.cpp:440, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:44.766] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Attempting to read binary header. (binaryfilehelper.cpp:443, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:44.767] [Debug] "BinaryFileHelper::readBinaryHeader" - Attempting to read binary file header. (binaryfilehelper.cpp:22, static bool Persistence::BinaryFileHelper::readBinaryHeader(QIODevice*, BinaryFileHeader&))
[2025-05-20 11:20:44.767] [Debug] ["BinaryFileHelper::readBinaryHeader - Successfully Read Header"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 4
  Column Count: 9
  Created: 1747711243
  Updated: 1747711244
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:20:44.768] [Debug] "BinaryFileHelper::readBinaryHeader"  - Binary file header read and validated successfully. (binaryfilehelper.cpp:83, static bool Persistence::BinaryFileHelper::readBinaryHeader(QIODevice*, BinaryFileHeader&))
[2025-05-20 11:20:44.769] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Binary header read successfully. Details: (binaryfilehelper.cpp:450, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:44.769] [Debug] ["BinaryFileHelper::readAllRowsFromBinary"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 4
  Column Count: 9
  Created: 1747711243
  Updated: 1747711244
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:20:44.774] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Header indicates 4 rows. Starting data deserialization loop. (binaryfilehelper.cpp:487, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:44.777] [Debug] "BinaryFileHelper::deserializeRow" - 开始反序列化行数据, 列数:9, 字节长度:44, 文件版本:1 (binaryfilehelper.cpp:246, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.778] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第0列, 名称:"Label", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.778] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第1列, 名称:"Instruction", 类型:3 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.779] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第2列, 名称:"TimeSet", 类型:4 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.779] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第3列, 名称:"Capture", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.780] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第4列, 名称:"Ext", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.781] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第5列, 名称:"Comment", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.781] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第6列, 名称:"A", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.782] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "A" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.782] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第7列, 名称:"B", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.783] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "B" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.783] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第8列, 名称:"C", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.784] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "C" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.784] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "A" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.785] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "B" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.785] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "C" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.786] [Debug] "BinaryFileHelper::deserializeRow"  - 反序列化完成, 行数据项: 9 (binaryfilehelper.cpp:422, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.786] [Debug] "BinaryFileHelper::deserializeRow" - 开始反序列化行数据, 列数:9, 字节长度:44, 文件版本:1 (binaryfilehelper.cpp:246, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.787] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第0列, 名称:"Label", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.790] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第1列, 名称:"Instruction", 类型:3 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.792] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第2列, 名称:"TimeSet", 类型:4 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.794] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第3列, 名称:"Capture", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.795] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第4列, 名称:"Ext", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.795] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第5列, 名称:"Comment", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.796] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第6列, 名称:"A", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.797] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "A" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.797] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第7列, 名称:"B", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.798] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "B" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.798] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第8列, 名称:"C", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.799] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "C" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.799] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "A" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.800] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "B" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.800] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "C" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.801] [Debug] "BinaryFileHelper::deserializeRow"  - 反序列化完成, 行数据项: 9 (binaryfilehelper.cpp:422, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.801] [Debug] "BinaryFileHelper::deserializeRow" - 开始反序列化行数据, 列数:9, 字节长度:44, 文件版本:1 (binaryfilehelper.cpp:246, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.802] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第0列, 名称:"Label", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.802] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第1列, 名称:"Instruction", 类型:3 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.803] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第2列, 名称:"TimeSet", 类型:4 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.803] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第3列, 名称:"Capture", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.809] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第4列, 名称:"Ext", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.812] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第5列, 名称:"Comment", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.812] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第6列, 名称:"A", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.813] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "A" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.814] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第7列, 名称:"B", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.814] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "B" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.815] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第8列, 名称:"C", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.816] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "C" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.817] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "A" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.817] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "B" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.818] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "C" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.819] [Debug] "BinaryFileHelper::deserializeRow"  - 反序列化完成, 行数据项: 9 (binaryfilehelper.cpp:422, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.819] [Debug] "BinaryFileHelper::deserializeRow" - 开始反序列化行数据, 列数:9, 字节长度:44, 文件版本:1 (binaryfilehelper.cpp:246, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.820] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第0列, 名称:"Label", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.827] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第1列, 名称:"Instruction", 类型:3 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.828] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第2列, 名称:"TimeSet", 类型:4 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.829] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第3列, 名称:"Capture", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.830] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第4列, 名称:"Ext", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.830] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第5列, 名称:"Comment", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.831] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第6列, 名称:"A", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.832] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "A" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.832] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第7列, 名称:"B", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.833] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "B" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.833] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第8列, 名称:"C", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.834] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "C" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.834] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "A" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.835] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "B" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.836] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "C" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.836] [Debug] "BinaryFileHelper::deserializeRow"  - 反序列化完成, 行数据项: 9 (binaryfilehelper.cpp:422, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:44.839] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Finished reading loop. Expected rows based on header: 4 . Actual rows successfully deserialized: 4 . Stream at end: true (binaryfilehelper.cpp:567, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:44.844] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Exit. Returning 4 rows. Operation successful. (binaryfilehelper.cpp:585, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:44.845] [Debug] "VectorDataHandler::loadVectorTableData"  - 从二进制文件加载了  4  行, 原始列数: 9 , 可见列数: 9 (vectordatahandler.cpp:415, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.846] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表格列数: 9 (vectordatahandler.cpp:430, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.847] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Label" ，索引: 0 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.847] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Instruction" ，索引: 1 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.848] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "TimeSet" ，索引: 2 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.848] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Capture" ，索引: 3 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.849] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Ext" ，索引: 4 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.849] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Comment" ，索引: 5 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.850] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加管脚列表头: "A\nx1\nInOut" ，原始列名: "A" ，索引: 6 (vectordatahandler.cpp:458, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.851] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加管脚列表头: "B\nx1\nIn" ，原始列名: "B" ，索引: 7 (vectordatahandler.cpp:458, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.851] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加管脚列表头: "C\nx1\nIn" ，原始列名: "C" ，索引: 8 (vectordatahandler.cpp:458, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.852] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头完成，列数: 9 ，列表: "Label, Instruction, TimeSet, Capture, Ext, Comment, A\nx1\nInOut, B\nx1\nIn, C\nx1\nIn" (vectordatahandler.cpp:469, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.853] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 0 , "Label" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.853] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 1 , "Instruction" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.856] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 2 , "TimeSet" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.860] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 3 , "Capture" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.861] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 4 , "Ext" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.861] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 5 , "Comment" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.862] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 6 , "A\nx1\nInOut" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.862] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 7 , "B\nx1\nIn" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.863] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 8 , "C\nx1\nIn" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.863] [Debug] "VectorDataHandler::loadVectorTableData"  - 准备填充  4  行到 QTableWidget (vectordatahandler.cpp:492, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.864] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 7  -> 索引= 0 , 名称= "Label" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.864] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 8  -> 索引= 1 , 名称= "Instruction" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.865] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 9  -> 索引= 2 , 名称= "TimeSet" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.865] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 10  -> 索引= 3 , 名称= "Capture" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.866] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 11  -> 索引= 4 , 名称= "Ext" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.866] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 12  -> 索引= 5 , 名称= "Comment" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.867] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 13  -> 索引= 6 , 名称= "A" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.867] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 14  -> 索引= 7 , 名称= "B" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.868] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 15  -> 索引= 8 , 名称= "C" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.868] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 0  ( "Label" ) -> 原始列 0  ( "Label" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.869] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 0  ( "Label" ) 从原始列 0 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.869] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 0  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.870] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 1  ( "Instruction" ) -> 原始列 1  ( "Instruction" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.872] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 1  ( "Instruction" ) 从原始列 1 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.874] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 1  设置指令为: "INC" (ID: 1 ) (vectordatahandler.cpp:610, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.874] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 2  ( "TimeSet" ) -> 原始列 2  ( "TimeSet" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.875] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 2  ( "TimeSet" ) 从原始列 2 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.875] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 2  设置TimeSet为: "timeset_1" (ID: 1 ) (vectordatahandler.cpp:637, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.876] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 3  ( "Capture" ) -> 原始列 3  ( "Capture" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.876] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 3  ( "Capture" ) 从原始列 3 获取值: QVariant(QString, "N") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.877] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 3  设置为: "N" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.877] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 4  ( "Ext" ) -> 原始列 4  ( "Ext" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.878] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 4  ( "Ext" ) 从原始列 4 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.878] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 4  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.879] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 5  ( "Comment" ) -> 原始列 5  ( "Comment" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.879] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 5  ( "Comment" ) 从原始列 5 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.880] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 5  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.880] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 6  ( "A" ) -> 原始列 6  ( "A" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.881] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 6  ( "A" ) 从原始列 6 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.882] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 6  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.883] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 7  ( "B" ) -> 原始列 7  ( "B" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.883] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 7  ( "B" ) 从原始列 7 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.884] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 7  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.884] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 8  ( "C" ) -> 原始列 8  ( "C" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.884] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 8  ( "C" ) 从原始列 8 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.885] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 8  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.885] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 0  ( "Label" ) -> 原始列 0  ( "Label" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.889] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 0  ( "Label" ) 从原始列 0 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.890] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 0  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.891] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 1  ( "Instruction" ) -> 原始列 1  ( "Instruction" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.892] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 1  ( "Instruction" ) 从原始列 1 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.893] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 1  设置指令为: "INC" (ID: 1 ) (vectordatahandler.cpp:610, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.894] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 2  ( "TimeSet" ) -> 原始列 2  ( "TimeSet" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.894] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 2  ( "TimeSet" ) 从原始列 2 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.895] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 2  设置TimeSet为: "timeset_1" (ID: 1 ) (vectordatahandler.cpp:637, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.895] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 3  ( "Capture" ) -> 原始列 3  ( "Capture" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.896] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 3  ( "Capture" ) 从原始列 3 获取值: QVariant(QString, "N") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.896] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 3  设置为: "N" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.897] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 4  ( "Ext" ) -> 原始列 4  ( "Ext" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.897] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 4  ( "Ext" ) 从原始列 4 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.898] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 4  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.898] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 5  ( "Comment" ) -> 原始列 5  ( "Comment" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.899] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 5  ( "Comment" ) 从原始列 5 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.899] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 5  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.899] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 6  ( "A" ) -> 原始列 6  ( "A" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.900] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 6  ( "A" ) 从原始列 6 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.901] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 6  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.901] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 7  ( "B" ) -> 原始列 7  ( "B" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.902] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 7  ( "B" ) 从原始列 7 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.910] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 7  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.911] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 8  ( "C" ) -> 原始列 8  ( "C" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.911] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 8  ( "C" ) 从原始列 8 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.912] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 8  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.913] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 0  ( "Label" ) -> 原始列 0  ( "Label" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.913] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 0  ( "Label" ) 从原始列 0 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.914] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 0  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.914] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 1  ( "Instruction" ) -> 原始列 1  ( "Instruction" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.915] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 1  ( "Instruction" ) 从原始列 1 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.915] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 1  设置指令为: "INC" (ID: 1 ) (vectordatahandler.cpp:610, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.916] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 2  ( "TimeSet" ) -> 原始列 2  ( "TimeSet" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.916] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 2  ( "TimeSet" ) 从原始列 2 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.917] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 2  设置TimeSet为: "timeset_1" (ID: 1 ) (vectordatahandler.cpp:637, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.918] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 3  ( "Capture" ) -> 原始列 3  ( "Capture" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.918] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 3  ( "Capture" ) 从原始列 3 获取值: QVariant(QString, "N") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.919] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 3  设置为: "N" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.919] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 4  ( "Ext" ) -> 原始列 4  ( "Ext" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.922] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 4  ( "Ext" ) 从原始列 4 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.924] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 4  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.924] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 5  ( "Comment" ) -> 原始列 5  ( "Comment" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.925] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 5  ( "Comment" ) 从原始列 5 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.925] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 5  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.926] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 6  ( "A" ) -> 原始列 6  ( "A" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.926] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 6  ( "A" ) 从原始列 6 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.927] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 6  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.928] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 7  ( "B" ) -> 原始列 7  ( "B" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.929] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 7  ( "B" ) 从原始列 7 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.930] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 7  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.931] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 8  ( "C" ) -> 原始列 8  ( "C" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.932] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 8  ( "C" ) 从原始列 8 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.933] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 8  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.933] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 0  ( "Label" ) -> 原始列 0  ( "Label" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.934] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 0  ( "Label" ) 从原始列 0 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.934] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 0  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.935] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 1  ( "Instruction" ) -> 原始列 1  ( "Instruction" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.935] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 1  ( "Instruction" ) 从原始列 1 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.936] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 1  设置指令为: "INC" (ID: 1 ) (vectordatahandler.cpp:610, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.939] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 2  ( "TimeSet" ) -> 原始列 2  ( "TimeSet" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.940] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 2  ( "TimeSet" ) 从原始列 2 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.940] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 2  设置TimeSet为: "timeset_1" (ID: 1 ) (vectordatahandler.cpp:637, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.941] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 3  ( "Capture" ) -> 原始列 3  ( "Capture" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.941] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 3  ( "Capture" ) 从原始列 3 获取值: QVariant(QString, "N") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.942] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 3  设置为: "N" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.942] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 4  ( "Ext" ) -> 原始列 4  ( "Ext" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.958] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 4  ( "Ext" ) 从原始列 4 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.959] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 4  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.959] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 5  ( "Comment" ) -> 原始列 5  ( "Comment" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.960] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 5  ( "Comment" ) 从原始列 5 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.960] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 5  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.961] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 6  ( "A" ) -> 原始列 6  ( "A" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.961] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 6  ( "A" ) 从原始列 6 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.962] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 6  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.963] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 7  ( "B" ) -> 原始列 7  ( "B" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.963] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 7  ( "B" ) 从原始列 7 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.964] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 7  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.965] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 8  ( "C" ) -> 原始列 8  ( "C" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.965] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 8  ( "C" ) 从原始列 8 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.966] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 8  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.967] [Debug] "VectorDataHandler::loadVectorTableData"  - 表格填充完成, 总行数: 4 , 总列数: 9 (vectordatahandler.cpp:681, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:44.967] [Debug] "MainWindow::onVectorTableSelectionChanged"  - VectorDataHandler::loadVectorTableData 返回: true ，表ID: 1 ，列数: 9 (mainwindow.cpp:780, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:44.968] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 表格加载成功，列数: 9 (mainwindow.cpp:786, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:44.969] [Debug] "TableStyleManager::applyTableStyle(QTableWidget*)"  - Entry (tablestylemanager.cpp:10, static void TableStyleManager::applyTableStyle(QTableWidget*))
[2025-05-20 11:20:44.969] [Debug] "TableStyleManager::applyTableStyle(QTableWidget*)"  - 开始设置表格样式 (tablestylemanager.cpp:18, static void TableStyleManager::applyTableStyle(QTableWidget*))
[2025-05-20 11:20:45.001] [Debug] TableStyleManager::setRowHeight - 设置表格行高为 28 像素 (tablestylemanager.cpp:218, static void TableStyleManager::setRowHeight(QTableWidget*, int))
[2025-05-20 11:20:45.002] [Debug] TableStyleManager::setColumnAlignments - 开始设置表格列对齐方式 (tablestylemanager.cpp:119, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:20:45.002] [Debug] TableStyleManager::setColumnAlignment - 设置列 0 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.003] [Debug] TableStyleManager::setColumnAlignment - 设置列 1 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.006] [Debug] TableStyleManager::setColumnAlignment - 设置列 2 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.007] [Debug] TableStyleManager::setColumnAlignment - 设置列 3 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.008] [Debug] TableStyleManager::setColumnAlignment - 设置列 4 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.009] [Debug] TableStyleManager::setColumnAlignment - 设置列 5 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.010] [Debug] TableStyleManager::setColumnAlignment - 设置列 6 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.011] [Debug] TableStyleManager::setColumnAlignments - 设置管脚列 6 居中对齐 (tablestylemanager.cpp:138, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:20:45.011] [Debug] TableStyleManager::setColumnAlignment - 设置列 7 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.011] [Debug] TableStyleManager::setColumnAlignments - 设置管脚列 7 居中对齐 (tablestylemanager.cpp:138, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:20:45.012] [Debug] TableStyleManager::setColumnAlignment - 设置列 8 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.012] [Debug] TableStyleManager::setColumnAlignments - 设置管脚列 8 居中对齐 (tablestylemanager.cpp:138, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:20:45.013] [Debug] TableStyleManager::setColumnAlignments - 列对齐方式设置完成 (tablestylemanager.cpp:179, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:20:45.013] [Debug] "TableStyleManager::setPinColumnWidths"  - 开始设置管脚列的列宽 (tablestylemanager.cpp:259, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.014] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 6 "A\nx1\nInOut" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.014] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 7 "B\nx1\nIn" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.015] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 8 "C\nx1\nIn" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.015] [Debug] "TableStyleManager::setPinColumnWidths"  - 没有足够的空间分配给管脚列 (tablestylemanager.cpp:353, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.016] [Debug] TableStyleManager::refreshTable - 刷新表格显示 (tablestylemanager.cpp:238, static void TableStyleManager::refreshTable(QTableWidget*))
[2025-05-20 11:20:45.016] [Debug] "TableStyleManager::applyTableStyle(QTableWidget*)"  - 表格样式设置完成 (tablestylemanager.cpp:59, static void TableStyleManager::applyTableStyle(QTableWidget*))
[2025-05-20 11:20:45.017] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 表头列表: "Label, Instruction, TimeSet, Capture, Ext, Comment, A\nx1\nInOut, B\nx1\nIn, C\nx1\nIn" (mainwindow.cpp:826, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:45.020] [Debug] MainWindow::loadVectorTable - 开始加载向量表 (mainwindow.cpp:666, void MainWindow::loadVectorTable())
[2025-05-20 11:20:45.025] [Debug] MainWindow::loadVectorTable - 数据库已打开，开始查询向量表 (mainwindow.cpp:684, void MainWindow::loadVectorTable())
[2025-05-20 11:20:45.025] [Debug] MainWindow::loadVectorTable - 刷新TimeSet选项缓存 (mainwindow.cpp:689, void MainWindow::loadVectorTable())
[2025-05-20 11:20:45.026] [Debug] VectorTableItemDelegate::refreshCache - 缓存已清空，下次使用将重新从数据库加载 (vectortabledelegate.cpp:27, void VectorTableItemDelegate::refreshCache())
[2025-05-20 11:20:45.026] [Debug] MainWindow::loadVectorTable - 向量表查询执行成功 (mainwindow.cpp:697, void MainWindow::loadVectorTable())
[2025-05-20 11:20:45.027] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 向量表选择已更改，索引: 0 (mainwindow.cpp:749, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:45.027] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 当前表ID: 1 (mainwindow.cpp:753, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:45.028] [Debug] MainWindow::syncTabWithComboBox - 同步Tab页签与下拉框选择 (mainwindow.cpp:845, void MainWindow::syncTabWithComboBox(int))
[2025-05-20 11:20:45.030] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 表  1  当前有  9  个列配置 (mainwindow.cpp:767, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:45.030] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 开始加载表格数据，表ID: 1 (mainwindow.cpp:778, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:45.031] [Debug] "VectorDataHandler::loadVectorTableData"  - 开始加载, 表ID: 1 (vectordatahandler.cpp:287, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.031] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.032] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 4 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.033] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.033] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 7
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.034] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.035] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 8
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.036] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.040] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 9
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.042] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.043] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 10
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.044] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Ext"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.045] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 11
  VectorTableID: 1
  Name: "Ext"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.046] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.047] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 12
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.048] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"A"', Input: '"{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":3}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.049] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 13
  VectorTableID: 1
  Name: "A"
  Order: 6
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":1,"type_id":3}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.050] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"B"', Input: '"{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.050] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 14
  VectorTableID: 1
  Name: "B"
  Order: 7
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":2,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.051] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"C"', Input: '"{\"channel_count\":1,\"pin_list_id\":3,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.052] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 15
  VectorTableID: 1
  Name: "C"
  Order: 8
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":3,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.054] [Debug] "VectorDataHandler::loadVectorTableData"  - 元数据加载成功, 列数: 9 , DB记录行数: 4 (vectordatahandler.cpp:312, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.058] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 开始解析表ID的二进制文件路径: 1 (vectordatahandler.cpp:207, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:20:45.058] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.059] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 4 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.060] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.060] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 7
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.061] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.062] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 8
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.063] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.064] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 9
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.065] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.065] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 10
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.066] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Ext"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.067] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 11
  VectorTableID: 1
  Name: "Ext"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.068] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.068] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 12
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.069] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"A"', Input: '"{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":3}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.074] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 13
  VectorTableID: 1
  Name: "A"
  Order: 6
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":1,"type_id":3}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.075] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"B"', Input: '"{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.076] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 14
  VectorTableID: 1
  Name: "B"
  Order: 7
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":2,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.077] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"C"', Input: '"{\"channel_count\":1,\"pin_list_id\":3,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:45.078] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 15
  VectorTableID: 1
  Name: "C"
  Order: 8
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":3,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:45.079] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 输入数据库路径: "C:/Users/GIGA/Documents/TEST134.db" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:29, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:20:45.080] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 生成的项目二进制数据目录： "C:\\Users\\GIGA\\Documents\\TEST134_vbindata" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:50, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:20:45.081] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 解析得到的绝对路径:  "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata"  (DB:  "C:/Users/GIGA/Documents/TEST134.db" , File:  "table_1_data.vbindata" ) (vectordatahandler.cpp:276, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:20:45.082] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 0  -> 可见索引 0 , 列名: "Label" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.082] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 1  -> 可见索引 1 , 列名: "Instruction" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.083] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 2  -> 可见索引 2 , 列名: "TimeSet" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.083] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 3  -> 可见索引 3 , 列名: "Capture" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.084] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 4  -> 可见索引 4 , 列名: "Ext" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.084] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 5  -> 可见索引 5 , 列名: "Comment" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.085] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 6  -> 可见索引 6 , 列名: "A" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.085] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 7  -> 可见索引 7 , 列名: "B" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.086] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 8  -> 可见索引 8 , 列名: "C" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.087] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Entry. File path: "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata" DB Schema Version: 1 Num Columns Expected: 9 (binaryfilehelper.cpp:430, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:45.089] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Attempting to open file for reading. (binaryfilehelper.cpp:434, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:45.090] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - File opened successfully. (binaryfilehelper.cpp:440, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:45.091] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Attempting to read binary header. (binaryfilehelper.cpp:443, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:45.091] [Debug] "BinaryFileHelper::readBinaryHeader" - Attempting to read binary file header. (binaryfilehelper.cpp:22, static bool Persistence::BinaryFileHelper::readBinaryHeader(QIODevice*, BinaryFileHeader&))
[2025-05-20 11:20:45.092] [Debug] ["BinaryFileHelper::readBinaryHeader - Successfully Read Header"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 4
  Column Count: 9
  Created: 1747711243
  Updated: 1747711244
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:20:45.093] [Debug] "BinaryFileHelper::readBinaryHeader"  - Binary file header read and validated successfully. (binaryfilehelper.cpp:83, static bool Persistence::BinaryFileHelper::readBinaryHeader(QIODevice*, BinaryFileHeader&))
[2025-05-20 11:20:45.094] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Binary header read successfully. Details: (binaryfilehelper.cpp:450, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:45.094] [Debug] ["BinaryFileHelper::readAllRowsFromBinary"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 4
  Column Count: 9
  Created: 1747711243
  Updated: 1747711244
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:20:45.095] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Header indicates 4 rows. Starting data deserialization loop. (binaryfilehelper.cpp:487, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:45.096] [Debug] "BinaryFileHelper::deserializeRow" - 开始反序列化行数据, 列数:9, 字节长度:44, 文件版本:1 (binaryfilehelper.cpp:246, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.096] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第0列, 名称:"Label", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.097] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第1列, 名称:"Instruction", 类型:3 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.097] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第2列, 名称:"TimeSet", 类型:4 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.098] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第3列, 名称:"Capture", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.098] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第4列, 名称:"Ext", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.099] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第5列, 名称:"Comment", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.099] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第6列, 名称:"A", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.100] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "A" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.100] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第7列, 名称:"B", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.101] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "B" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.101] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第8列, 名称:"C", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.102] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "C" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.103] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "A" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.105] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "B" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.106] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "C" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.107] [Debug] "BinaryFileHelper::deserializeRow"  - 反序列化完成, 行数据项: 9 (binaryfilehelper.cpp:422, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.108] [Debug] "BinaryFileHelper::deserializeRow" - 开始反序列化行数据, 列数:9, 字节长度:44, 文件版本:1 (binaryfilehelper.cpp:246, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.108] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第0列, 名称:"Label", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.109] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第1列, 名称:"Instruction", 类型:3 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.109] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第2列, 名称:"TimeSet", 类型:4 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.111] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第3列, 名称:"Capture", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.111] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第4列, 名称:"Ext", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.112] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第5列, 名称:"Comment", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.112] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第6列, 名称:"A", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.113] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "A" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.113] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第7列, 名称:"B", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.114] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "B" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.114] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第8列, 名称:"C", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.115] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "C" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.116] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "A" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.116] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "B" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.117] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "C" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.117] [Debug] "BinaryFileHelper::deserializeRow"  - 反序列化完成, 行数据项: 9 (binaryfilehelper.cpp:422, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.118] [Debug] "BinaryFileHelper::deserializeRow" - 开始反序列化行数据, 列数:9, 字节长度:44, 文件版本:1 (binaryfilehelper.cpp:246, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.118] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第0列, 名称:"Label", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.119] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第1列, 名称:"Instruction", 类型:3 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.120] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第2列, 名称:"TimeSet", 类型:4 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.122] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第3列, 名称:"Capture", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.123] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第4列, 名称:"Ext", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.123] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第5列, 名称:"Comment", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.124] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第6列, 名称:"A", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.124] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "A" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.125] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第7列, 名称:"B", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.125] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "B" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.126] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第8列, 名称:"C", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.127] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "C" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.127] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "A" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.128] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "B" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.128] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "C" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.129] [Debug] "BinaryFileHelper::deserializeRow"  - 反序列化完成, 行数据项: 9 (binaryfilehelper.cpp:422, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.129] [Debug] "BinaryFileHelper::deserializeRow" - 开始反序列化行数据, 列数:9, 字节长度:44, 文件版本:1 (binaryfilehelper.cpp:246, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.130] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第0列, 名称:"Label", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.130] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第1列, 名称:"Instruction", 类型:3 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.131] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第2列, 名称:"TimeSet", 类型:4 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.132] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第3列, 名称:"Capture", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.133] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第4列, 名称:"Ext", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.133] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第5列, 名称:"Comment", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.134] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第6列, 名称:"A", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.135] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "A" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.135] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第7列, 名称:"B", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.136] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "B" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.136] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第8列, 名称:"C", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.139] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "C" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.140] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "A" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.142] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "B" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.142] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "C" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.143] [Debug] "BinaryFileHelper::deserializeRow"  - 反序列化完成, 行数据项: 9 (binaryfilehelper.cpp:422, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:45.144] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Finished reading loop. Expected rows based on header: 4 . Actual rows successfully deserialized: 4 . Stream at end: true (binaryfilehelper.cpp:567, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:45.144] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Exit. Returning 4 rows. Operation successful. (binaryfilehelper.cpp:585, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:45.145] [Debug] "VectorDataHandler::loadVectorTableData"  - 从二进制文件加载了  4  行, 原始列数: 9 , 可见列数: 9 (vectordatahandler.cpp:415, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.147] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表格列数: 9 (vectordatahandler.cpp:430, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.148] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Label" ，索引: 0 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.149] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Instruction" ，索引: 1 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.150] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "TimeSet" ，索引: 2 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.150] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Capture" ，索引: 3 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.151] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Ext" ，索引: 4 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.151] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Comment" ，索引: 5 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.152] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加管脚列表头: "A\nx1\nInOut" ，原始列名: "A" ，索引: 6 (vectordatahandler.cpp:458, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.152] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加管脚列表头: "B\nx1\nIn" ，原始列名: "B" ，索引: 7 (vectordatahandler.cpp:458, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.153] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加管脚列表头: "C\nx1\nIn" ，原始列名: "C" ，索引: 8 (vectordatahandler.cpp:458, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.155] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头完成，列数: 9 ，列表: "Label, Instruction, TimeSet, Capture, Ext, Comment, A\nx1\nInOut, B\nx1\nIn, C\nx1\nIn" (vectordatahandler.cpp:469, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.156] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 0 , "Label" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.156] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 1 , "Instruction" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.157] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 2 , "TimeSet" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.158] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 3 , "Capture" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.158] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 4 , "Ext" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.159] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 5 , "Comment" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.159] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 6 , "A\nx1\nInOut" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.160] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 7 , "B\nx1\nIn" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.161] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 8 , "C\nx1\nIn" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.162] [Debug] "VectorDataHandler::loadVectorTableData"  - 准备填充  4  行到 QTableWidget (vectordatahandler.cpp:492, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.163] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 7  -> 索引= 0 , 名称= "Label" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.163] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 8  -> 索引= 1 , 名称= "Instruction" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.164] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 9  -> 索引= 2 , 名称= "TimeSet" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.165] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 10  -> 索引= 3 , 名称= "Capture" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.165] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 11  -> 索引= 4 , 名称= "Ext" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.165] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 12  -> 索引= 5 , 名称= "Comment" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.166] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 13  -> 索引= 6 , 名称= "A" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.167] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 14  -> 索引= 7 , 名称= "B" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.167] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 15  -> 索引= 8 , 名称= "C" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.168] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 0  ( "Label" ) -> 原始列 0  ( "Label" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.168] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 0  ( "Label" ) 从原始列 0 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.169] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 0  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.169] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 1  ( "Instruction" ) -> 原始列 1  ( "Instruction" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.170] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 1  ( "Instruction" ) 从原始列 1 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.173] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 1  设置指令为: "INC" (ID: 1 ) (vectordatahandler.cpp:610, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.173] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 2  ( "TimeSet" ) -> 原始列 2  ( "TimeSet" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.174] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 2  ( "TimeSet" ) 从原始列 2 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.175] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 2  设置TimeSet为: "timeset_1" (ID: 1 ) (vectordatahandler.cpp:637, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.176] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 3  ( "Capture" ) -> 原始列 3  ( "Capture" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.176] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 3  ( "Capture" ) 从原始列 3 获取值: QVariant(QString, "N") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.177] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 3  设置为: "N" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.178] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 4  ( "Ext" ) -> 原始列 4  ( "Ext" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.178] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 4  ( "Ext" ) 从原始列 4 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.179] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 4  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.180] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 5  ( "Comment" ) -> 原始列 5  ( "Comment" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.180] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 5  ( "Comment" ) 从原始列 5 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.180] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 5  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.181] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 6  ( "A" ) -> 原始列 6  ( "A" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.181] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 6  ( "A" ) 从原始列 6 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.182] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 6  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.183] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 7  ( "B" ) -> 原始列 7  ( "B" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.184] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 7  ( "B" ) 从原始列 7 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.184] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 7  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.185] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 8  ( "C" ) -> 原始列 8  ( "C" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.186] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 8  ( "C" ) 从原始列 8 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.186] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 8  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.188] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 0  ( "Label" ) -> 原始列 0  ( "Label" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.189] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 0  ( "Label" ) 从原始列 0 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.190] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 0  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.191] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 1  ( "Instruction" ) -> 原始列 1  ( "Instruction" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.191] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 1  ( "Instruction" ) 从原始列 1 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.192] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 1  设置指令为: "INC" (ID: 1 ) (vectordatahandler.cpp:610, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.194] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 2  ( "TimeSet" ) -> 原始列 2  ( "TimeSet" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.194] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 2  ( "TimeSet" ) 从原始列 2 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.195] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 2  设置TimeSet为: "timeset_1" (ID: 1 ) (vectordatahandler.cpp:637, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.195] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 3  ( "Capture" ) -> 原始列 3  ( "Capture" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.196] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 3  ( "Capture" ) 从原始列 3 获取值: QVariant(QString, "N") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.196] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 3  设置为: "N" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.197] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 4  ( "Ext" ) -> 原始列 4  ( "Ext" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.197] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 4  ( "Ext" ) 从原始列 4 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.198] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 4  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.198] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 5  ( "Comment" ) -> 原始列 5  ( "Comment" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.199] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 5  ( "Comment" ) 从原始列 5 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.199] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 5  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.200] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 6  ( "A" ) -> 原始列 6  ( "A" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.200] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 6  ( "A" ) 从原始列 6 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.201] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 6  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.202] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 7  ( "B" ) -> 原始列 7  ( "B" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.202] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 7  ( "B" ) 从原始列 7 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.203] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 7  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.204] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 8  ( "C" ) -> 原始列 8  ( "C" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.206] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 8  ( "C" ) 从原始列 8 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.207] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 8  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.208] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 0  ( "Label" ) -> 原始列 0  ( "Label" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.209] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 0  ( "Label" ) 从原始列 0 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.209] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 0  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.209] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 1  ( "Instruction" ) -> 原始列 1  ( "Instruction" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.210] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 1  ( "Instruction" ) 从原始列 1 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.211] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 1  设置指令为: "INC" (ID: 1 ) (vectordatahandler.cpp:610, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.211] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 2  ( "TimeSet" ) -> 原始列 2  ( "TimeSet" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.212] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 2  ( "TimeSet" ) 从原始列 2 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.213] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 2  设置TimeSet为: "timeset_1" (ID: 1 ) (vectordatahandler.cpp:637, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.214] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 3  ( "Capture" ) -> 原始列 3  ( "Capture" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.214] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 3  ( "Capture" ) 从原始列 3 获取值: QVariant(QString, "N") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.215] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 3  设置为: "N" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.215] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 4  ( "Ext" ) -> 原始列 4  ( "Ext" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.215] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 4  ( "Ext" ) 从原始列 4 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.216] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 4  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.216] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 5  ( "Comment" ) -> 原始列 5  ( "Comment" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.217] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 5  ( "Comment" ) 从原始列 5 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.217] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 5  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.218] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 6  ( "A" ) -> 原始列 6  ( "A" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.218] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 6  ( "A" ) 从原始列 6 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.219] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 6  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.220] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 7  ( "B" ) -> 原始列 7  ( "B" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.220] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 7  ( "B" ) 从原始列 7 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.223] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 7  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.224] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 8  ( "C" ) -> 原始列 8  ( "C" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.224] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 8  ( "C" ) 从原始列 8 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.226] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 8  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.227] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 0  ( "Label" ) -> 原始列 0  ( "Label" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.227] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 0  ( "Label" ) 从原始列 0 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.228] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 0  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.228] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 1  ( "Instruction" ) -> 原始列 1  ( "Instruction" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.229] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 1  ( "Instruction" ) 从原始列 1 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.229] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 1  设置指令为: "INC" (ID: 1 ) (vectordatahandler.cpp:610, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.230] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 2  ( "TimeSet" ) -> 原始列 2  ( "TimeSet" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.230] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 2  ( "TimeSet" ) 从原始列 2 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.231] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 2  设置TimeSet为: "timeset_1" (ID: 1 ) (vectordatahandler.cpp:637, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.231] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 3  ( "Capture" ) -> 原始列 3  ( "Capture" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.232] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 3  ( "Capture" ) 从原始列 3 获取值: QVariant(QString, "N") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.232] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 3  设置为: "N" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.232] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 4  ( "Ext" ) -> 原始列 4  ( "Ext" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.233] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 4  ( "Ext" ) 从原始列 4 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.233] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 4  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.234] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 5  ( "Comment" ) -> 原始列 5  ( "Comment" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.234] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 5  ( "Comment" ) 从原始列 5 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.235] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 5  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.235] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 6  ( "A" ) -> 原始列 6  ( "A" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.235] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 6  ( "A" ) 从原始列 6 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.236] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 6  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.237] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 7  ( "B" ) -> 原始列 7  ( "B" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.239] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 7  ( "B" ) 从原始列 7 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.241] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 7  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.242] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 8  ( "C" ) -> 原始列 8  ( "C" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.242] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 8  ( "C" ) 从原始列 8 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.243] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 8  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.244] [Debug] "VectorDataHandler::loadVectorTableData"  - 表格填充完成, 总行数: 4 , 总列数: 9 (vectordatahandler.cpp:681, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:45.244] [Debug] "MainWindow::onVectorTableSelectionChanged"  - VectorDataHandler::loadVectorTableData 返回: true ，表ID: 1 ，列数: 9 (mainwindow.cpp:780, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:45.245] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 表格加载成功，列数: 9 (mainwindow.cpp:786, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:45.246] [Debug] "TableStyleManager::applyTableStyle(QTableWidget*)"  - Entry (tablestylemanager.cpp:10, static void TableStyleManager::applyTableStyle(QTableWidget*))
[2025-05-20 11:20:45.247] [Debug] "TableStyleManager::applyTableStyle(QTableWidget*)"  - 开始设置表格样式 (tablestylemanager.cpp:18, static void TableStyleManager::applyTableStyle(QTableWidget*))
[2025-05-20 11:20:45.252] [Debug] TableStyleManager::setRowHeight - 设置表格行高为 28 像素 (tablestylemanager.cpp:218, static void TableStyleManager::setRowHeight(QTableWidget*, int))
[2025-05-20 11:20:45.253] [Debug] TableStyleManager::setColumnAlignments - 开始设置表格列对齐方式 (tablestylemanager.cpp:119, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:20:45.253] [Debug] TableStyleManager::setColumnAlignment - 设置列 0 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.253] [Debug] TableStyleManager::setColumnAlignment - 设置列 1 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.256] [Debug] TableStyleManager::setColumnAlignment - 设置列 2 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.260] [Debug] TableStyleManager::setColumnAlignment - 设置列 3 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.260] [Debug] TableStyleManager::setColumnAlignment - 设置列 4 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.261] [Debug] TableStyleManager::setColumnAlignment - 设置列 5 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.261] [Debug] TableStyleManager::setColumnAlignment - 设置列 6 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.262] [Debug] TableStyleManager::setColumnAlignments - 设置管脚列 6 居中对齐 (tablestylemanager.cpp:138, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:20:45.262] [Debug] TableStyleManager::setColumnAlignment - 设置列 7 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.263] [Debug] TableStyleManager::setColumnAlignments - 设置管脚列 7 居中对齐 (tablestylemanager.cpp:138, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:20:45.263] [Debug] TableStyleManager::setColumnAlignment - 设置列 8 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:45.264] [Debug] TableStyleManager::setColumnAlignments - 设置管脚列 8 居中对齐 (tablestylemanager.cpp:138, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:20:45.264] [Debug] TableStyleManager::setColumnAlignments - 列对齐方式设置完成 (tablestylemanager.cpp:179, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:20:45.264] [Debug] "TableStyleManager::setPinColumnWidths"  - 开始设置管脚列的列宽 (tablestylemanager.cpp:259, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.265] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 6 "A\nx1\nInOut" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.265] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 7 "B\nx1\nIn" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.266] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 8 "C\nx1\nIn" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.266] [Debug] "TableStyleManager::setPinColumnWidths"  - 每个管脚列分配宽度:  274 , 管脚列数:  3 , 可用总宽度:  824 (tablestylemanager.cpp:359, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.266] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  6  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.267] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  7  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.267] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  8  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.268] [Debug] "TableStyleManager::setPinColumnWidths"  - 管脚列宽度设置完成 (tablestylemanager.cpp:371, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.268] [Debug] TableStyleManager::refreshTable - 刷新表格显示 (tablestylemanager.cpp:238, static void TableStyleManager::refreshTable(QTableWidget*))
[2025-05-20 11:20:45.268] [Debug] "TableStyleManager::applyTableStyle(QTableWidget*)"  - 表格样式设置完成 (tablestylemanager.cpp:59, static void TableStyleManager::applyTableStyle(QTableWidget*))
[2025-05-20 11:20:45.269] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 表头列表: "Label, Instruction, TimeSet, Capture, Ext, Comment, A\nx1\nInOut, B\nx1\nIn, C\nx1\nIn" (mainwindow.cpp:826, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:20:45.269] [Debug] MainWindow::addVectorTableTab - 添加向量表Tab页签: "1" (mainwindow.cpp:935, void MainWindow::addVectorTableTab(int, const QString&))
[2025-05-20 11:20:45.272] [Debug] MainWindow::loadVectorTable - 找到向量表: "1" ID: 1 (mainwindow.cpp:711, void MainWindow::loadVectorTable())
[2025-05-20 11:20:45.273] [Debug] MainWindow::loadVectorTable - 总共找到 1 个向量表 (mainwindow.cpp:714, void MainWindow::loadVectorTable())
[2025-05-20 11:20:45.274] [Debug] MainWindow::loadVectorTable - 有向量表，显示向量表窗口 (mainwindow.cpp:724, void MainWindow::loadVectorTable())
[2025-05-20 11:20:45.293] [Debug] "TableStyleManager::setPinColumnWidths"  - 开始设置管脚列的列宽 (tablestylemanager.cpp:259, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.294] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 6 "A\nx1\nInOut" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.295] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 7 "B\nx1\nIn" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.295] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 8 "C\nx1\nIn" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.296] [Debug] "TableStyleManager::setPinColumnWidths"  - 每个管脚列分配宽度:  274 , 管脚列数:  3 , 可用总宽度:  824 (tablestylemanager.cpp:359, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.296] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  6  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.297] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  7  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.297] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  8  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.297] [Debug] "TableStyleManager::setPinColumnWidths"  - 管脚列宽度设置完成 (tablestylemanager.cpp:371, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.298] [Debug] MainWindow - 再次确保表头项居中对齐: 0 , "Label" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:45.298] [Debug] MainWindow - 再次确保表头项居中对齐: 1 , "Instruction" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:45.299] [Debug] MainWindow - 再次确保表头项居中对齐: 2 , "TimeSet" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:45.299] [Debug] MainWindow - 再次确保表头项居中对齐: 3 , "Capture" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:45.300] [Debug] MainWindow - 再次确保表头项居中对齐: 4 , "Ext" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:45.301] [Debug] MainWindow - 再次确保表头项居中对齐: 5 , "Comment" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:45.301] [Debug] MainWindow - 再次确保表头项居中对齐: 6 , "A\nx1\nInOut" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:45.301] [Debug] MainWindow - 再次确保表头项居中对齐: 7 , "B\nx1\nIn" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:45.302] [Debug] MainWindow - 再次确保表头项居中对齐: 8 , "C\nx1\nIn" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:45.303] [Debug] "TableStyleManager::setPinColumnWidths"  - 开始设置管脚列的列宽 (tablestylemanager.cpp:259, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.309] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 6 "A\nx1\nInOut" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.311] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 7 "B\nx1\nIn" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.311] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 8 "C\nx1\nIn" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.311] [Debug] "TableStyleManager::setPinColumnWidths"  - 每个管脚列分配宽度:  274 , 管脚列数:  3 , 可用总宽度:  824 (tablestylemanager.cpp:359, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.312] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  6  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.312] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  7  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.313] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  8  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.314] [Debug] "TableStyleManager::setPinColumnWidths"  - 管脚列宽度设置完成 (tablestylemanager.cpp:371, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:45.314] [Debug] MainWindow - 再次确保表头项居中对齐: 0 , "Label" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:45.315] [Debug] MainWindow - 再次确保表头项居中对齐: 1 , "Instruction" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:45.316] [Debug] MainWindow - 再次确保表头项居中对齐: 2 , "TimeSet" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:45.316] [Debug] MainWindow - 再次确保表头项居中对齐: 3 , "Capture" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:45.317] [Debug] MainWindow - 再次确保表头项居中对齐: 4 , "Ext" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:45.317] [Debug] MainWindow - 再次确保表头项居中对齐: 5 , "Comment" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:45.318] [Debug] MainWindow - 再次确保表头项居中对齐: 6 , "A\nx1\nInOut" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:45.318] [Debug] MainWindow - 再次确保表头项居中对齐: 7 , "B\nx1\nIn" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:45.318] [Debug] MainWindow - 再次确保表头项居中对齐: 8 , "C\nx1\nIn" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:20:47.670] [Debug] [Debug] VectorTableItemDelegate::createEditor - Function entry. Attempting to create editor for cell at row: 2 column: 2 (vectortabledelegate.cpp:37, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:47.673] [Debug] [Debug] VectorTableItemDelegate::createEditor - Calling getTableIdForCurrentTable() for column: 2 (vectortabledelegate.cpp:42, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:47.673] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Function entry. (vectortabledelegate.cpp:187, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:47.676] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Function entry. (vectortabledelegate.cpp:278, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:47.680] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Successfully got QMainWindow. Attempting to find child QComboBox 'm_vectorTableSelector'. (vectortabledelegate.cpp:285, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:47.682] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Found 'm_vectorTableSelector'. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:301, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:47.683] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Successfully got vectorTableSelector. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:194, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:47.683] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Current index of vectorTableSelector: 0 (vectortabledelegate.cpp:197, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:47.689] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Item data for current index: QVariant(int, 1) (vectortabledelegate.cpp:205, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:47.691] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Returning tableId: 1 (vectortabledelegate.cpp:213, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:47.693] [Debug] [Debug] VectorTableItemDelegate::createEditor - Received tableId: 1 (vectortabledelegate.cpp:44, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:47.695] [Debug] [Debug] VectorTableItemDelegate::createEditor - Calling getColumnInfoByIndex() for tableId: 1 and uiColumnIndex: 2 (vectortabledelegate.cpp:52, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:47.698] [Debug] [Debug] VectorTableItemDelegate::createEditor - Received ColumnInfo - Name: "TimeSet" Type String: "TIMESET_ID" Resolved Type Enum: 4 Order: 2 (vectortabledelegate.cpp:54, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:47.700] [Debug] [Debug] VectorTableItemDelegate::createEditor - Detected TIMESET_ID type for column: 2 . Creating QComboBox. (vectortabledelegate.cpp:68, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:47.703] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Function entry. (vectortabledelegate.cpp:187, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:47.707] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Function entry. (vectortabledelegate.cpp:278, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:47.708] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Successfully got QMainWindow. Attempting to find child QComboBox 'm_vectorTableSelector'. (vectortabledelegate.cpp:285, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:47.708] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Found 'm_vectorTableSelector'. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:301, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:47.708] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Successfully got vectorTableSelector. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:194, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:47.708] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Current index of vectorTableSelector: 0 (vectortabledelegate.cpp:197, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:47.708] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Item data for current index: QVariant(int, 1) (vectortabledelegate.cpp:205, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:47.708] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Returning tableId: 1 (vectortabledelegate.cpp:213, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.090] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Function entry. (vectortabledelegate.cpp:187, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.092] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Function entry. (vectortabledelegate.cpp:278, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:48.093] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Successfully got QMainWindow. Attempting to find child QComboBox 'm_vectorTableSelector'. (vectortabledelegate.cpp:285, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:48.095] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Found 'm_vectorTableSelector'. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:301, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:48.096] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Successfully got vectorTableSelector. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:194, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.097] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Current index of vectorTableSelector: 0 (vectortabledelegate.cpp:197, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.098] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Item data for current index: QVariant(int, 1) (vectortabledelegate.cpp:205, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.099] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Returning tableId: 1 (vectortabledelegate.cpp:213, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.101] [Debug] VectorTableDelegate::setModelData - 设置TimeSet列值: "timeset_1" (vectortabledelegate.cpp:155, virtual void VectorTableItemDelegate::setModelData(QWidget*, QAbstractItemModel*, const QModelIndex&) const)
[2025-05-20 11:20:48.593] [Debug] [Debug] VectorTableItemDelegate::createEditor - Function entry. Attempting to create editor for cell at row: 2 column: 2 (vectortabledelegate.cpp:37, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:48.595] [Debug] [Debug] VectorTableItemDelegate::createEditor - Calling getTableIdForCurrentTable() for column: 2 (vectortabledelegate.cpp:42, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:48.596] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Function entry. (vectortabledelegate.cpp:187, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.598] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Function entry. (vectortabledelegate.cpp:278, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:48.599] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Successfully got QMainWindow. Attempting to find child QComboBox 'm_vectorTableSelector'. (vectortabledelegate.cpp:285, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:48.600] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Found 'm_vectorTableSelector'. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:301, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:48.602] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Successfully got vectorTableSelector. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:194, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.605] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Current index of vectorTableSelector: 0 (vectortabledelegate.cpp:197, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.607] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Item data for current index: QVariant(int, 1) (vectortabledelegate.cpp:205, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.608] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Returning tableId: 1 (vectortabledelegate.cpp:213, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.609] [Debug] [Debug] VectorTableItemDelegate::createEditor - Received tableId: 1 (vectortabledelegate.cpp:44, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:48.611] [Debug] [Debug] VectorTableItemDelegate::createEditor - Calling getColumnInfoByIndex() for tableId: 1 and uiColumnIndex: 2 (vectortabledelegate.cpp:52, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:48.612] [Debug] [Debug] VectorTableItemDelegate::createEditor - Received ColumnInfo - Name: "TimeSet" Type String: "TIMESET_ID" Resolved Type Enum: 4 Order: 2 (vectortabledelegate.cpp:54, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:48.612] [Debug] [Debug] VectorTableItemDelegate::createEditor - Detected TIMESET_ID type for column: 2 . Creating QComboBox. (vectortabledelegate.cpp:68, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:48.620] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Function entry. (vectortabledelegate.cpp:187, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.625] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Function entry. (vectortabledelegate.cpp:278, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:48.626] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Successfully got QMainWindow. Attempting to find child QComboBox 'm_vectorTableSelector'. (vectortabledelegate.cpp:285, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:48.628] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Found 'm_vectorTableSelector'. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:301, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:48.630] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Successfully got vectorTableSelector. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:194, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.631] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Current index of vectorTableSelector: 0 (vectortabledelegate.cpp:197, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.632] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Item data for current index: QVariant(int, 1) (vectortabledelegate.cpp:205, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.632] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Returning tableId: 1 (vectortabledelegate.cpp:213, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.923] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Function entry. (vectortabledelegate.cpp:187, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.924] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Function entry. (vectortabledelegate.cpp:278, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:48.927] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Successfully got QMainWindow. Attempting to find child QComboBox 'm_vectorTableSelector'. (vectortabledelegate.cpp:285, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:48.927] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Found 'm_vectorTableSelector'. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:301, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:48.927] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Successfully got vectorTableSelector. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:194, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.932] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Current index of vectorTableSelector: 0 (vectortabledelegate.cpp:197, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.933] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Item data for current index: QVariant(int, 1) (vectortabledelegate.cpp:205, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.935] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Returning tableId: 1 (vectortabledelegate.cpp:213, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:48.939] [Debug] VectorTableDelegate::setModelData - 设置TimeSet列值: "timeset_1" (vectortabledelegate.cpp:155, virtual void VectorTableItemDelegate::setModelData(QWidget*, QAbstractItemModel*, const QModelIndex&) const)
[2025-05-20 11:20:49.238] [Debug] [Debug] VectorTableItemDelegate::createEditor - Function entry. Attempting to create editor for cell at row: 2 column: 2 (vectortabledelegate.cpp:37, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:49.238] [Debug] [Debug] VectorTableItemDelegate::createEditor - Calling getTableIdForCurrentTable() for column: 2 (vectortabledelegate.cpp:42, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:49.238] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Function entry. (vectortabledelegate.cpp:187, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:49.255] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Function entry. (vectortabledelegate.cpp:278, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:49.257] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Successfully got QMainWindow. Attempting to find child QComboBox 'm_vectorTableSelector'. (vectortabledelegate.cpp:285, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:49.259] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Found 'm_vectorTableSelector'. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:301, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:49.261] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Successfully got vectorTableSelector. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:194, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:49.262] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Current index of vectorTableSelector: 0 (vectortabledelegate.cpp:197, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:49.263] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Item data for current index: QVariant(int, 1) (vectortabledelegate.cpp:205, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:49.264] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Returning tableId: 1 (vectortabledelegate.cpp:213, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:49.267] [Debug] [Debug] VectorTableItemDelegate::createEditor - Received tableId: 1 (vectortabledelegate.cpp:44, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:49.268] [Debug] [Debug] VectorTableItemDelegate::createEditor - Calling getColumnInfoByIndex() for tableId: 1 and uiColumnIndex: 2 (vectortabledelegate.cpp:52, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:49.273] [Debug] [Debug] VectorTableItemDelegate::createEditor - Received ColumnInfo - Name: "TimeSet" Type String: "TIMESET_ID" Resolved Type Enum: 4 Order: 2 (vectortabledelegate.cpp:54, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:49.275] [Debug] [Debug] VectorTableItemDelegate::createEditor - Detected TIMESET_ID type for column: 2 . Creating QComboBox. (vectortabledelegate.cpp:68, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:49.275] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Function entry. (vectortabledelegate.cpp:187, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:49.275] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Function entry. (vectortabledelegate.cpp:278, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:49.275] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Successfully got QMainWindow. Attempting to find child QComboBox 'm_vectorTableSelector'. (vectortabledelegate.cpp:285, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:49.275] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Found 'm_vectorTableSelector'. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:301, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:49.275] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Successfully got vectorTableSelector. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:194, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:49.275] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Current index of vectorTableSelector: 0 (vectortabledelegate.cpp:197, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:49.275] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Item data for current index: QVariant(int, 1) (vectortabledelegate.cpp:205, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:49.275] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Returning tableId: 1 (vectortabledelegate.cpp:213, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.422] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Function entry. (vectortabledelegate.cpp:187, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.422] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Function entry. (vectortabledelegate.cpp:278, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:51.436] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Successfully got QMainWindow. Attempting to find child QComboBox 'm_vectorTableSelector'. (vectortabledelegate.cpp:285, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:51.440] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Found 'm_vectorTableSelector'. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:301, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:51.443] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Successfully got vectorTableSelector. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:194, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.446] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Current index of vectorTableSelector: 0 (vectortabledelegate.cpp:197, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.448] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Item data for current index: QVariant(int, 1) (vectortabledelegate.cpp:205, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.451] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Returning tableId: 1 (vectortabledelegate.cpp:213, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.457] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Function entry. (vectortabledelegate.cpp:187, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.458] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Function entry. (vectortabledelegate.cpp:278, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:51.461] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Successfully got QMainWindow. Attempting to find child QComboBox 'm_vectorTableSelector'. (vectortabledelegate.cpp:285, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:51.461] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Found 'm_vectorTableSelector'. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:301, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:51.461] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Successfully got vectorTableSelector. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:194, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.461] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Current index of vectorTableSelector: 0 (vectortabledelegate.cpp:197, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.461] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Item data for current index: QVariant(int, 1) (vectortabledelegate.cpp:205, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.461] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Returning tableId: 1 (vectortabledelegate.cpp:213, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.461] [Debug] VectorTableDelegate::setModelData - 设置TimeSet列值: "timeset_2" (vectortabledelegate.cpp:155, virtual void VectorTableItemDelegate::setModelData(QWidget*, QAbstractItemModel*, const QModelIndex&) const)
[2025-05-20 11:20:51.575] [Debug] [Debug] VectorTableItemDelegate::createEditor - Function entry. Attempting to create editor for cell at row: 3 column: 2 (vectortabledelegate.cpp:37, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:51.575] [Debug] [Debug] VectorTableItemDelegate::createEditor - Calling getTableIdForCurrentTable() for column: 2 (vectortabledelegate.cpp:42, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:51.575] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Function entry. (vectortabledelegate.cpp:187, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.575] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Function entry. (vectortabledelegate.cpp:278, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:51.575] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Successfully got QMainWindow. Attempting to find child QComboBox 'm_vectorTableSelector'. (vectortabledelegate.cpp:285, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:51.575] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Found 'm_vectorTableSelector'. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:301, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:51.575] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Successfully got vectorTableSelector. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:194, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.575] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Current index of vectorTableSelector: 0 (vectortabledelegate.cpp:197, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.575] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Item data for current index: QVariant(int, 1) (vectortabledelegate.cpp:205, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.575] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Returning tableId: 1 (vectortabledelegate.cpp:213, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.575] [Debug] [Debug] VectorTableItemDelegate::createEditor - Received tableId: 1 (vectortabledelegate.cpp:44, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:51.575] [Debug] [Debug] VectorTableItemDelegate::createEditor - Calling getColumnInfoByIndex() for tableId: 1 and uiColumnIndex: 2 (vectortabledelegate.cpp:52, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:51.575] [Debug] [Debug] VectorTableItemDelegate::createEditor - Received ColumnInfo - Name: "TimeSet" Type String: "TIMESET_ID" Resolved Type Enum: 4 Order: 2 (vectortabledelegate.cpp:54, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:51.575] [Debug] [Debug] VectorTableItemDelegate::createEditor - Detected TIMESET_ID type for column: 2 . Creating QComboBox. (vectortabledelegate.cpp:68, virtual QWidget* VectorTableItemDelegate::createEditor(QWidget*, const QStyleOptionViewItem&, const QModelIndex&) const)
[2025-05-20 11:20:51.575] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Function entry. (vectortabledelegate.cpp:187, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.585] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Function entry. (vectortabledelegate.cpp:278, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:51.587] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Successfully got QMainWindow. Attempting to find child QComboBox 'm_vectorTableSelector'. (vectortabledelegate.cpp:285, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:51.588] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Found 'm_vectorTableSelector'. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:301, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:51.589] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Successfully got vectorTableSelector. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:194, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.590] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Current index of vectorTableSelector: 0 (vectortabledelegate.cpp:197, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.591] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Item data for current index: QVariant(int, 1) (vectortabledelegate.cpp:205, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:51.592] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Returning tableId: 1 (vectortabledelegate.cpp:213, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:53.592] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Function entry. (vectortabledelegate.cpp:187, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:53.594] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Function entry. (vectortabledelegate.cpp:278, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:53.596] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Successfully got QMainWindow. Attempting to find child QComboBox 'm_vectorTableSelector'. (vectortabledelegate.cpp:285, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:53.597] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Found 'm_vectorTableSelector'. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:301, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:53.598] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Successfully got vectorTableSelector. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:194, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:53.600] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Current index of vectorTableSelector: 0 (vectortabledelegate.cpp:197, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:53.601] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Item data for current index: QVariant(int, 1) (vectortabledelegate.cpp:205, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:53.604] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Returning tableId: 1 (vectortabledelegate.cpp:213, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:53.606] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Function entry. (vectortabledelegate.cpp:187, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:53.608] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Function entry. (vectortabledelegate.cpp:278, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:53.609] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Successfully got QMainWindow. Attempting to find child QComboBox 'm_vectorTableSelector'. (vectortabledelegate.cpp:285, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:53.611] [Debug] [Debug] VectorTableItemDelegate::getVectorTableSelectorPtr - Found 'm_vectorTableSelector'. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:301, QObject* VectorTableItemDelegate::getVectorTableSelectorPtr() const)
[2025-05-20 11:20:53.611] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Successfully got vectorTableSelector. ObjectName: "m_vectorTableSelector" (vectortabledelegate.cpp:194, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:53.612] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Current index of vectorTableSelector: 0 (vectortabledelegate.cpp:197, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:53.612] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Item data for current index: QVariant(int, 1) (vectortabledelegate.cpp:205, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:53.613] [Debug] [Debug] VectorTableItemDelegate::getTableIdForCurrentTable - Returning tableId: 1 (vectortabledelegate.cpp:213, int VectorTableItemDelegate::getTableIdForCurrentTable() const)
[2025-05-20 11:20:53.615] [Debug] VectorTableDelegate::setModelData - 设置TimeSet列值: "timeset_3" (vectortabledelegate.cpp:155, virtual void VectorTableItemDelegate::setModelData(QWidget*, QAbstractItemModel*, const QModelIndex&) const)
[2025-05-20 11:20:53.664] [Debug] "MainWindow::saveVectorTableData"  - 开始保存数据 (mainwindow.cpp:948, void MainWindow::saveVectorTableData())
[2025-05-20 11:20:53.664] [Debug] "MainWindow::saveVectorTableData"  - 未找到当前Tab页中的TableWidget, 回退到 m_vectorTableWidget (mainwindow.cpp:977, void MainWindow::saveVectorTableData())
[2025-05-20 11:20:53.665] [Debug] "MainWindow::saveVectorTableData"  - 目标表格控件已确定。 (mainwindow.cpp:986, void MainWindow::saveVectorTableData())
[2025-05-20 11:20:53.666] [Debug] "VectorDataHandler::saveVectorTableData"  - 开始保存, 表ID: 1 (vectordatahandler.cpp:711, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.667] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.667] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 4 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.668] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.672] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 7
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.673] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.675] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 8
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.677] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.677] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 9
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.679] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.679] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 10
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.680] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Ext"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.681] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 11
  VectorTableID: 1
  Name: "Ext"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.682] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.682] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 12
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.683] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"A"', Input: '"{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":3}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.684] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 13
  VectorTableID: 1
  Name: "A"
  Order: 6
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":1,"type_id":3}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.685] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"B"', Input: '"{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.686] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 14
  VectorTableID: 1
  Name: "B"
  Order: 7
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":2,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.689] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"C"', Input: '"{\"channel_count\":1,\"pin_list_id\":3,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.690] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 15
  VectorTableID: 1
  Name: "C"
  Order: 8
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":3,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.691] [Debug] "VectorDataHandler::saveVectorTableData"  - 可见列元数据加载成功, 列数: 9 , Schema版本: 1 (vectordatahandler.cpp:738, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.693] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 7 , 名称= "Label" , 顺序= 0 , 可见= true , 类型= "TEXT" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.694] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 8 , 名称= "Instruction" , 顺序= 1 , 可见= true , 类型= "INSTRUCTION_ID" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.695] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 9 , 名称= "TimeSet" , 顺序= 2 , 可见= true , 类型= "TIMESET_ID" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.696] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 10 , 名称= "Capture" , 顺序= 3 , 可见= true , 类型= "TEXT" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.696] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 11 , 名称= "Ext" , 顺序= 4 , 可见= true , 类型= "TEXT" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.697] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 12 , 名称= "Comment" , 顺序= 5 , 可见= true , 类型= "TEXT" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.697] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 13 , 名称= "A" , 顺序= 6 , 可见= true , 类型= "PIN_STATE_ID" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.698] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 14 , 名称= "B" , 顺序= 7 , 可见= true , 类型= "PIN_STATE_ID" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.698] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 15 , 名称= "C" , 顺序= 8 , 可见= true , 类型= "PIN_STATE_ID" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.699] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 7  -> 索引= 0 , 名称= "Label" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.700] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 8  -> 索引= 1 , 名称= "Instruction" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.701] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 9  -> 索引= 2 , 名称= "TimeSet" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.701] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 10  -> 索引= 3 , 名称= "Capture" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.702] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 11  -> 索引= 4 , 名称= "Ext" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.703] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 12  -> 索引= 5 , 名称= "Comment" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.705] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 13  -> 索引= 6 , 名称= "A" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.705] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 14  -> 索引= 7 , 名称= "B" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.706] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 15  -> 索引= 8 , 名称= "C" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.707] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 开始解析表ID的二进制文件路径: 1 (vectordatahandler.cpp:207, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:20:53.707] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.708] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 4 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.709] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.710] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 7
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.711] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.712] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 8
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.714] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.716] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 9
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.718] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.719] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 10
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.721] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Ext"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.722] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 11
  VectorTableID: 1
  Name: "Ext"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.724] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.724] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 12
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.726] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"A"', Input: '"{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":3}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.726] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 13
  VectorTableID: 1
  Name: "A"
  Order: 6
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":1,"type_id":3}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.727] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"B"', Input: '"{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.729] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 14
  VectorTableID: 1
  Name: "B"
  Order: 7
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":2,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.730] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"C"', Input: '"{\"channel_count\":1,\"pin_list_id\":3,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:53.730] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 15
  VectorTableID: 1
  Name: "C"
  Order: 8
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":3,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:53.732] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 输入数据库路径: "C:/Users/GIGA/Documents/TEST134.db" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:29, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:20:53.732] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 生成的项目二进制数据目录： "C:\\Users\\GIGA\\Documents\\TEST134_vbindata" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:50, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:20:53.733] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 解析得到的绝对路径:  "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata"  (DB:  "C:/Users/GIGA/Documents/TEST134.db" , File:  "table_1_data.vbindata" ) (vectordatahandler.cpp:276, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:20:53.733] [Debug] "VectorDataHandler::saveVectorTableData"  - 表格列数: 9 , 数据库可见列数: 9 , 数据库总列数: 9 (vectordatahandler.cpp:816, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.734] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 0 , 原始表头: "Label" , 简化后: "Label" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.734] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 0 ( "Label" ) -> 数据库可见列 0 ( "Label" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.740] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 1 , 原始表头: "Instruction" , 简化后: "Instruction" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.740] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 1 ( "Instruction" ) -> 数据库可见列 1 ( "Instruction" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.741] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 2 , 原始表头: "TimeSet" , 简化后: "TimeSet" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.741] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 2 ( "TimeSet" ) -> 数据库可见列 2 ( "TimeSet" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.742] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 3 , 原始表头: "Capture" , 简化后: "Capture" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.743] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 3 ( "Capture" ) -> 数据库可见列 3 ( "Capture" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.743] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 4 , 原始表头: "Ext" , 简化后: "Ext" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.745] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 4 ( "Ext" ) -> 数据库可见列 4 ( "Ext" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.745] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 5 , 原始表头: "Comment" , 简化后: "Comment" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.746] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 5 ( "Comment" ) -> 数据库可见列 5 ( "Comment" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.746] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 6 , 原始表头: "A\nx1\nInOut" , 简化后: "A" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.746] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 6 ( "A\nx1\nInOut" ) -> 数据库可见列 6 ( "A" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.747] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 7 , 原始表头: "B\nx1\nIn" , 简化后: "B" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.747] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 7 ( "B\nx1\nIn" ) -> 数据库可见列 7 ( "B" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.748] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 8 , 原始表头: "C\nx1\nIn" , 简化后: "C" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.748] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 8 ( "C\nx1\nIn" ) -> 数据库可见列 8 ( "C" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.749] [Debug] "VectorDataHandler::saveVectorTableData"  - 从 QTableWidget (行: 4 , 列: 9 ) 收集数据 (vectordatahandler.cpp:865, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.749] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "CALL"  -> ID: 2 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.750] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "CLEAR_MATCH"  -> ID: 3 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.751] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "END_LOOPA"  -> ID: 4 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.751] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "IF_MATCH_JUMP"  -> ID: 5 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.754] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "IF_NOTMATCH_JUMP"  -> ID: 6 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.754] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "INC"  -> ID: 1 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.755] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "JUMP"  -> ID: 7 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.762] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "MATCH_END"  -> ID: 8 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.763] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "MATCH_START"  -> ID: 9 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.763] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "MJUMP"  -> ID: 10 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.764] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "REPEAT"  -> ID: 11 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.764] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "RETURN"  -> ID: 12 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.765] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "SET_LOOPA"  -> ID: 13 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.765] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "SET_MATCH"  -> ID: 14 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.766] [Debug] "VectorDataHandler::saveVectorTableData"  - TimeSet映射:  "timeset_1"  -> ID: 1 (vectordatahandler.cpp:897, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.767] [Debug] "VectorDataHandler::saveVectorTableData"  - TimeSet映射:  "timeset_2"  -> ID: 2 (vectordatahandler.cpp:897, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.767] [Debug] "VectorDataHandler::saveVectorTableData"  - TimeSet映射:  "timeset_3"  -> ID: 3 (vectordatahandler.cpp:897, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.768] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 0  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.771] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 1  指令:  "INC"  -> ID: 1 (vectordatahandler.cpp:977, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.772] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 2  TimeSet:  "timeset_1"  -> ID: 1 (vectordatahandler.cpp:992, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.773] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 3  值:  "N" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.773] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 4  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.774] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 5  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.774] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 6  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.775] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 7  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.776] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 8  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.776] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 0  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.777] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 1  指令:  "INC"  -> ID: 1 (vectordatahandler.cpp:977, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.777] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 2  TimeSet:  "timeset_1"  -> ID: 1 (vectordatahandler.cpp:992, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.778] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 3  值:  "N" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.778] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 4  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.779] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 5  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.779] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 6  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.780] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 7  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.780] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 8  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.781] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 0  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.781] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 1  指令:  "INC"  -> ID: 1 (vectordatahandler.cpp:977, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.782] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 2  TimeSet:  "timeset_2"  -> ID: 2 (vectordatahandler.cpp:992, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.782] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 3  值:  "N" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.783] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 4  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.783] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 5  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.784] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 6  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.784] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 7  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.785] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 8  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.787] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 0  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.788] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 1  指令:  "INC"  -> ID: 1 (vectordatahandler.cpp:977, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.789] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 2  TimeSet:  "timeset_3"  -> ID: 3 (vectordatahandler.cpp:992, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.789] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 3  值:  "N" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.790] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 4  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.790] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 5  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.791] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 6  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.792] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 7  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.793] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 8  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.793] [Debug] "VectorDataHandler::saveVectorTableData"  - 准备写入数据到二进制文件:  "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata" (vectordatahandler.cpp:1019, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.794] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Entry. File path: "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata" DB Schema Version: 1 . Attempting to write 4 rows with 9 columns. (binaryfilehelper.cpp:593, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.795] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - 列信息详情: (binaryfilehelper.cpp:596, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.795] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 0 ]: ID= 7 , 名称= "Label" , 顺序= 0 , 类型= "TEXT" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.796] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 1 ]: ID= 8 , 名称= "Instruction" , 顺序= 1 , 类型= "INSTRUCTION_ID" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.796] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 2 ]: ID= 9 , 名称= "TimeSet" , 顺序= 2 , 类型= "TIMESET_ID" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.797] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 3 ]: ID= 10 , 名称= "Capture" , 顺序= 3 , 类型= "TEXT" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.797] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 4 ]: ID= 11 , 名称= "Ext" , 顺序= 4 , 类型= "TEXT" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.798] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 5 ]: ID= 12 , 名称= "Comment" , 顺序= 5 , 类型= "TEXT" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.798] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 6 ]: ID= 13 , 名称= "A" , 顺序= 6 , 类型= "PIN_STATE_ID" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.799] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 7 ]: ID= 14 , 名称= "B" , 顺序= 7 , 类型= "PIN_STATE_ID" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.800] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 8 ]: ID= 15 , 名称= "C" , 顺序= 8 , 类型= "PIN_STATE_ID" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.800] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Attempting to open file for writing (Truncate). (binaryfilehelper.cpp:607, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.801] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - File opened successfully. (binaryfilehelper.cpp:613, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.803] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Attempting to write binary header. (binaryfilehelper.cpp:629, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.805] [Debug] ["BinaryFileHelper::writeAllRowsToBinary - Header to Write"] BinaryFileHeader Details:
  Magic Number: 0x"5642494e"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 4
  Column Count: 9
  Created: 1747711253
  Updated: 1747711253
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:20:53.807] [Debug] "BinaryFileHelper::writeBinaryHeader" - Attempting to write binary file header. (binaryfilehelper.cpp:90, static bool Persistence::BinaryFileHelper::writeBinaryHeader(QIODevice*, const BinaryFileHeader&))
[2025-05-20 11:20:53.808] [Debug] ["BinaryFileHelper::writeBinaryHeader - Successfully Written Header"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 4
  Column Count: 9
  Created: 1747711253
  Updated: 1747711253
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:20:53.809] [Debug] "BinaryFileHelper::writeBinaryHeader"  - Binary file header written successfully. (binaryfilehelper.cpp:149, static bool Persistence::BinaryFileHelper::writeBinaryHeader(QIODevice*, const BinaryFileHeader&))
[2025-05-20 11:20:53.809] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Binary header written successfully. (binaryfilehelper.cpp:643, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.810] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Starting data serialization loop for 4 rows. (binaryfilehelper.cpp:654, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.811] [Debug] "BinaryFileHelper::serializeRow" - 开始序列化行数据, 列数:9, 数据项数:9 (binaryfilehelper.cpp:156, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.811] [Debug] "BinaryFileHelper::serializeRow" - 序列化第0列, 名称:"Label", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.812] [Debug] "BinaryFileHelper::serializeRow" - 序列化第1列, 名称:"Instruction", 类型:3, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.813] [Debug] "BinaryFileHelper::serializeRow" - 序列化第2列, 名称:"TimeSet", 类型:4, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.813] [Debug] "BinaryFileHelper::serializeRow" - 序列化第3列, 名称:"Capture", 类型:0, 值:QVariant(QString, "N") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.814] [Debug] "BinaryFileHelper::serializeRow" - 序列化第4列, 名称:"Ext", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.814] [Debug] "BinaryFileHelper::serializeRow" - 序列化第5列, 名称:"Comment", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.815] [Debug] "BinaryFileHelper::serializeRow" - 序列化第6列, 名称:"A", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.815] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "A" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.816] [Debug] "BinaryFileHelper::serializeRow" - 序列化第7列, 名称:"B", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.816] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "B" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.817] [Debug] "BinaryFileHelper::serializeRow" - 序列化第8列, 名称:"C", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.817] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "C" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.818] [Debug] "BinaryFileHelper::serializeRow"  - 序列化完成, 字节长度: 44 (binaryfilehelper.cpp:239, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.818] [Debug] "BinaryFileHelper::serializeRow" - 开始序列化行数据, 列数:9, 数据项数:9 (binaryfilehelper.cpp:156, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.821] [Debug] "BinaryFileHelper::serializeRow" - 序列化第0列, 名称:"Label", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.823] [Debug] "BinaryFileHelper::serializeRow" - 序列化第1列, 名称:"Instruction", 类型:3, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.824] [Debug] "BinaryFileHelper::serializeRow" - 序列化第2列, 名称:"TimeSet", 类型:4, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.825] [Debug] "BinaryFileHelper::serializeRow" - 序列化第3列, 名称:"Capture", 类型:0, 值:QVariant(QString, "N") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.825] [Debug] "BinaryFileHelper::serializeRow" - 序列化第4列, 名称:"Ext", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.826] [Debug] "BinaryFileHelper::serializeRow" - 序列化第5列, 名称:"Comment", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.827] [Debug] "BinaryFileHelper::serializeRow" - 序列化第6列, 名称:"A", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.828] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "A" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.828] [Debug] "BinaryFileHelper::serializeRow" - 序列化第7列, 名称:"B", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.829] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "B" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.829] [Debug] "BinaryFileHelper::serializeRow" - 序列化第8列, 名称:"C", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.830] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "C" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.830] [Debug] "BinaryFileHelper::serializeRow"  - 序列化完成, 字节长度: 44 (binaryfilehelper.cpp:239, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.831] [Debug] "BinaryFileHelper::serializeRow" - 开始序列化行数据, 列数:9, 数据项数:9 (binaryfilehelper.cpp:156, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.831] [Debug] "BinaryFileHelper::serializeRow" - 序列化第0列, 名称:"Label", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.832] [Debug] "BinaryFileHelper::serializeRow" - 序列化第1列, 名称:"Instruction", 类型:3, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.832] [Debug] "BinaryFileHelper::serializeRow" - 序列化第2列, 名称:"TimeSet", 类型:4, 值:QVariant(int, 2) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.833] [Debug] "BinaryFileHelper::serializeRow" - 序列化第3列, 名称:"Capture", 类型:0, 值:QVariant(QString, "N") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.833] [Debug] "BinaryFileHelper::serializeRow" - 序列化第4列, 名称:"Ext", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.834] [Debug] "BinaryFileHelper::serializeRow" - 序列化第5列, 名称:"Comment", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.834] [Debug] "BinaryFileHelper::serializeRow" - 序列化第6列, 名称:"A", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.835] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "A" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.837] [Debug] "BinaryFileHelper::serializeRow" - 序列化第7列, 名称:"B", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.838] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "B" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.839] [Debug] "BinaryFileHelper::serializeRow" - 序列化第8列, 名称:"C", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.840] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "C" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.841] [Debug] "BinaryFileHelper::serializeRow"  - 序列化完成, 字节长度: 44 (binaryfilehelper.cpp:239, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.841] [Debug] "BinaryFileHelper::serializeRow" - 开始序列化行数据, 列数:9, 数据项数:9 (binaryfilehelper.cpp:156, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.843] [Debug] "BinaryFileHelper::serializeRow" - 序列化第0列, 名称:"Label", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.843] [Debug] "BinaryFileHelper::serializeRow" - 序列化第1列, 名称:"Instruction", 类型:3, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.844] [Debug] "BinaryFileHelper::serializeRow" - 序列化第2列, 名称:"TimeSet", 类型:4, 值:QVariant(int, 3) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.844] [Debug] "BinaryFileHelper::serializeRow" - 序列化第3列, 名称:"Capture", 类型:0, 值:QVariant(QString, "N") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.845] [Debug] "BinaryFileHelper::serializeRow" - 序列化第4列, 名称:"Ext", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.845] [Debug] "BinaryFileHelper::serializeRow" - 序列化第5列, 名称:"Comment", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.846] [Debug] "BinaryFileHelper::serializeRow" - 序列化第6列, 名称:"A", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.847] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "A" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.847] [Debug] "BinaryFileHelper::serializeRow" - 序列化第7列, 名称:"B", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.848] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "B" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.848] [Debug] "BinaryFileHelper::serializeRow" - 序列化第8列, 名称:"C", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.848] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "C" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.849] [Debug] "BinaryFileHelper::serializeRow"  - 序列化完成, 字节长度: 44 (binaryfilehelper.cpp:239, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:20:53.849] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Finished writing loop. Successfully wrote 4 rows. (binaryfilehelper.cpp:716, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.850] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - File flushed and closed. Exit. (binaryfilehelper.cpp:721, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:20:53.850] [Debug] "VectorDataHandler::saveVectorTableData"  - 二进制文件写入成功 (vectordatahandler.cpp:1026, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:53.857] [Debug] "VectorDataHandler::saveVectorTableData" - 数据库元数据行数已更新为: 4  for table ID: 1 (vectordatahandler.cpp:1060, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:20:55.039] [Debug] "MainWindow::refreshVectorTableData"  - 开始刷新向量表数据 (mainwindow.cpp:2445, void MainWindow::refreshVectorTableData())
[2025-05-20 11:20:55.040] [Debug] "MainWindow::refreshVectorTableData"  - 正在刷新表ID: 1 , 名称: "1" (mainwindow.cpp:2456, void MainWindow::refreshVectorTableData())
[2025-05-20 11:20:55.041] [Debug] "MainWindow::fixExistingTableWithoutColumns"  - 开始修复表ID  1  的列配置 (mainwindow.cpp:2932, bool MainWindow::fixExistingTableWithoutColumns(int))
[2025-05-20 11:20:55.042] [Debug] "MainWindow::fixExistingTableWithoutColumns"  - 表ID  1  已有  9  个列配置，不需要修复 (mainwindow.cpp:2956, bool MainWindow::fixExistingTableWithoutColumns(int))
[2025-05-20 11:20:55.042] [Debug] "MainWindow::refreshVectorTableData"  - 未找到当前Tab页中的TableWidget, 回退到 m_vectorTableWidget for refresh (mainwindow.cpp:2473, void MainWindow::refreshVectorTableData())
[2025-05-20 11:20:55.043] [Debug] "MainWindow::refreshVectorTableData"  - 用于刷新的表格控件已确定。 (mainwindow.cpp:2482, void MainWindow::refreshVectorTableData())
[2025-05-20 11:20:55.043] [Debug] "VectorDataHandler::loadVectorTableData"  - 开始加载, 表ID: 1 (vectordatahandler.cpp:287, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.044] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.044] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 4 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.045] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.045] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 7
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.046] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.047] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 8
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.048] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.048] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 9
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.049] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.050] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 10
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.051] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Ext"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.053] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 11
  VectorTableID: 1
  Name: "Ext"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.055] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.056] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 12
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.058] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"A"', Input: '"{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":3}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.058] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 13
  VectorTableID: 1
  Name: "A"
  Order: 6
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":1,"type_id":3}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.059] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"B"', Input: '"{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.060] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 14
  VectorTableID: 1
  Name: "B"
  Order: 7
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":2,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.062] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"C"', Input: '"{\"channel_count\":1,\"pin_list_id\":3,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.062] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 15
  VectorTableID: 1
  Name: "C"
  Order: 8
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":3,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.063] [Debug] "VectorDataHandler::loadVectorTableData"  - 元数据加载成功, 列数: 9 , DB记录行数: 4 (vectordatahandler.cpp:312, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.064] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 开始解析表ID的二进制文件路径: 1 (vectordatahandler.cpp:207, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:20:55.064] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.065] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 4 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.066] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.066] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 7
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.067] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.068] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 8
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.073] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.074] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 9
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.075] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.076] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 10
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.077] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Ext"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.078] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 11
  VectorTableID: 1
  Name: "Ext"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.079] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.079] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 12
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.080] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"A"', Input: '"{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":3}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.081] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 13
  VectorTableID: 1
  Name: "A"
  Order: 6
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":1,"type_id":3}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.082] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"B"', Input: '"{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.083] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 14
  VectorTableID: 1
  Name: "B"
  Order: 7
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":2,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.084] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"C"', Input: '"{\"channel_count\":1,\"pin_list_id\":3,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:20:55.084] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 15
  VectorTableID: 1
  Name: "C"
  Order: 8
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":3,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:20:55.089] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 输入数据库路径: "C:/Users/GIGA/Documents/TEST134.db" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:29, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:20:55.090] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 生成的项目二进制数据目录： "C:\\Users\\GIGA\\Documents\\TEST134_vbindata" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:50, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:20:55.091] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 解析得到的绝对路径:  "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata"  (DB:  "C:/Users/GIGA/Documents/TEST134.db" , File:  "table_1_data.vbindata" ) (vectordatahandler.cpp:276, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:20:55.093] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 0  -> 可见索引 0 , 列名: "Label" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.094] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 1  -> 可见索引 1 , 列名: "Instruction" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.095] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 2  -> 可见索引 2 , 列名: "TimeSet" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.095] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 3  -> 可见索引 3 , 列名: "Capture" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.096] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 4  -> 可见索引 4 , 列名: "Ext" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.097] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 5  -> 可见索引 5 , 列名: "Comment" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.097] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 6  -> 可见索引 6 , 列名: "A" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.098] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 7  -> 可见索引 7 , 列名: "B" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.100] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 8  -> 可见索引 8 , 列名: "C" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.101] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Entry. File path: "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata" DB Schema Version: 1 Num Columns Expected: 9 (binaryfilehelper.cpp:430, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:55.104] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Attempting to open file for reading. (binaryfilehelper.cpp:434, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:55.106] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - File opened successfully. (binaryfilehelper.cpp:440, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:55.107] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Attempting to read binary header. (binaryfilehelper.cpp:443, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:55.107] [Debug] "BinaryFileHelper::readBinaryHeader" - Attempting to read binary file header. (binaryfilehelper.cpp:22, static bool Persistence::BinaryFileHelper::readBinaryHeader(QIODevice*, BinaryFileHeader&))
[2025-05-20 11:20:55.108] [Debug] ["BinaryFileHelper::readBinaryHeader - Successfully Read Header"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 4
  Column Count: 9
  Created: 1747711253
  Updated: 1747711253
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:20:55.109] [Debug] "BinaryFileHelper::readBinaryHeader"  - Binary file header read and validated successfully. (binaryfilehelper.cpp:83, static bool Persistence::BinaryFileHelper::readBinaryHeader(QIODevice*, BinaryFileHeader&))
[2025-05-20 11:20:55.110] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Binary header read successfully. Details: (binaryfilehelper.cpp:450, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:55.110] [Debug] ["BinaryFileHelper::readAllRowsFromBinary"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 4
  Column Count: 9
  Created: 1747711253
  Updated: 1747711253
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:20:55.111] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Header indicates 4 rows. Starting data deserialization loop. (binaryfilehelper.cpp:487, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:55.112] [Debug] "BinaryFileHelper::deserializeRow" - 开始反序列化行数据, 列数:9, 字节长度:44, 文件版本:1 (binaryfilehelper.cpp:246, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.113] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第0列, 名称:"Label", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.114] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第1列, 名称:"Instruction", 类型:3 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.115] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第2列, 名称:"TimeSet", 类型:4 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.115] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第3列, 名称:"Capture", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.117] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第4列, 名称:"Ext", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.118] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第5列, 名称:"Comment", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.121] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第6列, 名称:"A", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.122] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "A" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.123] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第7列, 名称:"B", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.124] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "B" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.125] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第8列, 名称:"C", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.126] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "C" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.127] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "A" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.128] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "B" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.128] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "C" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.129] [Debug] "BinaryFileHelper::deserializeRow"  - 反序列化完成, 行数据项: 9 (binaryfilehelper.cpp:422, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.130] [Debug] "BinaryFileHelper::deserializeRow" - 开始反序列化行数据, 列数:9, 字节长度:44, 文件版本:1 (binaryfilehelper.cpp:246, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.130] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第0列, 名称:"Label", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.131] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第1列, 名称:"Instruction", 类型:3 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.132] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第2列, 名称:"TimeSet", 类型:4 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.132] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第3列, 名称:"Capture", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.133] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第4列, 名称:"Ext", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.133] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第5列, 名称:"Comment", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.134] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第6列, 名称:"A", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.134] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "A" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.137] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第7列, 名称:"B", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.138] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "B" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.140] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第8列, 名称:"C", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.141] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "C" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.142] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "A" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.143] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "B" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.143] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "C" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.144] [Debug] "BinaryFileHelper::deserializeRow"  - 反序列化完成, 行数据项: 9 (binaryfilehelper.cpp:422, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.145] [Debug] "BinaryFileHelper::deserializeRow" - 开始反序列化行数据, 列数:9, 字节长度:44, 文件版本:1 (binaryfilehelper.cpp:246, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.145] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第0列, 名称:"Label", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.146] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第1列, 名称:"Instruction", 类型:3 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.146] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第2列, 名称:"TimeSet", 类型:4 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.147] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第3列, 名称:"Capture", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.147] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第4列, 名称:"Ext", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.148] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第5列, 名称:"Comment", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.148] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第6列, 名称:"A", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.149] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "A" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.149] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第7列, 名称:"B", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.150] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "B" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.150] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第8列, 名称:"C", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.151] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "C" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.154] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "A" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.155] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "B" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.157] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "C" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.157] [Debug] "BinaryFileHelper::deserializeRow"  - 反序列化完成, 行数据项: 9 (binaryfilehelper.cpp:422, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.158] [Debug] "BinaryFileHelper::deserializeRow" - 开始反序列化行数据, 列数:9, 字节长度:44, 文件版本:1 (binaryfilehelper.cpp:246, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.158] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第0列, 名称:"Label", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.159] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第1列, 名称:"Instruction", 类型:3 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.160] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第2列, 名称:"TimeSet", 类型:4 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.161] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第3列, 名称:"Capture", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.161] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第4列, 名称:"Ext", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.162] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第5列, 名称:"Comment", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.162] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第6列, 名称:"A", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.163] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "A" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.164] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第7列, 名称:"B", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.164] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "B" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.165] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第8列, 名称:"C", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.165] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "C" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.166] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "A" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.166] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "B" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.167] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "C" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.167] [Debug] "BinaryFileHelper::deserializeRow"  - 反序列化完成, 行数据项: 9 (binaryfilehelper.cpp:422, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:20:55.168] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Finished reading loop. Expected rows based on header: 4 . Actual rows successfully deserialized: 4 . Stream at end: true (binaryfilehelper.cpp:567, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:55.172] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Exit. Returning 4 rows. Operation successful. (binaryfilehelper.cpp:585, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:20:55.173] [Debug] "VectorDataHandler::loadVectorTableData"  - 从二进制文件加载了  4  行, 原始列数: 9 , 可见列数: 9 (vectordatahandler.cpp:415, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.174] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表格列数: 9 (vectordatahandler.cpp:430, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.175] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Label" ，索引: 0 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.175] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Instruction" ，索引: 1 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.176] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "TimeSet" ，索引: 2 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.176] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Capture" ，索引: 3 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.176] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Ext" ，索引: 4 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.177] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Comment" ，索引: 5 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.178] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加管脚列表头: "A\nx1\nInOut" ，原始列名: "A" ，索引: 6 (vectordatahandler.cpp:458, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.178] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加管脚列表头: "B\nx1\nIn" ，原始列名: "B" ，索引: 7 (vectordatahandler.cpp:458, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.179] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加管脚列表头: "C\nx1\nIn" ，原始列名: "C" ，索引: 8 (vectordatahandler.cpp:458, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.179] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头完成，列数: 9 ，列表: "Label, Instruction, TimeSet, Capture, Ext, Comment, A\nx1\nInOut, B\nx1\nIn, C\nx1\nIn" (vectordatahandler.cpp:469, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.180] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 0 , "Label" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.180] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 1 , "Instruction" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.181] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 2 , "TimeSet" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.181] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 3 , "Capture" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.182] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 4 , "Ext" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.182] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 5 , "Comment" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.182] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 6 , "A\nx1\nInOut" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.183] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 7 , "B\nx1\nIn" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.183] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 8 , "C\nx1\nIn" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.184] [Debug] "VectorDataHandler::loadVectorTableData"  - 准备填充  4  行到 QTableWidget (vectordatahandler.cpp:492, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.184] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 7  -> 索引= 0 , 名称= "Label" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.190] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 8  -> 索引= 1 , 名称= "Instruction" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.191] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 9  -> 索引= 2 , 名称= "TimeSet" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.192] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 10  -> 索引= 3 , 名称= "Capture" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.192] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 11  -> 索引= 4 , 名称= "Ext" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.193] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 12  -> 索引= 5 , 名称= "Comment" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.193] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 13  -> 索引= 6 , 名称= "A" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.194] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 14  -> 索引= 7 , 名称= "B" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.194] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 15  -> 索引= 8 , 名称= "C" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.194] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 0  ( "Label" ) -> 原始列 0  ( "Label" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.195] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 0  ( "Label" ) 从原始列 0 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.195] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 0  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.196] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 1  ( "Instruction" ) -> 原始列 1  ( "Instruction" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.196] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 1  ( "Instruction" ) 从原始列 1 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.197] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 1  设置指令为: "INC" (ID: 1 ) (vectordatahandler.cpp:610, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.198] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 2  ( "TimeSet" ) -> 原始列 2  ( "TimeSet" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.198] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 2  ( "TimeSet" ) 从原始列 2 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.199] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 2  设置TimeSet为: "timeset_1" (ID: 1 ) (vectordatahandler.cpp:637, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.199] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 3  ( "Capture" ) -> 原始列 3  ( "Capture" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.200] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 3  ( "Capture" ) 从原始列 3 获取值: QVariant(QString, "N") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.200] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 3  设置为: "N" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.200] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 4  ( "Ext" ) -> 原始列 4  ( "Ext" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.201] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 4  ( "Ext" ) 从原始列 4 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.203] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 4  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.204] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 5  ( "Comment" ) -> 原始列 5  ( "Comment" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.205] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 5  ( "Comment" ) 从原始列 5 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.206] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 5  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.207] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 6  ( "A" ) -> 原始列 6  ( "A" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.207] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 6  ( "A" ) 从原始列 6 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.208] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 6  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.209] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 7  ( "B" ) -> 原始列 7  ( "B" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.209] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 7  ( "B" ) 从原始列 7 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.210] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 7  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.211] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 8  ( "C" ) -> 原始列 8  ( "C" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.211] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 8  ( "C" ) 从原始列 8 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.212] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 8  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.213] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 0  ( "Label" ) -> 原始列 0  ( "Label" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.213] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 0  ( "Label" ) 从原始列 0 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.214] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 0  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.214] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 1  ( "Instruction" ) -> 原始列 1  ( "Instruction" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.214] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 1  ( "Instruction" ) 从原始列 1 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.215] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 1  设置指令为: "INC" (ID: 1 ) (vectordatahandler.cpp:610, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.216] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 2  ( "TimeSet" ) -> 原始列 2  ( "TimeSet" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.216] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 2  ( "TimeSet" ) 从原始列 2 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.217] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 2  设置TimeSet为: "timeset_1" (ID: 1 ) (vectordatahandler.cpp:637, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.217] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 3  ( "Capture" ) -> 原始列 3  ( "Capture" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.217] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 3  ( "Capture" ) 从原始列 3 获取值: QVariant(QString, "N") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.218] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 3  设置为: "N" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.223] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 4  ( "Ext" ) -> 原始列 4  ( "Ext" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.224] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 4  ( "Ext" ) 从原始列 4 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.225] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 4  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.225] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 5  ( "Comment" ) -> 原始列 5  ( "Comment" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.226] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 5  ( "Comment" ) 从原始列 5 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.226] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 5  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.227] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 6  ( "A" ) -> 原始列 6  ( "A" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.227] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 6  ( "A" ) 从原始列 6 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.228] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 6  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.228] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 7  ( "B" ) -> 原始列 7  ( "B" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.229] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 7  ( "B" ) 从原始列 7 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.230] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 7  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.231] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 8  ( "C" ) -> 原始列 8  ( "C" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.231] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 8  ( "C" ) 从原始列 8 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.232] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 8  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.233] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 0  ( "Label" ) -> 原始列 0  ( "Label" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.233] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 0  ( "Label" ) 从原始列 0 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.233] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 0  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.234] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 1  ( "Instruction" ) -> 原始列 1  ( "Instruction" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.234] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 1  ( "Instruction" ) 从原始列 1 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.235] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 1  设置指令为: "INC" (ID: 1 ) (vectordatahandler.cpp:610, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.239] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 2  ( "TimeSet" ) -> 原始列 2  ( "TimeSet" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.240] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 2  ( "TimeSet" ) 从原始列 2 获取值: QVariant(int, 2) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.241] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 2  设置TimeSet为: "timeset_2" (ID: 2 ) (vectordatahandler.cpp:637, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.242] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 3  ( "Capture" ) -> 原始列 3  ( "Capture" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.242] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 3  ( "Capture" ) 从原始列 3 获取值: QVariant(QString, "N") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.242] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 3  设置为: "N" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.243] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 4  ( "Ext" ) -> 原始列 4  ( "Ext" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.243] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 4  ( "Ext" ) 从原始列 4 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.244] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 4  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.244] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 5  ( "Comment" ) -> 原始列 5  ( "Comment" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.245] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 5  ( "Comment" ) 从原始列 5 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.245] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 5  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.245] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 6  ( "A" ) -> 原始列 6  ( "A" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.246] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 6  ( "A" ) 从原始列 6 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.247] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 6  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.247] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 7  ( "B" ) -> 原始列 7  ( "B" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.248] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 7  ( "B" ) 从原始列 7 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.249] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 7  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.249] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 8  ( "C" ) -> 原始列 8  ( "C" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.250] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 8  ( "C" ) 从原始列 8 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.251] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 8  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.251] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 0  ( "Label" ) -> 原始列 0  ( "Label" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.256] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 0  ( "Label" ) 从原始列 0 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.258] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 0  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.258] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 1  ( "Instruction" ) -> 原始列 1  ( "Instruction" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.259] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 1  ( "Instruction" ) 从原始列 1 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.260] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 1  设置指令为: "INC" (ID: 1 ) (vectordatahandler.cpp:610, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.261] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 2  ( "TimeSet" ) -> 原始列 2  ( "TimeSet" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.262] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 2  ( "TimeSet" ) 从原始列 2 获取值: QVariant(int, 3) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.263] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 2  设置TimeSet为: "timeset_3" (ID: 3 ) (vectordatahandler.cpp:637, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.263] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 3  ( "Capture" ) -> 原始列 3  ( "Capture" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.264] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 3  ( "Capture" ) 从原始列 3 获取值: QVariant(QString, "N") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.264] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 3  设置为: "N" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.265] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 4  ( "Ext" ) -> 原始列 4  ( "Ext" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.265] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 4  ( "Ext" ) 从原始列 4 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.266] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 4  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.266] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 5  ( "Comment" ) -> 原始列 5  ( "Comment" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.266] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 5  ( "Comment" ) 从原始列 5 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.267] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 5  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.267] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 6  ( "A" ) -> 原始列 6  ( "A" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.268] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 6  ( "A" ) 从原始列 6 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.269] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 6  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.273] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 7  ( "B" ) -> 原始列 7  ( "B" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.273] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 7  ( "B" ) 从原始列 7 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.275] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 7  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.275] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 8  ( "C" ) -> 原始列 8  ( "C" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.276] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 8  ( "C" ) 从原始列 8 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.276] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 8  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.277] [Debug] "VectorDataHandler::loadVectorTableData"  - 表格填充完成, 总行数: 4 , 总列数: 9 (vectordatahandler.cpp:681, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:20:55.277] [Debug] "TableStyleManager::applyTableStyle(QTableWidget*)"  - Entry (tablestylemanager.cpp:10, static void TableStyleManager::applyTableStyle(QTableWidget*))
[2025-05-20 11:20:55.277] [Debug] "TableStyleManager::applyTableStyle(QTableWidget*)"  - 开始设置表格样式 (tablestylemanager.cpp:18, static void TableStyleManager::applyTableStyle(QTableWidget*))
[2025-05-20 11:20:55.282] [Debug] TableStyleManager::setRowHeight - 设置表格行高为 28 像素 (tablestylemanager.cpp:218, static void TableStyleManager::setRowHeight(QTableWidget*, int))
[2025-05-20 11:20:55.283] [Debug] TableStyleManager::setColumnAlignments - 开始设置表格列对齐方式 (tablestylemanager.cpp:119, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:20:55.283] [Debug] TableStyleManager::setColumnAlignment - 设置列 0 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:55.284] [Debug] TableStyleManager::setColumnAlignment - 设置列 1 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:55.284] [Debug] TableStyleManager::setColumnAlignment - 设置列 2 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:55.286] [Debug] TableStyleManager::setColumnAlignment - 设置列 3 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:55.288] [Debug] TableStyleManager::setColumnAlignment - 设置列 4 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:55.290] [Debug] TableStyleManager::setColumnAlignment - 设置列 5 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:55.291] [Debug] TableStyleManager::setColumnAlignment - 设置列 6 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:55.291] [Debug] TableStyleManager::setColumnAlignments - 设置管脚列 6 居中对齐 (tablestylemanager.cpp:138, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:20:55.292] [Debug] TableStyleManager::setColumnAlignment - 设置列 7 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:55.292] [Debug] TableStyleManager::setColumnAlignments - 设置管脚列 7 居中对齐 (tablestylemanager.cpp:138, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:20:55.293] [Debug] TableStyleManager::setColumnAlignment - 设置列 8 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:20:55.293] [Debug] TableStyleManager::setColumnAlignments - 设置管脚列 8 居中对齐 (tablestylemanager.cpp:138, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:20:55.294] [Debug] TableStyleManager::setColumnAlignments - 列对齐方式设置完成 (tablestylemanager.cpp:179, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:20:55.295] [Debug] "TableStyleManager::setPinColumnWidths"  - 开始设置管脚列的列宽 (tablestylemanager.cpp:259, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:55.295] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 6 "A\nx1\nInOut" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:55.295] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 7 "B\nx1\nIn" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:55.296] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 8 "C\nx1\nIn" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:55.296] [Debug] "TableStyleManager::setPinColumnWidths"  - 每个管脚列分配宽度:  274 , 管脚列数:  3 , 可用总宽度:  824 (tablestylemanager.cpp:359, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:55.297] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  6  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:55.297] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  7  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:55.297] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  8  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:55.298] [Debug] "TableStyleManager::setPinColumnWidths"  - 管脚列宽度设置完成 (tablestylemanager.cpp:371, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:20:55.298] [Debug] TableStyleManager::refreshTable - 刷新表格显示 (tablestylemanager.cpp:238, static void TableStyleManager::refreshTable(QTableWidget*))
[2025-05-20 11:20:55.298] [Debug] "TableStyleManager::applyTableStyle(QTableWidget*)"  - 表格样式设置完成 (tablestylemanager.cpp:59, static void TableStyleManager::applyTableStyle(QTableWidget*))
[2025-05-20 11:20:57.399] [Debug] "VectorDataHandler::getVectorTableRowCount"  - 获取表ID为 1 的行数 (vectordatahandler.cpp:1297, int VectorDataHandler::getVectorTableRowCount(int))
[2025-05-20 11:20:57.401] [Debug] "VectorDataHandler::getVectorTableRowCount"  - 从元数据获取的行数: 4 (vectordatahandler.cpp:1314, int VectorDataHandler::getVectorTableRowCount(int))
[2025-05-20 11:20:57.402] [Debug] 开始加载TimeSet数据... (timesetdataaccess.cpp:97, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:20:57.403] [Debug] 执行SQL查询: SELECT id, timeset_name, period FROM timeset_list ORDER BY id (timesetdataaccess.cpp:106, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:20:57.404] [Debug] 查询执行成功，开始遍历结果 (timesetdataaccess.cpp:113, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:20:57.405] [Debug] TimeSetDataAccess::loadTimeSetEdges - 准备执行查询SQL: "SELECT timeset_id, pin_id, T1R, T1F, STBR, wave_id FROM timeset_settings WHERE timeset_id = ?" with ID: 1 (timesetdataaccess.cpp:196, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:57.405] [Debug] TimeSetDataAccess::loadTimeSetEdges - 查询成功 for TimeSet ID: 1 (timesetdataaccess.cpp:211, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:57.406] [Debug] TimeSetDataAccess::loadTimeSetEdges - 加载边沿: Pin ID= 1 (timesetdataaccess.cpp:222, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:57.406] [Debug] TimeSetDataAccess::loadTimeSetEdges - 总共加载 1 个边沿 for TimeSet ID: 1 (timesetdataaccess.cpp:224, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:57.407] [Debug] 加载TimeSet: id= 1 , name= "timeset_1" , period= 1000 , 关联管脚数: 0 , 边缘设置数: 1 (timesetdataaccess.cpp:131, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:20:57.408] [Debug] TimeSetDataAccess::loadTimeSetEdges - 准备执行查询SQL: "SELECT timeset_id, pin_id, T1R, T1F, STBR, wave_id FROM timeset_settings WHERE timeset_id = ?" with ID: 2 (timesetdataaccess.cpp:196, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:57.409] [Debug] TimeSetDataAccess::loadTimeSetEdges - 查询成功 for TimeSet ID: 2 (timesetdataaccess.cpp:211, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:57.409] [Debug] TimeSetDataAccess::loadTimeSetEdges - 加载边沿: Pin ID= 2 (timesetdataaccess.cpp:222, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:57.410] [Debug] TimeSetDataAccess::loadTimeSetEdges - 总共加载 1 个边沿 for TimeSet ID: 2 (timesetdataaccess.cpp:224, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:57.410] [Debug] 加载TimeSet: id= 2 , name= "timeset_2" , period= 1000 , 关联管脚数: 0 , 边缘设置数: 1 (timesetdataaccess.cpp:131, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:20:57.411] [Debug] TimeSetDataAccess::loadTimeSetEdges - 准备执行查询SQL: "SELECT timeset_id, pin_id, T1R, T1F, STBR, wave_id FROM timeset_settings WHERE timeset_id = ?" with ID: 3 (timesetdataaccess.cpp:196, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:57.412] [Debug] TimeSetDataAccess::loadTimeSetEdges - 查询成功 for TimeSet ID: 3 (timesetdataaccess.cpp:211, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:57.412] [Debug] TimeSetDataAccess::loadTimeSetEdges - 加载边沿: Pin ID= 3 (timesetdataaccess.cpp:222, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:57.413] [Debug] TimeSetDataAccess::loadTimeSetEdges - 总共加载 1 个边沿 for TimeSet ID: 3 (timesetdataaccess.cpp:224, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:20:57.413] [Debug] 加载TimeSet: id= 3 , name= "timeset_3" , period= 1000 , 关联管脚数: 0 , 边缘设置数: 1 (timesetdataaccess.cpp:131, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:20:57.414] [Debug] 成功加载 3 个TimeSet记录 (timesetdataaccess.cpp:137, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:21:03.075] [Debug] 替换TimeSet开始 - 从TimeSet ID: 1  到TimeSet ID: 3 (mainwindow.cpp:1931, void MainWindow::replaceTimeSetForVectorTable(int, int, const QList<int>&))
[2025-05-20 11:21:03.076] [Debug] 替换TimeSet - 未选择行，将应用于整个表 (mainwindow.cpp:1943, void MainWindow::replaceTimeSetForVectorTable(int, int, const QList<int>&))
[2025-05-20 11:21:03.077] [Debug] 替换TimeSet - 当前向量表ID: 1 , 名称: "1" (mainwindow.cpp:1963, void MainWindow::replaceTimeSetForVectorTable(int, int, const QList<int>&))
[2025-05-20 11:21:03.077] [Debug] 替换TimeSet - 查找: "timeset_1" ( 1 ) 替换: "timeset_3" ( 3 ) (mainwindow.cpp:1992, void MainWindow::replaceTimeSetForVectorTable(int, int, const QList<int>&))
[2025-05-20 11:21:03.078] [Debug] 替换TimeSet - 执行SQL (全表): "UPDATE vector_table_data SET timeset_id = :toTimesetId WHERE table_id = :tableId AND timeset_id = :fromTimesetId" (mainwindow.cpp:2066, void MainWindow::replaceTimeSetForVectorTable(int, int, const QList<int>&))
[2025-05-20 11:21:03.078] [Debug] 参数: fromTimesetId= 1 , toTimesetId= 3 , tableId= 1 (mainwindow.cpp:2067, void MainWindow::replaceTimeSetForVectorTable(int, int, const QList<int>&))
[2025-05-20 11:21:03.079] [Debug] 替换TimeSet - 已更新 0 行 (mainwindow.cpp:2078, void MainWindow::replaceTimeSetForVectorTable(int, int, const QList<int>&))
[2025-05-20 11:21:03.079] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 向量表选择已更改，索引: 0 (mainwindow.cpp:749, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:21:03.079] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 当前表ID: 1 (mainwindow.cpp:753, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:21:03.080] [Debug] MainWindow::syncTabWithComboBox - 同步Tab页签与下拉框选择 (mainwindow.cpp:845, void MainWindow::syncTabWithComboBox(int))
[2025-05-20 11:21:03.080] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 表  1  当前有  9  个列配置 (mainwindow.cpp:767, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:21:03.081] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 开始加载表格数据，表ID: 1 (mainwindow.cpp:778, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:21:03.081] [Debug] "VectorDataHandler::loadVectorTableData"  - 开始加载, 表ID: 1 (vectordatahandler.cpp:287, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.082] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.082] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 4 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.083] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.083] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 7
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.090] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.091] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 8
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.093] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.094] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 9
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.096] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.097] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 10
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.098] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Ext"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.099] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 11
  VectorTableID: 1
  Name: "Ext"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.100] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.105] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 12
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.106] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"A"', Input: '"{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":3}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.107] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 13
  VectorTableID: 1
  Name: "A"
  Order: 6
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":1,"type_id":3}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.109] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"B"', Input: '"{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.110] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 14
  VectorTableID: 1
  Name: "B"
  Order: 7
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":2,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.111] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"C"', Input: '"{\"channel_count\":1,\"pin_list_id\":3,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.112] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 15
  VectorTableID: 1
  Name: "C"
  Order: 8
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":3,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.113] [Debug] "VectorDataHandler::loadVectorTableData"  - 元数据加载成功, 列数: 9 , DB记录行数: 4 (vectordatahandler.cpp:312, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.114] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 开始解析表ID的二进制文件路径: 1 (vectordatahandler.cpp:207, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:21:03.114] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.115] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 4 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.116] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.116] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 7
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.121] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.124] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 8
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.125] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.126] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 9
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.127] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.128] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 10
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.129] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Ext"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.129] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 11
  VectorTableID: 1
  Name: "Ext"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.130] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.131] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 12
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.132] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"A"', Input: '"{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":3}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.132] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 13
  VectorTableID: 1
  Name: "A"
  Order: 6
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":1,"type_id":3}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.137] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"B"', Input: '"{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.141] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 14
  VectorTableID: 1
  Name: "B"
  Order: 7
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":2,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.142] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"C"', Input: '"{\"channel_count\":1,\"pin_list_id\":3,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:03.143] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 15
  VectorTableID: 1
  Name: "C"
  Order: 8
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":3,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:03.144] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 输入数据库路径: "C:/Users/GIGA/Documents/TEST134.db" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:29, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:21:03.145] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 生成的项目二进制数据目录： "C:\\Users\\GIGA\\Documents\\TEST134_vbindata" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:50, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:21:03.146] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 解析得到的绝对路径:  "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata"  (DB:  "C:/Users/GIGA/Documents/TEST134.db" , File:  "table_1_data.vbindata" ) (vectordatahandler.cpp:276, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:21:03.147] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 0  -> 可见索引 0 , 列名: "Label" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.148] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 1  -> 可见索引 1 , 列名: "Instruction" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.148] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 2  -> 可见索引 2 , 列名: "TimeSet" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.149] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 3  -> 可见索引 3 , 列名: "Capture" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.149] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 4  -> 可见索引 4 , 列名: "Ext" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.153] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 5  -> 可见索引 5 , 列名: "Comment" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.158] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 6  -> 可见索引 6 , 列名: "A" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.159] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 7  -> 可见索引 7 , 列名: "B" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.160] [Debug] "VectorDataHandler::loadVectorTableData"  - 列映射: 原始索引 8  -> 可见索引 8 , 列名: "C" (vectordatahandler.cpp:401, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.161] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Entry. File path: "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata" DB Schema Version: 1 Num Columns Expected: 9 (binaryfilehelper.cpp:430, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:21:03.162] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Attempting to open file for reading. (binaryfilehelper.cpp:434, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:21:03.162] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - File opened successfully. (binaryfilehelper.cpp:440, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:21:03.163] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Attempting to read binary header. (binaryfilehelper.cpp:443, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:21:03.163] [Debug] "BinaryFileHelper::readBinaryHeader" - Attempting to read binary file header. (binaryfilehelper.cpp:22, static bool Persistence::BinaryFileHelper::readBinaryHeader(QIODevice*, BinaryFileHeader&))
[2025-05-20 11:21:03.164] [Debug] ["BinaryFileHelper::readBinaryHeader - Successfully Read Header"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 4
  Column Count: 9
  Created: 1747711253
  Updated: 1747711253
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:21:03.165] [Debug] "BinaryFileHelper::readBinaryHeader"  - Binary file header read and validated successfully. (binaryfilehelper.cpp:83, static bool Persistence::BinaryFileHelper::readBinaryHeader(QIODevice*, BinaryFileHeader&))
[2025-05-20 11:21:03.166] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Binary header read successfully. Details: (binaryfilehelper.cpp:450, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:21:03.166] [Debug] ["BinaryFileHelper::readAllRowsFromBinary"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 4
  Column Count: 9
  Created: 1747711253
  Updated: 1747711253
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:21:03.172] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Header indicates 4 rows. Starting data deserialization loop. (binaryfilehelper.cpp:487, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:21:03.173] [Debug] "BinaryFileHelper::deserializeRow" - 开始反序列化行数据, 列数:9, 字节长度:44, 文件版本:1 (binaryfilehelper.cpp:246, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.174] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第0列, 名称:"Label", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.175] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第1列, 名称:"Instruction", 类型:3 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.176] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第2列, 名称:"TimeSet", 类型:4 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.177] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第3列, 名称:"Capture", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.178] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第4列, 名称:"Ext", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.179] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第5列, 名称:"Comment", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.179] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第6列, 名称:"A", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.180] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "A" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.180] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第7列, 名称:"B", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.181] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "B" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.181] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第8列, 名称:"C", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.182] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "C" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.182] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "A" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.183] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "B" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.183] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "C" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.190] [Debug] "BinaryFileHelper::deserializeRow"  - 反序列化完成, 行数据项: 9 (binaryfilehelper.cpp:422, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.192] [Debug] "BinaryFileHelper::deserializeRow" - 开始反序列化行数据, 列数:9, 字节长度:44, 文件版本:1 (binaryfilehelper.cpp:246, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.192] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第0列, 名称:"Label", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.193] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第1列, 名称:"Instruction", 类型:3 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.193] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第2列, 名称:"TimeSet", 类型:4 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.194] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第3列, 名称:"Capture", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.194] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第4列, 名称:"Ext", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.195] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第5列, 名称:"Comment", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.195] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第6列, 名称:"A", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.196] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "A" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.196] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第7列, 名称:"B", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.197] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "B" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.197] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第8列, 名称:"C", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.198] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "C" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.198] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "A" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.199] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "B" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.199] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "C" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.200] [Debug] "BinaryFileHelper::deserializeRow"  - 反序列化完成, 行数据项: 9 (binaryfilehelper.cpp:422, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.200] [Debug] "BinaryFileHelper::deserializeRow" - 开始反序列化行数据, 列数:9, 字节长度:44, 文件版本:1 (binaryfilehelper.cpp:246, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.207] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第0列, 名称:"Label", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.207] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第1列, 名称:"Instruction", 类型:3 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.208] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第2列, 名称:"TimeSet", 类型:4 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.208] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第3列, 名称:"Capture", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.209] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第4列, 名称:"Ext", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.209] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第5列, 名称:"Comment", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.210] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第6列, 名称:"A", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.211] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "A" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.211] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第7列, 名称:"B", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.212] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "B" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.212] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第8列, 名称:"C", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.213] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "C" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.213] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "A" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.214] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "B" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.214] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "C" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.215] [Debug] "BinaryFileHelper::deserializeRow"  - 反序列化完成, 行数据项: 9 (binaryfilehelper.cpp:422, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.215] [Debug] "BinaryFileHelper::deserializeRow" - 开始反序列化行数据, 列数:9, 字节长度:44, 文件版本:1 (binaryfilehelper.cpp:246, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.216] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第0列, 名称:"Label", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.216] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第1列, 名称:"Instruction", 类型:3 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.217] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第2列, 名称:"TimeSet", 类型:4 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.217] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第3列, 名称:"Capture", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.224] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第4列, 名称:"Ext", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.225] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第5列, 名称:"Comment", 类型:0 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.225] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第6列, 名称:"A", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.226] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "A" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.226] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第7列, 名称:"B", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.227] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "B" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.227] [Debug] "BinaryFileHelper::deserializeRow" - 反序列化第8列, 名称:"C", 类型:5 (binaryfilehelper.cpp:293, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.228] [Debug] "BinaryFileHelper::deserializeRow"  - 管脚状态列读取到有效值: "X" ，列名: "C" (binaryfilehelper.cpp:326, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.228] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "A" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.229] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "B" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.229] [Debug] "BinaryFileHelper::deserializeRow"  - 最终检查：管脚状态列 "C" 值 "X" 是有效值 (binaryfilehelper.cpp:417, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.230] [Debug] "BinaryFileHelper::deserializeRow"  - 反序列化完成, 行数据项: 9 (binaryfilehelper.cpp:422, static bool Persistence::BinaryFileHelper::deserializeRow(const QByteArray&, const QList<Vector::ColumnInfo>&, int, Vector::RowData&))
[2025-05-20 11:21:03.231] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Finished reading loop. Expected rows based on header: 4 . Actual rows successfully deserialized: 4 . Stream at end: true (binaryfilehelper.cpp:567, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:21:03.231] [Debug] "BinaryFileHelper::readAllRowsFromBinary" - Exit. Returning 4 rows. Operation successful. (binaryfilehelper.cpp:585, static bool Persistence::BinaryFileHelper::readAllRowsFromBinary(const QString&, const QList<Vector::ColumnInfo>&, int, QList<QList<QVariant> >&))
[2025-05-20 11:21:03.232] [Debug] "VectorDataHandler::loadVectorTableData"  - 从二进制文件加载了  4  行, 原始列数: 9 , 可见列数: 9 (vectordatahandler.cpp:415, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.232] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表格列数: 9 (vectordatahandler.cpp:430, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.233] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Label" ，索引: 0 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.233] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Instruction" ，索引: 1 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.234] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "TimeSet" ，索引: 2 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.237] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Capture" ，索引: 3 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.245] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Ext" ，索引: 4 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.246] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加标准列表头: "Comment" ，索引: 5 (vectordatahandler.cpp:465, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.247] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加管脚列表头: "A\nx1\nInOut" ，原始列名: "A" ，索引: 6 (vectordatahandler.cpp:458, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.247] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加管脚列表头: "B\nx1\nIn" ，原始列名: "B" ，索引: 7 (vectordatahandler.cpp:458, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.248] [Debug] "VectorDataHandler::loadVectorTableData"  - 添加管脚列表头: "C\nx1\nIn" ，原始列名: "C" ，索引: 8 (vectordatahandler.cpp:458, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.248] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头完成，列数: 9 ，列表: "Label, Instruction, TimeSet, Capture, Ext, Comment, A\nx1\nInOut, B\nx1\nIn, C\nx1\nIn" (vectordatahandler.cpp:469, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.249] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 0 , "Label" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.249] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 1 , "Instruction" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.249] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 2 , "TimeSet" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.250] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 3 , "Capture" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.257] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 4 , "Ext" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.258] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 5 , "Comment" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.258] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 6 , "A\nx1\nInOut" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.258] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 7 , "B\nx1\nIn" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.258] [Debug] "VectorDataHandler::loadVectorTableData"  - 设置表头项居中对齐: 8 , "C\nx1\nIn" (vectordatahandler.cpp:478, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.259] [Debug] "VectorDataHandler::loadVectorTableData"  - 准备填充  4  行到 QTableWidget (vectordatahandler.cpp:492, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.259] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 7  -> 索引= 0 , 名称= "Label" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.260] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 8  -> 索引= 1 , 名称= "Instruction" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.260] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 9  -> 索引= 2 , 名称= "TimeSet" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.261] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 10  -> 索引= 3 , 名称= "Capture" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.261] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 11  -> 索引= 4 , 名称= "Ext" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.262] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 12  -> 索引= 5 , 名称= "Comment" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.263] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 13  -> 索引= 6 , 名称= "A" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.263] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 14  -> 索引= 7 , 名称= "B" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.263] [Debug] "VectorDataHandler::loadVectorTableData"  - 列ID映射: ID= 15  -> 索引= 8 , 名称= "C" , 可见= true (vectordatahandler.cpp:499, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.264] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 0  ( "Label" ) -> 原始列 0  ( "Label" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.264] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 0  ( "Label" ) 从原始列 0 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.265] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 0  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.265] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 1  ( "Instruction" ) -> 原始列 1  ( "Instruction" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.265] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 1  ( "Instruction" ) 从原始列 1 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.266] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 1  设置指令为: "INC" (ID: 1 ) (vectordatahandler.cpp:610, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.267] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 2  ( "TimeSet" ) -> 原始列 2  ( "TimeSet" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.273] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 2  ( "TimeSet" ) 从原始列 2 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.274] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 2  设置TimeSet为: "timeset_1" (ID: 1 ) (vectordatahandler.cpp:637, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.275] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 3  ( "Capture" ) -> 原始列 3  ( "Capture" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.275] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 3  ( "Capture" ) 从原始列 3 获取值: QVariant(QString, "N") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.275] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 3  设置为: "N" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.276] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 4  ( "Ext" ) -> 原始列 4  ( "Ext" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.276] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 4  ( "Ext" ) 从原始列 4 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.277] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 4  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.277] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 5  ( "Comment" ) -> 原始列 5  ( "Comment" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.277] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 5  ( "Comment" ) 从原始列 5 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.278] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 5  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.278] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 6  ( "A" ) -> 原始列 6  ( "A" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.278] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 6  ( "A" ) 从原始列 6 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.279] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 6  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.280] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 7  ( "B" ) -> 原始列 7  ( "B" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.280] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 7  ( "B" ) 从原始列 7 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.281] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 7  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.281] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 8  ( "C" ) -> 原始列 8  ( "C" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.281] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 8  ( "C" ) 从原始列 8 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.282] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 0 , 列 8  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.283] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 0  ( "Label" ) -> 原始列 0  ( "Label" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.286] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 0  ( "Label" ) 从原始列 0 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.287] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 0  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.287] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 1  ( "Instruction" ) -> 原始列 1  ( "Instruction" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.288] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 1  ( "Instruction" ) 从原始列 1 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.288] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 1  设置指令为: "INC" (ID: 1 ) (vectordatahandler.cpp:610, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.289] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 2  ( "TimeSet" ) -> 原始列 2  ( "TimeSet" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.289] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 2  ( "TimeSet" ) 从原始列 2 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.289] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 2  设置TimeSet为: "timeset_1" (ID: 1 ) (vectordatahandler.cpp:637, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.290] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 3  ( "Capture" ) -> 原始列 3  ( "Capture" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.290] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 3  ( "Capture" ) 从原始列 3 获取值: QVariant(QString, "N") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.291] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 3  设置为: "N" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.291] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 4  ( "Ext" ) -> 原始列 4  ( "Ext" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.291] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 4  ( "Ext" ) 从原始列 4 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.292] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 4  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.292] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 5  ( "Comment" ) -> 原始列 5  ( "Comment" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.293] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 5  ( "Comment" ) 从原始列 5 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.293] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 5  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.293] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 6  ( "A" ) -> 原始列 6  ( "A" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.294] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 6  ( "A" ) 从原始列 6 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.295] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 6  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.295] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 7  ( "B" ) -> 原始列 7  ( "B" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.296] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 7  ( "B" ) 从原始列 7 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.296] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 7  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.297] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 8  ( "C" ) -> 原始列 8  ( "C" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.298] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 8  ( "C" ) 从原始列 8 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.298] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 1 , 列 8  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.299] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 0  ( "Label" ) -> 原始列 0  ( "Label" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.299] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 0  ( "Label" ) 从原始列 0 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.303] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 0  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.304] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 1  ( "Instruction" ) -> 原始列 1  ( "Instruction" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.305] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 1  ( "Instruction" ) 从原始列 1 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.306] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 1  设置指令为: "INC" (ID: 1 ) (vectordatahandler.cpp:610, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.306] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 2  ( "TimeSet" ) -> 原始列 2  ( "TimeSet" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.307] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 2  ( "TimeSet" ) 从原始列 2 获取值: QVariant(int, 2) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.307] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 2  设置TimeSet为: "timeset_2" (ID: 2 ) (vectordatahandler.cpp:637, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.308] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 3  ( "Capture" ) -> 原始列 3  ( "Capture" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.308] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 3  ( "Capture" ) 从原始列 3 获取值: QVariant(QString, "N") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.308] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 3  设置为: "N" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.309] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 4  ( "Ext" ) -> 原始列 4  ( "Ext" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.309] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 4  ( "Ext" ) 从原始列 4 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.310] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 4  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.310] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 5  ( "Comment" ) -> 原始列 5  ( "Comment" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.310] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 5  ( "Comment" ) 从原始列 5 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.311] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 5  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.311] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 6  ( "A" ) -> 原始列 6  ( "A" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.311] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 6  ( "A" ) 从原始列 6 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.312] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 6  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.313] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 7  ( "B" ) -> 原始列 7  ( "B" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.313] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 7  ( "B" ) 从原始列 7 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.314] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 7  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.314] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 8  ( "C" ) -> 原始列 8  ( "C" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.315] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 8  ( "C" ) 从原始列 8 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.315] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 2 , 列 8  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.316] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 0  ( "Label" ) -> 原始列 0  ( "Label" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.316] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 0  ( "Label" ) 从原始列 0 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.319] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 0  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.320] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 1  ( "Instruction" ) -> 原始列 1  ( "Instruction" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.321] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 1  ( "Instruction" ) 从原始列 1 获取值: QVariant(int, 1) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.321] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 1  设置指令为: "INC" (ID: 1 ) (vectordatahandler.cpp:610, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.322] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 2  ( "TimeSet" ) -> 原始列 2  ( "TimeSet" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.322] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 2  ( "TimeSet" ) 从原始列 2 获取值: QVariant(int, 3) (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.323] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 2  设置TimeSet为: "timeset_3" (ID: 3 ) (vectordatahandler.cpp:637, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.323] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 3  ( "Capture" ) -> 原始列 3  ( "Capture" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.323] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 3  ( "Capture" ) 从原始列 3 获取值: QVariant(QString, "N") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.324] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 3  设置为: "N" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.324] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 4  ( "Ext" ) -> 原始列 4  ( "Ext" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.325] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 4  ( "Ext" ) 从原始列 4 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.325] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 4  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.325] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 5  ( "Comment" ) -> 原始列 5  ( "Comment" ), 类型: 标准列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.326] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 5  ( "Comment" ) 从原始列 5 获取值: QVariant(QString, "") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.326] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 5  设置为: "" (vectordatahandler.cpp:675, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.326] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 6  ( "A" ) -> 原始列 6  ( "A" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.327] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 6  ( "A" ) 从原始列 6 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.328] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 6  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.328] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 7  ( "B" ) -> 原始列 7  ( "B" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.329] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 7  ( "B" ) 从原始列 7 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.329] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 7  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.330] [Debug] "VectorDataHandler::loadVectorTableData"  - 找到列映射: UI列 8  ( "C" ) -> 原始列 8  ( "C" ), 类型: 管脚列 (vectordatahandler.cpp:535, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.330] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 8  ( "C" ) 从原始列 8 获取值: QVariant(QString, "X") (vectordatahandler.cpp:561, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.331] [Debug] "VectorDataHandler::loadVectorTableData"  - 行 3 , 列 8  设置管脚状态为: "X" (vectordatahandler.cpp:583, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.332] [Debug] "VectorDataHandler::loadVectorTableData"  - 表格填充完成, 总行数: 4 , 总列数: 9 (vectordatahandler.cpp:681, bool VectorDataHandler::loadVectorTableData(int, QTableWidget*))
[2025-05-20 11:21:03.332] [Debug] "MainWindow::onVectorTableSelectionChanged"  - VectorDataHandler::loadVectorTableData 返回: true ，表ID: 1 ，列数: 9 (mainwindow.cpp:780, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:21:03.333] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 表格加载成功，列数: 9 (mainwindow.cpp:786, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:21:03.335] [Debug] "TableStyleManager::applyTableStyle(QTableWidget*)"  - Entry (tablestylemanager.cpp:10, static void TableStyleManager::applyTableStyle(QTableWidget*))
[2025-05-20 11:21:03.336] [Debug] "TableStyleManager::applyTableStyle(QTableWidget*)"  - 开始设置表格样式 (tablestylemanager.cpp:18, static void TableStyleManager::applyTableStyle(QTableWidget*))
[2025-05-20 11:21:03.343] [Debug] TableStyleManager::setRowHeight - 设置表格行高为 28 像素 (tablestylemanager.cpp:218, static void TableStyleManager::setRowHeight(QTableWidget*, int))
[2025-05-20 11:21:03.343] [Debug] TableStyleManager::setColumnAlignments - 开始设置表格列对齐方式 (tablestylemanager.cpp:119, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:21:03.344] [Debug] TableStyleManager::setColumnAlignment - 设置列 0 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:21:03.344] [Debug] TableStyleManager::setColumnAlignment - 设置列 1 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:21:03.345] [Debug] TableStyleManager::setColumnAlignment - 设置列 2 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:21:03.345] [Debug] TableStyleManager::setColumnAlignment - 设置列 3 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:21:03.346] [Debug] TableStyleManager::setColumnAlignment - 设置列 4 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:21:03.346] [Debug] TableStyleManager::setColumnAlignment - 设置列 5 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:21:03.347] [Debug] TableStyleManager::setColumnAlignment - 设置列 6 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:21:03.347] [Debug] TableStyleManager::setColumnAlignments - 设置管脚列 6 居中对齐 (tablestylemanager.cpp:138, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:21:03.348] [Debug] TableStyleManager::setColumnAlignment - 设置列 7 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:21:03.348] [Debug] TableStyleManager::setColumnAlignments - 设置管脚列 7 居中对齐 (tablestylemanager.cpp:138, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:21:03.348] [Debug] TableStyleManager::setColumnAlignment - 设置列 8 的对齐方式 (tablestylemanager.cpp:190, static void TableStyleManager::setColumnAlignment(QTableWidget*, int, Qt::Alignment))
[2025-05-20 11:21:03.349] [Debug] TableStyleManager::setColumnAlignments - 设置管脚列 8 居中对齐 (tablestylemanager.cpp:138, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:21:03.349] [Debug] TableStyleManager::setColumnAlignments - 列对齐方式设置完成 (tablestylemanager.cpp:179, static void TableStyleManager::setColumnAlignments(QTableWidget*))
[2025-05-20 11:21:03.349] [Debug] "TableStyleManager::setPinColumnWidths"  - 开始设置管脚列的列宽 (tablestylemanager.cpp:259, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.352] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 6 "A\nx1\nInOut" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.353] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 7 "B\nx1\nIn" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.354] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 8 "C\nx1\nIn" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.354] [Debug] "TableStyleManager::setPinColumnWidths"  - 每个管脚列分配宽度:  274 , 管脚列数:  3 , 可用总宽度:  824 (tablestylemanager.cpp:359, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.354] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  6  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.355] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  7  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.355] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  8  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.356] [Debug] "TableStyleManager::setPinColumnWidths"  - 管脚列宽度设置完成 (tablestylemanager.cpp:371, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.356] [Debug] TableStyleManager::refreshTable - 刷新表格显示 (tablestylemanager.cpp:238, static void TableStyleManager::refreshTable(QTableWidget*))
[2025-05-20 11:21:03.356] [Debug] "TableStyleManager::applyTableStyle(QTableWidget*)"  - 表格样式设置完成 (tablestylemanager.cpp:59, static void TableStyleManager::applyTableStyle(QTableWidget*))
[2025-05-20 11:21:03.357] [Debug] "MainWindow::onVectorTableSelectionChanged"  - 表头列表: "Label, Instruction, TimeSet, Capture, Ext, Comment, A\nx1\nInOut, B\nx1\nIn, C\nx1\nIn" (mainwindow.cpp:826, void MainWindow::onVectorTableSelectionChanged(int))
[2025-05-20 11:21:03.357] [Debug] 替换TimeSet - 已重新加载表格数据 (mainwindow.cpp:2090, void MainWindow::replaceTimeSetForVectorTable(int, int, const QList<int>&))
[2025-05-20 11:21:03.376] [Debug] "TableStyleManager::setPinColumnWidths"  - 开始设置管脚列的列宽 (tablestylemanager.cpp:259, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.377] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 6 "A\nx1\nInOut" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.377] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 7 "B\nx1\nIn" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.378] [Debug] "TableStyleManager::setPinColumnWidths"  - 检测到管脚列: 8 "C\nx1\nIn" (tablestylemanager.cpp:338, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.378] [Debug] "TableStyleManager::setPinColumnWidths"  - 每个管脚列分配宽度:  274 , 管脚列数:  3 , 可用总宽度:  824 (tablestylemanager.cpp:359, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.379] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  6  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.379] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  7  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.380] [Debug] "TableStyleManager::setPinColumnWidths"  - 设置管脚列  8  宽度为  274 (tablestylemanager.cpp:368, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.381] [Debug] "TableStyleManager::setPinColumnWidths"  - 管脚列宽度设置完成 (tablestylemanager.cpp:371, static void TableStyleManager::setPinColumnWidths(QTableWidget*))
[2025-05-20 11:21:03.381] [Debug] MainWindow - 再次确保表头项居中对齐: 0 , "Label" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:21:03.382] [Debug] MainWindow - 再次确保表头项居中对齐: 1 , "Instruction" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:21:03.382] [Debug] MainWindow - 再次确保表头项居中对齐: 2 , "TimeSet" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:21:03.383] [Debug] MainWindow - 再次确保表头项居中对齐: 3 , "Capture" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:21:03.383] [Debug] MainWindow - 再次确保表头项居中对齐: 4 , "Ext" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:21:03.385] [Debug] MainWindow - 再次确保表头项居中对齐: 5 , "Comment" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:21:03.388] [Debug] MainWindow - 再次确保表头项居中对齐: 6 , "A\nx1\nInOut" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:21:03.389] [Debug] MainWindow - 再次确保表头项居中对齐: 7 , "B\nx1\nIn" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:21:03.391] [Debug] MainWindow - 再次确保表头项居中对齐: 8 , "C\nx1\nIn" (mainwindow.cpp:814, MainWindow::onVectorTableSelectionChanged(int)::<lambda()>)
[2025-05-20 11:21:04.284] [Debug] 替换TimeSet - 操作成功完成 (mainwindow.cpp:2094, void MainWindow::replaceTimeSetForVectorTable(int, int, const QList<int>&))
[2025-05-20 11:21:08.537] [Debug] "VectorDataHandler::getVectorTableRowCount"  - 获取表ID为 1 的行数 (vectordatahandler.cpp:1297, int VectorDataHandler::getVectorTableRowCount(int))
[2025-05-20 11:21:08.538] [Debug] "VectorDataHandler::getVectorTableRowCount"  - 从元数据获取的行数: 4 (vectordatahandler.cpp:1314, int VectorDataHandler::getVectorTableRowCount(int))
[2025-05-20 11:21:08.539] [Debug] 开始加载TimeSet数据... (timesetdataaccess.cpp:97, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:21:08.539] [Debug] 执行SQL查询: SELECT id, timeset_name, period FROM timeset_list ORDER BY id (timesetdataaccess.cpp:106, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:21:08.540] [Debug] 查询执行成功，开始遍历结果 (timesetdataaccess.cpp:113, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:21:08.540] [Debug] TimeSetDataAccess::loadTimeSetEdges - 准备执行查询SQL: "SELECT timeset_id, pin_id, T1R, T1F, STBR, wave_id FROM timeset_settings WHERE timeset_id = ?" with ID: 1 (timesetdataaccess.cpp:196, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:21:08.541] [Debug] TimeSetDataAccess::loadTimeSetEdges - 查询成功 for TimeSet ID: 1 (timesetdataaccess.cpp:211, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:21:08.541] [Debug] TimeSetDataAccess::loadTimeSetEdges - 加载边沿: Pin ID= 1 (timesetdataaccess.cpp:222, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:21:08.542] [Debug] TimeSetDataAccess::loadTimeSetEdges - 总共加载 1 个边沿 for TimeSet ID: 1 (timesetdataaccess.cpp:224, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:21:08.542] [Debug] 加载TimeSet: id= 1 , name= "timeset_1" , period= 1000 , 关联管脚数: 0 , 边缘设置数: 1 (timesetdataaccess.cpp:131, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:21:08.543] [Debug] TimeSetDataAccess::loadTimeSetEdges - 准备执行查询SQL: "SELECT timeset_id, pin_id, T1R, T1F, STBR, wave_id FROM timeset_settings WHERE timeset_id = ?" with ID: 2 (timesetdataaccess.cpp:196, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:21:08.543] [Debug] TimeSetDataAccess::loadTimeSetEdges - 查询成功 for TimeSet ID: 2 (timesetdataaccess.cpp:211, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:21:08.544] [Debug] TimeSetDataAccess::loadTimeSetEdges - 加载边沿: Pin ID= 2 (timesetdataaccess.cpp:222, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:21:08.544] [Debug] TimeSetDataAccess::loadTimeSetEdges - 总共加载 1 个边沿 for TimeSet ID: 2 (timesetdataaccess.cpp:224, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:21:08.545] [Debug] 加载TimeSet: id= 2 , name= "timeset_2" , period= 1000 , 关联管脚数: 0 , 边缘设置数: 1 (timesetdataaccess.cpp:131, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:21:08.546] [Debug] TimeSetDataAccess::loadTimeSetEdges - 准备执行查询SQL: "SELECT timeset_id, pin_id, T1R, T1F, STBR, wave_id FROM timeset_settings WHERE timeset_id = ?" with ID: 3 (timesetdataaccess.cpp:196, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:21:08.547] [Debug] TimeSetDataAccess::loadTimeSetEdges - 查询成功 for TimeSet ID: 3 (timesetdataaccess.cpp:211, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:21:08.547] [Debug] TimeSetDataAccess::loadTimeSetEdges - 加载边沿: Pin ID= 3 (timesetdataaccess.cpp:222, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:21:08.547] [Debug] TimeSetDataAccess::loadTimeSetEdges - 总共加载 1 个边沿 for TimeSet ID: 3 (timesetdataaccess.cpp:224, QList<TimeSetEdgeData> TimeSetDataAccess::loadTimeSetEdges(int))
[2025-05-20 11:21:08.548] [Debug] 加载TimeSet: id= 3 , name= "timeset_3" , period= 1000 , 关联管脚数: 0 , 边缘设置数: 1 (timesetdataaccess.cpp:131, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:21:08.548] [Debug] 成功加载 3 个TimeSet记录 (timesetdataaccess.cpp:137, bool TimeSetDataAccess::loadExistingTimeSets(QList<TimeSetData>&))
[2025-05-20 11:21:12.963] [Debug] 替换TimeSet开始 - 从TimeSet ID: 1  到TimeSet ID: 3 (mainwindow.cpp:1931, void MainWindow::replaceTimeSetForVectorTable(int, int, const QList<int>&))
[2025-05-20 11:21:12.964] [Debug] 替换TimeSet - 针对UI行: "3" (mainwindow.cpp:1939, void MainWindow::replaceTimeSetForVectorTable(int, int, const QList<int>&))
[2025-05-20 11:21:12.964] [Debug] 替换TimeSet - 当前向量表ID: 1 , 名称: "1" (mainwindow.cpp:1963, void MainWindow::replaceTimeSetForVectorTable(int, int, const QList<int>&))
[2025-05-20 11:21:12.965] [Debug] 替换TimeSet - 查找: "timeset_1" ( 1 ) 替换: "timeset_3" ( 3 ) (mainwindow.cpp:1992, void MainWindow::replaceTimeSetForVectorTable(int, int, const QList<int>&))
[2025-05-20 11:21:12.967] [Debug] 替换TimeSet - 查询所有行ID: "SELECT id FROM vector_table_data WHERE table_id = 1 ORDER BY sort_index" (mainwindow.cpp:2007, void MainWindow::replaceTimeSetForVectorTable(int, int, const QList<int>&))
[2025-05-20 11:21:12.968] [Debug] 替换TimeSet - 数据库中共有 0 行 (mainwindow.cpp:2016, void MainWindow::replaceTimeSetForVectorTable(int, int, const QList<int>&))
[2025-05-20 11:21:12.969] [Debug] 替换TimeSet警告 - UI行索引 3 无效，忽略 (mainwindow.cpp:2027, void MainWindow::replaceTimeSetForVectorTable(int, int, const QList<int>&))
[2025-05-20 11:21:12.972] [Debug] 替换TimeSet - 没有有效的数据库ID需要更新，操作取消 (mainwindow.cpp:2032, void MainWindow::replaceTimeSetForVectorTable(int, int, const QList<int>&))
[2025-05-20 11:21:15.392] [Debug] "MainWindow::saveVectorTableData"  - 开始保存数据 (mainwindow.cpp:948, void MainWindow::saveVectorTableData())
[2025-05-20 11:21:15.393] [Debug] "MainWindow::saveVectorTableData"  - 未找到当前Tab页中的TableWidget, 回退到 m_vectorTableWidget (mainwindow.cpp:977, void MainWindow::saveVectorTableData())
[2025-05-20 11:21:15.393] [Debug] "MainWindow::saveVectorTableData"  - 目标表格控件已确定。 (mainwindow.cpp:986, void MainWindow::saveVectorTableData())
[2025-05-20 11:21:15.394] [Debug] "VectorDataHandler::saveVectorTableData"  - 开始保存, 表ID: 1 (vectordatahandler.cpp:711, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.394] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.395] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 4 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.396] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.396] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 7
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.397] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.398] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 8
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.401] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.402] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 9
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.404] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.405] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 10
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.406] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Ext"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.407] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 11
  VectorTableID: 1
  Name: "Ext"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.408] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.408] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 12
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.409] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"A"', Input: '"{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":3}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.410] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 13
  VectorTableID: 1
  Name: "A"
  Order: 6
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":1,"type_id":3}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.411] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"B"', Input: '"{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.411] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 14
  VectorTableID: 1
  Name: "B"
  Order: 7
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":2,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.412] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"C"', Input: '"{\"channel_count\":1,\"pin_list_id\":3,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.413] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 15
  VectorTableID: 1
  Name: "C"
  Order: 8
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":3,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.414] [Debug] "VectorDataHandler::saveVectorTableData"  - 可见列元数据加载成功, 列数: 9 , Schema版本: 1 (vectordatahandler.cpp:738, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.415] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 7 , 名称= "Label" , 顺序= 0 , 可见= true , 类型= "TEXT" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.416] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 8 , 名称= "Instruction" , 顺序= 1 , 可见= true , 类型= "INSTRUCTION_ID" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.419] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 9 , 名称= "TimeSet" , 顺序= 2 , 可见= true , 类型= "TIMESET_ID" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.420] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 10 , 名称= "Capture" , 顺序= 3 , 可见= true , 类型= "TEXT" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.421] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 11 , 名称= "Ext" , 顺序= 4 , 可见= true , 类型= "TEXT" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.422] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 12 , 名称= "Comment" , 顺序= 5 , 可见= true , 类型= "TEXT" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.423] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 13 , 名称= "A" , 顺序= 6 , 可见= true , 类型= "PIN_STATE_ID" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.423] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 14 , 名称= "B" , 顺序= 7 , 可见= true , 类型= "PIN_STATE_ID" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.424] [Debug] "VectorDataHandler::saveVectorTableData"  - 加载列: ID= 15 , 名称= "C" , 顺序= 8 , 可见= true , 类型= "PIN_STATE_ID" (vectordatahandler.cpp:776, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.425] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 7  -> 索引= 0 , 名称= "Label" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.425] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 8  -> 索引= 1 , 名称= "Instruction" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.426] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 9  -> 索引= 2 , 名称= "TimeSet" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.427] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 10  -> 索引= 3 , 名称= "Capture" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.427] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 11  -> 索引= 4 , 名称= "Ext" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.428] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 12  -> 索引= 5 , 名称= "Comment" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.429] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 13  -> 索引= 6 , 名称= "A" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.429] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 14  -> 索引= 7 , 名称= "B" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.429] [Debug] "VectorDataHandler::saveVectorTableData"  - 列ID映射: ID= 15  -> 索引= 8 , 名称= "C" (vectordatahandler.cpp:785, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.430] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 开始解析表ID的二进制文件路径: 1 (vectordatahandler.cpp:207, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:21:15.430] [Debug] "loadVectorTableMeta"  - 查询表ID: 1 (vectordatahandler.cpp:35, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.431] [Debug] "loadVectorTableMeta"  - 文件名: "table_1_data.vbindata" , schemaVersion: 1 , rowCount: 4 (vectordatahandler.cpp:54, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.434] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Label"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.436] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 7
  VectorTableID: 1
  Name: "Label"
  Order: 0
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.439] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Instruction"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.440] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 8
  VectorTableID: 1
  Name: "Instruction"
  Order: 1
  Type: 3 (Original: "INSTRUCTION_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.442] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"TimeSet"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.443] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 9
  VectorTableID: 1
  Name: "TimeSet"
  Order: 2
  Type: 4 (Original: "TIMESET_ID")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.444] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Capture"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.445] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 10
  VectorTableID: 1
  Name: "Capture"
  Order: 3
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.446] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Ext"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.446] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 11
  VectorTableID: 1
  Name: "Ext"
  Order: 4
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.447] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"Comment"', Input: '"{}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.448] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 12
  VectorTableID: 1
  Name: "Comment"
  Order: 5
  Type: 0 (Original: "TEXT")
  IsVisible: true
  Properties: QJsonObject({}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.454] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"A"', Input: '"{\"channel_count\":1,\"pin_list_id\":1,\"type_id\":3}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.456] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 13
  VectorTableID: 1
  Name: "A"
  Order: 6
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":1,"type_id":3}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.458] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"B"', Input: '"{\"channel_count\":1,\"pin_list_id\":2,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.459] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 14
  VectorTableID: 1
  Name: "B"
  Order: 7
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":2,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.460] [Debug] "loadVectorTableMeta" - JSON Parsing Details for Column: '"C"', Input: '"{\"channel_count\":1,\"pin_list_id\":3,\"type_id\":1}"', ErrorCode: 0 (ErrorStr: "no error occurred"), IsObject: true (vectordatahandler.cpp:83, bool {anonymous}::loadVectorTableMeta(int, QString&, QList<Vector::ColumnInfo>&, int&, int&))
[2025-05-20 11:21:15.461] [Debug] ["loadVectorTableMeta"] ColumnInfo Details:
  ID: 15
  VectorTableID: 1
  Name: "C"
  Order: 8
  Type: 5 (Original: "PIN_STATE_ID")
  IsVisible: true
  Properties: QJsonObject({"channel_count":1,"pin_list_id":3,"type_id":1}) (C:/Users/GIGA/Desktop/QTProject/VecEdit/vector/vector_data_types.h:56, void Vector::ColumnInfo::logDetails(const QString&) const)
[2025-05-20 11:21:15.462] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 输入数据库路径: "C:/Users/GIGA/Documents/TEST134.db" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:29, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:21:15.462] [Debug] "Utils::PathUtils::getProjectBinaryDataDirectory" - 生成的项目二进制数据目录： "C:\\Users\\GIGA\\Documents\\TEST134_vbindata" (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/utils/pathutils.h:50, static QString Utils::PathUtils::getProjectBinaryDataDirectory(const QString&))
[2025-05-20 11:21:15.463] [Debug] "VectorDataHandler::resolveBinaryFilePath"  - 解析得到的绝对路径:  "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata"  (DB:  "C:/Users/GIGA/Documents/TEST134.db" , File:  "table_1_data.vbindata" ) (vectordatahandler.cpp:276, QString VectorDataHandler::resolveBinaryFilePath(int, QString&))
[2025-05-20 11:21:15.464] [Debug] "VectorDataHandler::saveVectorTableData"  - 表格列数: 9 , 数据库可见列数: 9 , 数据库总列数: 9 (vectordatahandler.cpp:816, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.464] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 0 , 原始表头: "Label" , 简化后: "Label" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.464] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 0 ( "Label" ) -> 数据库可见列 0 ( "Label" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.465] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 1 , 原始表头: "Instruction" , 简化后: "Instruction" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.470] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 1 ( "Instruction" ) -> 数据库可见列 1 ( "Instruction" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.472] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 2 , 原始表头: "TimeSet" , 简化后: "TimeSet" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.473] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 2 ( "TimeSet" ) -> 数据库可见列 2 ( "TimeSet" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.474] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 3 , 原始表头: "Capture" , 简化后: "Capture" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.474] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 3 ( "Capture" ) -> 数据库可见列 3 ( "Capture" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.475] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 4 , 原始表头: "Ext" , 简化后: "Ext" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.475] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 4 ( "Ext" ) -> 数据库可见列 4 ( "Ext" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.476] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 5 , 原始表头: "Comment" , 简化后: "Comment" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.477] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 5 ( "Comment" ) -> 数据库可见列 5 ( "Comment" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.478] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 6 , 原始表头: "A\nx1\nInOut" , 简化后: "A" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.478] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 6 ( "A\nx1\nInOut" ) -> 数据库可见列 6 ( "A" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.478] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 7 , 原始表头: "B\nx1\nIn" , 简化后: "B" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.479] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 7 ( "B\nx1\nIn" ) -> 数据库可见列 7 ( "B" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.479] [Debug] "VectorDataHandler::saveVectorTableData"  - 处理表格列 8 , 原始表头: "C\nx1\nIn" , 简化后: "C" (vectordatahandler.cpp:828, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.480] [Debug] "VectorDataHandler::saveVectorTableData"  - 映射表格列 8 ( "C\nx1\nIn" ) -> 数据库可见列 8 ( "C" ) (vectordatahandler.cpp:841, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.480] [Debug] "VectorDataHandler::saveVectorTableData"  - 从 QTableWidget (行: 4 , 列: 9 ) 收集数据 (vectordatahandler.cpp:865, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.481] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "CALL"  -> ID: 2 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.485] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "CLEAR_MATCH"  -> ID: 3 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.487] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "END_LOOPA"  -> ID: 4 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.488] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "IF_MATCH_JUMP"  -> ID: 5 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.489] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "IF_NOTMATCH_JUMP"  -> ID: 6 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.490] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "INC"  -> ID: 1 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.491] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "JUMP"  -> ID: 7 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.491] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "MATCH_END"  -> ID: 8 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.492] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "MATCH_START"  -> ID: 9 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.492] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "MJUMP"  -> ID: 10 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.493] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "REPEAT"  -> ID: 11 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.493] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "RETURN"  -> ID: 12 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.494] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "SET_LOOPA"  -> ID: 13 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.494] [Debug] "VectorDataHandler::saveVectorTableData"  - 指令映射:  "SET_MATCH"  -> ID: 14 (vectordatahandler.cpp:880, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.495] [Debug] "VectorDataHandler::saveVectorTableData"  - TimeSet映射:  "timeset_1"  -> ID: 1 (vectordatahandler.cpp:897, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.495] [Debug] "VectorDataHandler::saveVectorTableData"  - TimeSet映射:  "timeset_2"  -> ID: 2 (vectordatahandler.cpp:897, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.495] [Debug] "VectorDataHandler::saveVectorTableData"  - TimeSet映射:  "timeset_3"  -> ID: 3 (vectordatahandler.cpp:897, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.496] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 0  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.496] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 1  指令:  "INC"  -> ID: 1 (vectordatahandler.cpp:977, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.497] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 2  TimeSet:  "timeset_1"  -> ID: 1 (vectordatahandler.cpp:992, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.497] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 3  值:  "N" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.497] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 4  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.498] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 5  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.502] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 6  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.503] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 7  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.504] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 0 列 8  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.504] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 0  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.505] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 1  指令:  "INC"  -> ID: 1 (vectordatahandler.cpp:977, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.506] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 2  TimeSet:  "timeset_1"  -> ID: 1 (vectordatahandler.cpp:992, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.506] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 3  值:  "N" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.506] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 4  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.507] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 5  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.507] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 6  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.508] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 7  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.509] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 1 列 8  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.509] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 0  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.509] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 1  指令:  "INC"  -> ID: 1 (vectordatahandler.cpp:977, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.510] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 2  TimeSet:  "timeset_2"  -> ID: 2 (vectordatahandler.cpp:992, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.511] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 3  值:  "N" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.511] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 4  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.512] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 5  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.512] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 6  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.513] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 7  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.513] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 2 列 8  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.514] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 0  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.514] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 1  指令:  "INC"  -> ID: 1 (vectordatahandler.cpp:977, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.515] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 2  TimeSet:  "timeset_3"  -> ID: 3 (vectordatahandler.cpp:992, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.519] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 3  值:  "N" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.521] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 4  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.521] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 5  值:  "" (vectordatahandler.cpp:1011, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.522] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 6  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.522] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 7  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.523] [Debug] "VectorDataHandler::saveVectorTableData"  - 行 3 列 8  管脚状态:  "X" (vectordatahandler.cpp:955, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.523] [Debug] "VectorDataHandler::saveVectorTableData"  - 准备写入数据到二进制文件:  "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata" (vectordatahandler.cpp:1019, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.524] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Entry. File path: "C:\\Users\\GIGA\\Documents\\TEST134_vbindata\\table_1_data.vbindata" DB Schema Version: 1 . Attempting to write 4 rows with 9 columns. (binaryfilehelper.cpp:593, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.524] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - 列信息详情: (binaryfilehelper.cpp:596, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.525] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 0 ]: ID= 7 , 名称= "Label" , 顺序= 0 , 类型= "TEXT" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.525] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 1 ]: ID= 8 , 名称= "Instruction" , 顺序= 1 , 类型= "INSTRUCTION_ID" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.526] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 2 ]: ID= 9 , 名称= "TimeSet" , 顺序= 2 , 类型= "TIMESET_ID" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.526] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 3 ]: ID= 10 , 名称= "Capture" , 顺序= 3 , 类型= "TEXT" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.527] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 4 ]: ID= 11 , 名称= "Ext" , 顺序= 4 , 类型= "TEXT" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.527] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 5 ]: ID= 12 , 名称= "Comment" , 顺序= 5 , 类型= "TEXT" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.528] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 6 ]: ID= 13 , 名称= "A" , 顺序= 6 , 类型= "PIN_STATE_ID" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.529] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 7 ]: ID= 14 , 名称= "B" , 顺序= 7 , 类型= "PIN_STATE_ID" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.529] [Debug] "BinaryFileHelper::writeAllRowsToBinary"   列[ 8 ]: ID= 15 , 名称= "C" , 顺序= 8 , 类型= "PIN_STATE_ID" , 可见= true (binaryfilehelper.cpp:599, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.530] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Attempting to open file for writing (Truncate). (binaryfilehelper.cpp:607, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.530] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - File opened successfully. (binaryfilehelper.cpp:613, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.531] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Attempting to write binary header. (binaryfilehelper.cpp:629, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.531] [Debug] ["BinaryFileHelper::writeAllRowsToBinary - Header to Write"] BinaryFileHeader Details:
  Magic Number: 0x"5642494e"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 4
  Column Count: 9
  Created: 1747711275
  Updated: 1747711275
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:21:15.536] [Debug] "BinaryFileHelper::writeBinaryHeader" - Attempting to write binary file header. (binaryfilehelper.cpp:90, static bool Persistence::BinaryFileHelper::writeBinaryHeader(QIODevice*, const BinaryFileHeader&))
[2025-05-20 11:21:15.537] [Debug] ["BinaryFileHelper::writeBinaryHeader - Successfully Written Header"] BinaryFileHeader Details:
  Magic Number: 0x"56454342"
  File Format Version: 1
  Data Schema Version: 1
  Row Count: 4
  Column Count: 9
  Created: 1747711275
  Updated: 1747711275
  Compression: 0 (C:/Users/GIGA/Desktop/QTProject/VecEdit/common/binary_file_format.h:61, void BinaryFileHeader::logDetails(const QString&) const)
[2025-05-20 11:21:15.538] [Debug] "BinaryFileHelper::writeBinaryHeader"  - Binary file header written successfully. (binaryfilehelper.cpp:149, static bool Persistence::BinaryFileHelper::writeBinaryHeader(QIODevice*, const BinaryFileHeader&))
[2025-05-20 11:21:15.538] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Binary header written successfully. (binaryfilehelper.cpp:643, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.539] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Starting data serialization loop for 4 rows. (binaryfilehelper.cpp:654, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.539] [Debug] "BinaryFileHelper::serializeRow" - 开始序列化行数据, 列数:9, 数据项数:9 (binaryfilehelper.cpp:156, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.540] [Debug] "BinaryFileHelper::serializeRow" - 序列化第0列, 名称:"Label", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.540] [Debug] "BinaryFileHelper::serializeRow" - 序列化第1列, 名称:"Instruction", 类型:3, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.541] [Debug] "BinaryFileHelper::serializeRow" - 序列化第2列, 名称:"TimeSet", 类型:4, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.541] [Debug] "BinaryFileHelper::serializeRow" - 序列化第3列, 名称:"Capture", 类型:0, 值:QVariant(QString, "N") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.542] [Debug] "BinaryFileHelper::serializeRow" - 序列化第4列, 名称:"Ext", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.542] [Debug] "BinaryFileHelper::serializeRow" - 序列化第5列, 名称:"Comment", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.543] [Debug] "BinaryFileHelper::serializeRow" - 序列化第6列, 名称:"A", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.543] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "A" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.544] [Debug] "BinaryFileHelper::serializeRow" - 序列化第7列, 名称:"B", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.545] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "B" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.545] [Debug] "BinaryFileHelper::serializeRow" - 序列化第8列, 名称:"C", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.546] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "C" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.546] [Debug] "BinaryFileHelper::serializeRow"  - 序列化完成, 字节长度: 44 (binaryfilehelper.cpp:239, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.547] [Debug] "BinaryFileHelper::serializeRow" - 开始序列化行数据, 列数:9, 数据项数:9 (binaryfilehelper.cpp:156, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.547] [Debug] "BinaryFileHelper::serializeRow" - 序列化第0列, 名称:"Label", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.547] [Debug] "BinaryFileHelper::serializeRow" - 序列化第1列, 名称:"Instruction", 类型:3, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.548] [Debug] "BinaryFileHelper::serializeRow" - 序列化第2列, 名称:"TimeSet", 类型:4, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.553] [Debug] "BinaryFileHelper::serializeRow" - 序列化第3列, 名称:"Capture", 类型:0, 值:QVariant(QString, "N") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.554] [Debug] "BinaryFileHelper::serializeRow" - 序列化第4列, 名称:"Ext", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.555] [Debug] "BinaryFileHelper::serializeRow" - 序列化第5列, 名称:"Comment", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.556] [Debug] "BinaryFileHelper::serializeRow" - 序列化第6列, 名称:"A", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.556] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "A" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.557] [Debug] "BinaryFileHelper::serializeRow" - 序列化第7列, 名称:"B", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.558] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "B" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.558] [Debug] "BinaryFileHelper::serializeRow" - 序列化第8列, 名称:"C", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.558] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "C" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.559] [Debug] "BinaryFileHelper::serializeRow"  - 序列化完成, 字节长度: 44 (binaryfilehelper.cpp:239, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.559] [Debug] "BinaryFileHelper::serializeRow" - 开始序列化行数据, 列数:9, 数据项数:9 (binaryfilehelper.cpp:156, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.560] [Debug] "BinaryFileHelper::serializeRow" - 序列化第0列, 名称:"Label", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.560] [Debug] "BinaryFileHelper::serializeRow" - 序列化第1列, 名称:"Instruction", 类型:3, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.561] [Debug] "BinaryFileHelper::serializeRow" - 序列化第2列, 名称:"TimeSet", 类型:4, 值:QVariant(int, 2) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.561] [Debug] "BinaryFileHelper::serializeRow" - 序列化第3列, 名称:"Capture", 类型:0, 值:QVariant(QString, "N") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.562] [Debug] "BinaryFileHelper::serializeRow" - 序列化第4列, 名称:"Ext", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.562] [Debug] "BinaryFileHelper::serializeRow" - 序列化第5列, 名称:"Comment", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.563] [Debug] "BinaryFileHelper::serializeRow" - 序列化第6列, 名称:"A", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.563] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "A" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.564] [Debug] "BinaryFileHelper::serializeRow" - 序列化第7列, 名称:"B", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.564] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "B" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.565] [Debug] "BinaryFileHelper::serializeRow" - 序列化第8列, 名称:"C", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.569] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "C" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.570] [Debug] "BinaryFileHelper::serializeRow"  - 序列化完成, 字节长度: 44 (binaryfilehelper.cpp:239, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.570] [Debug] "BinaryFileHelper::serializeRow" - 开始序列化行数据, 列数:9, 数据项数:9 (binaryfilehelper.cpp:156, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.571] [Debug] "BinaryFileHelper::serializeRow" - 序列化第0列, 名称:"Label", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.571] [Debug] "BinaryFileHelper::serializeRow" - 序列化第1列, 名称:"Instruction", 类型:3, 值:QVariant(int, 1) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.572] [Debug] "BinaryFileHelper::serializeRow" - 序列化第2列, 名称:"TimeSet", 类型:4, 值:QVariant(int, 3) (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.572] [Debug] "BinaryFileHelper::serializeRow" - 序列化第3列, 名称:"Capture", 类型:0, 值:QVariant(QString, "N") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.573] [Debug] "BinaryFileHelper::serializeRow" - 序列化第4列, 名称:"Ext", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.573] [Debug] "BinaryFileHelper::serializeRow" - 序列化第5列, 名称:"Comment", 类型:0, 值:QVariant(QString, "") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.574] [Debug] "BinaryFileHelper::serializeRow" - 序列化第6列, 名称:"A", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.574] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "A" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.575] [Debug] "BinaryFileHelper::serializeRow" - 序列化第7列, 名称:"B", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.575] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "B" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.576] [Debug] "BinaryFileHelper::serializeRow" - 序列化第8列, 名称:"C", 类型:5, 值:QVariant(QString, "X") (binaryfilehelper.cpp:169, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.576] [Debug] "BinaryFileHelper::serializeRow"  - 管脚状态列写入有效值: "X" ，列名: "C" (binaryfilehelper.cpp:195, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.577] [Debug] "BinaryFileHelper::serializeRow"  - 序列化完成, 字节长度: 44 (binaryfilehelper.cpp:239, static bool Persistence::BinaryFileHelper::serializeRow(const Vector::RowData&, const QList<Vector::ColumnInfo>&, QByteArray&))
[2025-05-20 11:21:15.577] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - Finished writing loop. Successfully wrote 4 rows. (binaryfilehelper.cpp:716, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.578] [Debug] "BinaryFileHelper::writeAllRowsToBinary" - File flushed and closed. Exit. (binaryfilehelper.cpp:721, static bool Persistence::BinaryFileHelper::writeAllRowsToBinary(const QString&, const QList<Vector::ColumnInfo>&, int, const QList<QList<QVariant> >&))
[2025-05-20 11:21:15.578] [Debug] "VectorDataHandler::saveVectorTableData"  - 二进制文件写入成功 (vectordatahandler.cpp:1026, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:15.606] [Debug] "VectorDataHandler::saveVectorTableData" - 数据库元数据行数已更新为: 4  for table ID: 1 (vectordatahandler.cpp:1060, bool VectorDataHandler::saveVectorTableData(int, QTableWidget*, QString&))
[2025-05-20 11:21:38.348] [Debug] MainWindow::saveWindowState - 窗口状态已保存 (mainwindow.cpp:3193, void MainWindow::saveWindowState())
[2025-05-20 11:21:38.393] [Debug] main - 应用程序退出，返回码: 0 (main.cpp:21, int qMain(int, char**))
[2025-05-20 11:21:38.402] [Warning] QSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.
[2025-05-20 11:21:38.458] [Info] 数据库连接已关闭 (databasemanager.cpp:272, void DatabaseManager::closeDatabase())
[2025-05-20 11:21:38.557] [Debug] VectorDataHandler::~VectorDataHandler - 析构 (vectordatahandler.cpp:700, virtual VectorDataHandler::~VectorDataHandler())
